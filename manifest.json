{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2023-04-25T14:21:27.525736Z", "invocation_id": "e0276342-0e71-4643-9e66-a32c4d841b0e", "env": {}, "project_id": "3b94234bd8aa4058536b581bc3171d4c", "user_id": "41946cf0-6627-4a13-9695-bd8a92099a68", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.psc.blob": {"database": "psc_dev", "schema": "dev_api", "name": "blob", "resource_type": "model", "package_name": "psc", "path": "api/blob.sql", "original_file_path": "models/api/blob.sql", "unique_id": "model.psc.blob", "fqn": ["psc", "api", "blob"], "alias": "blob", "checksum": {"name": "sha256", "checksum": "c7c0303155294e9ca02d5a7ad6013662ed79ff73919418e80be7586b03acc508"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Binary or large texual data associated with a compound.\n", "columns": {"inchi_key": {"name": "inchi_key", "description": "Standard InChI key of a compound. This is the primary identifier to link a compound with its associated data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blob_name": {"name": "blob_name", "description": "Type of the binary data. One of \"image\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uri": {"name": "uri", "description": "Universal Resource Identifier of the binary blob for content too large to store in RDMS efficiently.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blob": {"name": "blob", "description": "Blob stored directly in the RDMS.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": true}, "materialized": "table", "schema": "api", "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432490.2012649, "relation_name": "psc_dev.dev_api.blob", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'btree'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\nSELECT\n    'INCHI' AS inchi_key\n    , 'image' AS blob_name\n    , 'URI' AS uri\n    , CAST('A' AS bytea) AS blob", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/psc/models/api/blob.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    'INCHI' AS inchi_key\n    , 'image' AS blob_name\n    , 'URI' AS uri\n    , CAST('A' AS bytea) AS blob", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.metabolite": {"database": "psc_dev", "schema": "dev_api", "name": "metabolite", "resource_type": "model", "package_name": "psc", "path": "api/metabolite.sql", "original_file_path": "models/api/metabolite.sql", "unique_id": "model.psc.metabolite", "fqn": ["psc", "api", "metabolite"], "alias": "metabolite", "checksum": {"name": "sha256", "checksum": "dbd5635320be9a1b94ea1188117d90a354619528398fd70a90b8ff6820344b99"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metabolite - chemical degradation product - a chemical product formed upon the breakdown of a chemical. Any significant or important metabolites are shown (predominately those formed in the soil) together with links to their profile pages.\n", "columns": {"inchi_key": {"name": "inchi_key", "description": "Standard InChI key of a compound. This is the primary identifier to link a compound with its associated data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isomeric_smiles": {"name": "isomeric_smiles", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "iupac_name": {"name": "iupac_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_inchi_key": {"name": "parent_inchi_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_isomeric_smiles": {"name": "parent_isomeric_smiles", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_uid": {"name": "_uid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_source": {"name": "_source", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": true}, "materialized": "table", "schema": "api", "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432490.2064767, "relation_name": "psc_dev.dev_api.metabolite", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'btree'}\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\nselect \n    \n    inchi_key\n    , isomeric_smiles\n    , iupac_name\n    , parent_inchi_key\n    , parent_isomeric_smiles\n    , _uid AS _source_uid\n    , 'CMDB' AS _source\nfrom {{ ref('int_cmdb__metabolite') }}", "language": "sql", "refs": [["int_cmdb__metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.int_cmdb__metabolite"]}, "compiled_path": "target/compiled/psc/models/api/metabolite.sql", "compiled": true, "compiled_code": "\n\nselect \n    \n    inchi_key\n    , isomeric_smiles\n    , iupac_name\n    , parent_inchi_key\n    , parent_isomeric_smiles\n    , _uid AS _source_uid\n    , 'CMDB' AS _source\nfrom psc_dev.dev.int_cmdb__metabolite", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.compound": {"database": "psc_dev", "schema": "dev_api", "name": "compound", "resource_type": "model", "package_name": "psc", "path": "api/compound.sql", "original_file_path": "models/api/compound.sql", "unique_id": "model.psc.compound", "fqn": ["psc", "api", "compound"], "alias": "compound", "checksum": {"name": "sha256", "checksum": "50e161381fe56bf34948e8522c1922698f93308b70faec758e2c2d26ab5f8a9e"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN ppdb_id TEXT", "transaction": true, "index": null}, {"sql": "CREATE INDEX ppdb_id_idx ON {{ this }} (ppdb_id)", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD COLUMN cmdb_id TEXT", "transaction": true, "index": null}, {"sql": "CREATE INDEX cmdb_id_idx ON {{ this }} (cmdb_id)", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD COLUMN material_id TEXT", "transaction": true, "index": null}, {"sql": "CREATE INDEX material_id_id_idx ON {{ this }} (material_id)", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "This table contains identifiers associated with each chemical compound. They can be open formats like Standard InChI (+Key) or Preferred IUPAC Name (PIN), or foreign key reference to one of the data sets.\n", "columns": {"inchi_key": {"name": "inchi_key", "description": "Standard InChI key of a compound. This is the primary identifier to link a compound with its associated data.       ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Preferred chemical name of this compound, computed from its structure based on the International Union of Pure and Applied Chemistry (IUPAC) nomenclature standards. General IUPAC names are not included.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "synonyms": {"name": "synonyms", "description": "Chemical names provided by individual data contributors.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inchi": {"name": "inchi", "description": "The International Chemical Identifier (InChI) is a computed, non-proprietary identifier for a chemical structure. The InChI is an International Union of Pure and Applied Chemistry (IUPAC) standard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canonical_smiles": {"name": "canonical_smiles", "description": "Simplified Molecular-Input Line-Entry System (SMILES) computed from chemical structures devoid of isotopic and stereochemical information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isomeric_smiles": {"name": "isomeric_smiles", "description": "Simplified Molecular-Input Line-Entry System (SMILES) computed from chemical structures containing isotopic and stereochemical information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "molecular_formula": {"name": "molecular_formula", "description": "A chemical formula is a way of expressing information about the proportions of atoms that constitute a particular chemical compound, using a single line of chemical element symbols and numbers. PubChem uses the Hill system, whereby the number of carbon atoms in a molecule is indicated first, the number of hydrogen atoms second, and then the number of all other chemical elements in alphabetical order. When the formula contains no carbon, all the elements, including hydrogen, are listed alphabetically. Sources other than PubChem may include a variant of the formula that is more structural or natural to chemists, for example, H2SO4 for sulfuric acid, rather than the Hill version H2O4S.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "material_id": {"name": "material_id", "description": "Corteva internal Material ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ppdb_id": {"name": "ppdb_id", "description": "Reference to PPDB dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cmdb_id": {"name": "cmdb_id", "description": "Reference to CMDB dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cas_id": {"name": "cas_id", "description": "A CAS Registry Number (also called CAS RN or CAS Number) is a proprietary registry number assigned by the Chemical Abstracts Service (CAS) division of the American Chemical Society (ACS). It is a numeric identifier that can contain up to 10 digits, divided by hyphens into three parts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ec_id": {"name": "ec_id", "description": "The European Community (EC) number is a seven-digit identifier assigned by the European Chemicals Agency (ECHA) to substances for regulatory purposes within the European Union. EC numbers are sometimes referred to as EINECS, ELINCS, or NLP numbers, because the EC Inventory comprises three individual inventories (EINECS, ELINCS, and the NLP list).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pc_cid": {"name": "pc_cid", "description": "PubChem Compound ID (CID).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_uid": {"name": "_uid", "description": "Unique identifier for this table only. This is used for row tracking.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": true}, "materialized": "table", "schema": "api", "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN ppdb_id TEXT", "CREATE INDEX ppdb_id_idx ON {{ this }} (ppdb_id)", "ALTER TABLE {{ this }} ADD COLUMN cmdb_id TEXT", "CREATE INDEX cmdb_id_idx ON {{ this }} (cmdb_id)", "ALTER TABLE {{ this }} ADD COLUMN material_id TEXT", "CREATE INDEX material_id_id_idx ON {{ this }} (material_id)", "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432490.1833012, "relation_name": "psc_dev.dev_api.compound", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'btree'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN ppdb_id TEXT\",\n        \"CREATE INDEX ppdb_id_idx ON {{ this }} (ppdb_id)\",\n        \"ALTER TABLE {{ this }} ADD COLUMN cmdb_id TEXT\",\n        \"CREATE INDEX cmdb_id_idx ON {{ this }} (cmdb_id)\",\n        \"ALTER TABLE {{ this }} ADD COLUMN material_id TEXT\",\n        \"CREATE INDEX material_id_id_idx ON {{ this }} (material_id)\",        \n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\nSELECT DISTINCT ON (inchi_key)\n    ppdb.inchi_key AS inchi_key\nFROM {{ ref('int_ppdb__compound') }} ppdb\n\n\n\n{#\n\nSELECT\n    COALESCE(cmdb.inchi_key, ppdb.inchi_key) AS inchi_key\n    , COALESCE(cmdb.name_iupac, ppdb.name_iupac) AS name_iupac\nFROM {{ ref('int_cmdb__metabolite') }} AS cmdb\nLEFT JOIN {{ ref('int_ppdb__chemical') }} AS ppdb ON ppdb.inchi_key = cmdb.inchi_key\n    OR ppdb.name_iupac = cmdb.name_iupac\nWHERE cmdb.inchi_key IS NOT NULL\n    OR cmdb.name_iupac IS NOT NULL\n\nUNION\n\nSELECT\n     COALESCE(ppdb.inchi_key, cmdb.inchi_key)\n    , COALESCE(ppdb.name_iupac, cmdb.name_iupac)\nFROM {{ ref('int_ppdb__chemical') }} AS ppdb\nLEFT JOIN {{ ref('int_cmdb__metabolite') }} AS cmdb ON cmdb.inchi_key = ppdb.inchi_key\n    OR cmdb.name_iupac = ppdb.name_iupac\nWHERE ppdb.inchi_key IS NOT NULL\n    OR ppdb.name_iupac IS NOT NULL\n\n\n\n{{ config(\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n        \"ALTER TABLE {{ this }} ADD COLUMN ppdb_id TEXT\",\n        \"ALTER TABLE {{ this }} ADD COLUMN cmdb_id TEXT\",\n        \"ALTER TABLE {{ this }} ADD COLUMN material_id TEXT\",\n        '''UPDATE {{ this }} AS id\n        SET ppdb_id = ppdb.\"ID\" \n        FROM {{ ref(\"int_ppdb__chemical\") }} AS ppdb\n        WHERE ppdb.inchi_key = id.inchi_key\n        OR ppdb.iupac_name = id.name''',\n        '''UPDATE {{ this }} AS id\n        SET cmdb_id = cmdb._id\n        FROM {{ ref(\"int_cmdb__chemical\") }} AS cmdb\n        WHERE cmdb.inchi_key = id.inchi_key\n        OR cmdb.iupac_name = id.name''',\n    ]\n)}}\n\nSELECT DISTINCT\n    cmdb.inchi_key\n    , cmdb.iupac_name AS \"name\"\n    , CAST(NULL AS TEXT) AS inchi\nFROM {{ ref('int_cmdb__chemical') }} AS cmdb\nWHERE cmdb.inchi_key IS NOT NULL\n    OR cmdb.iupac_name IS NOT NULL\n\nUNION \n\nSELECT DISTINCT\n    ppdb.inchi_key\n    , ppdb.pin\n    , CASE \n        WHEN ppdb.inchi ~ 'InChI=1S/' THEN ppdb.inchi\n        ELSE NULL\n    END\nFROM {{ ref('int_ppdb__chemical') }} AS ppdb\nWHERE ppdb.inchi_key IS NOT NULL\n    OR ppdb.pin IS NOT NULL\n#}", "language": "sql", "refs": [["int_ppdb__compound"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.int_ppdb__compound"]}, "compiled_path": "target/compiled/psc/models/api/compound.sql", "compiled": true, "compiled_code": "\nSELECT DISTINCT ON (inchi_key)\n    ppdb.inchi_key AS inchi_key\nFROM psc_dev.dev.int_ppdb__compound ppdb\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.observation": {"database": "psc_dev", "schema": "dev_api", "name": "observation", "resource_type": "model", "package_name": "psc", "path": "api/observation.sql", "original_file_path": "models/api/observation.sql", "unique_id": "model.psc.observation", "fqn": ["psc", "api", "observation"], "alias": "observation", "checksum": {"name": "sha256", "checksum": "ed9f68ce066dcd6ac51413738b527b63387ba29ae99f6f8ba22e5961b168d2c6"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "indexes": [{"columns": ["observation_name"], "type": "btree"}, {"columns": ["tags"], "type": "gin"}, {"columns": ["extra"], "type": "gin"}, {"columns": ["result_numeric"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Results from a test or an assay. Currently data from University of Hertfordshire's Pesticides Properties DataBase (PPDB) and EPA's Metabolite dababase are included.\n\nThe `tags` and `extra` fields are \"catch-all\" fields to hold information that may be specific to an assay.\n\nMinimal compound information is included. If needed, join to the actual [compound](#!/model/model.pscpi.observation) table.\n", "columns": {"observation_name": {"name": "observation_name", "description": "See [this link](#!/seed/seed.pscpi.observation_name) for the list of observations and their descriptions.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags associated with a test or an assay (route, organism, length of test etc.) e.g. acute, fish, 96h", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "subject a test or assay is performed on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_dtm": {"name": "observation_dtm", "description": "Date and time the result was taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_numeric": {"name": "result_numeric", "description": "Numeric form of the result", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_text": {"name": "result_text", "description": "Textual form of the test or assay result; always valued", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit": {"name": "unit", "description": "Unit associated with the result.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relation": {"name": "relation", "description": "relative", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Source origin of this data\n\n| Name | Description                                                                                                                                                                                                                                                                           |\n|------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| A    | EU Regulatory & Evaluation Data as   published by EC, EFSA (RAR, DAR & Conclusion dossiers), EMA (e.g.) EU   Annex III PIC DGD (For example see   http://ec.europa.eu/sanco_pesticides/public/index.cfm or EFSA Scientific   Publications https://www.efsa.europa.eu/en/publications) |\n| AA   | IOBC Database on classification of side effects to beneficial organisms,   2005                                                                                                                                                                                                       |\n| AB   | SELECTV Database                                                                                                                                                                                                                                                                      |\n| AC   | EC Joint Research Centre ESIS European Chemical Substance Information Systems including EINECS (See https://echa.europa.eu/information-on-chemicals)                                                                                                                                  |\n| AE   | Joint Assessment of Commodity Chemicals ECETOC (See   http://www.ecetoc.org)                                                                                                                                                                                                          |\n| AF   | European Food Safety Authority (EFSA)                                                                                                                                                                                                                                                 |\n| AG   | Chemicals Regulation Division, Health and Safety Executive (HSE), UK                                                                                                                                                                                                                  |\n| B    | UK CRD and ACP Evaluation Documents / and other DEFRA (UK) documents (See http://www.pesticides.gov.uk/publications.asp?id=202)                                                                                                                                                     |\n| C    | AGRITOX (See http://www.agritox.anses.fr/)                                                                                                                                                                                                                                            |\n| CA   | Medical and toxicological databases and information systems e.g. TOXNET (See https://www.nlm.nih.gov/toxnet/index.html)                                                                                                                                                             |\n| D    | Agricultural Research Information System (ARIS) Database                                                                                                                                                                                                                              |\n| DW   | Don Wauchope personal database for Pka data: Wauchope, R. D. and Edwards,   J. Dissociation constants for pesticide active ingredients: a database and   comparison with predicted values. MS in preparation                                                                          |\n| E    | Manufacturers Safety Data Sheets                                                                                                                                                                                                                                                      |\n| F    | U.S. EPA ECOTOX database / U.S. EPA pesticide fate database / Miscellaneous WHO documents (See   https://www.epa.gov/pesticide-science-and-assessing-pesticide-risks/databases-related-pesticide-risk-assessment)                                                                   |\n| FAO  | Miscellaneous FAO publications                                                                                                                                                                                                                                                        |\n| G    | Extension Toxicology network Database EXTOXNET (See http://extoxnet.orst.edu/ghindex.html)                                                                                                                                                                                          |\n| H    | The US ARS Pesticide Properties Database (See http://www.ars.usda.gov/Services/docs.htm?docid=14199)                                                                                                                                                                                |\n| J    | Pesticide Action Network Database (See http://www.pesticideinfo.org/)                                                                                                                                                                                                                 |\n| K    | Research Datasets (e.g. Pandora, Demetra)                                                                                                                                                                                                                                             |\n| L    | Pesticide manuals and hard copy reference books / other sources                                                                                                                                                                                                                       |\n| M    | GLEAMS Model database (Groundwater Loading Effects of Agricultural Management Systems). (See   http://www.cpes.peachnet.edu/sewrl/Gleams/gleams_y2k_update.htm)                                                                                                                     |\n| N    | Various Trusts, NGOs & Charities Data                                                                                                                                                                                                                                                 |\n| P    | Other Governments and Regulators                                                                                                                                                                                                                                                      |\n| Q    | Miscellaneous Data from On-line Sources                                                                                                                                                                                                                                               |\n| R    | Peer Reviewed Scientific Publications                                                                                                                                                                                                                                                 |\n| S    | Expert Judgement                                                                                                                                                                                                                                                                      |\n| T    | UN EPFA Database                                                                                                                                                                                                                                                                      |\n| US   | US Dept of Agriculture National Resources Conservation Service - various   datasheets, databases and online sources                                                                                                                                                                   |\n| V    | ChemID Online Databases (See https://chem.nlm.nih.gov/chemidplus/) / IPCS   INCHEM (See http://www.inchem.org/)                                                                                                                                                                       |\n| W    | French database provided by ARVALIS-Institut du V\u00e9g\u00e9tal                                                                                                                                                                                                                               |\n| X    | WINPST Database (See http://www.ipm.ucdavis.edu/TOX/winpstdoc.html)                                                                                                                                                                                                                   |\n| Y    | Germany's Federal Environment Agency (UBA) (See http://www.umweltbundesamt.de/index-e.htm)                                                                                                                                                                                          |\n| Z    | Kingtai Chemials Website (See http://www.kingtaichem.com/)                                                                                                                                                                                                                            |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confidence": {"name": "confidence", "description": "Confidence can be one of the following scales:\n\n|   | Description                                   |\n|---|-----------------------------------------------|\n| 1 | Estimated data with little or no verification |\n| 2 | Unverified data of unknown source             |\n| 3 | Unverified data of known source               |\n| 4 | Verified data                                 |\n| 5 | Verified data used for regulatory purposes.   |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extra": {"name": "extra", "description": "Additional information about this observation, such as reference note or relevant parameters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inchi_key": {"name": "inchi_key", "description": "Standard InChI Key of the target compound. May be empty.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_uid": {"name": "_uid", "description": "Unique identifier for this table only. This is used for row tracking.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_source_id": {"name": "_source_id", "description": "ID in the source system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_source_system": {"name": "_source_system", "description": "Source system provider of this data e.g. PPDB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": true}, "materialized": "table", "schema": "api", "indexes": [{"columns": ["observation_name"], "type": "btree"}, {"columns": ["tags"], "type": "gin"}, {"columns": ["extra"], "type": "gin"}, {"columns": ["result_numeric"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432490.1941123, "relation_name": "psc_dev.dev_api.observation", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['observation_name'], 'type': 'btree'},\n        {'columns': ['tags'], 'type': 'gin'},\n        {'columns': ['extra'], 'type': 'gin'},\n        {'columns': ['result_numeric'], 'type': 'btree'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\nSELECT \n    ppdb.observation_name\n    , ppdb.tags\n    , ppdb.subject\n    , ppdb.observation_dtm\n    , ppdb.result_numeric\n    , ppdb.result_text\n    , ppdb.unit\n    , ppdb.relation\n    , ppdb.data_source\n    , ppdb.confidence\n    , ppdb.extra\n    , NULL::TEXT AS inchi_key\n    , ppdb._uid AS _source_uid\n    , 'PPDB' AS _source_system\nFROM {{ ref('int_ppdb__observation')}} ppdb\n-- JOIN {{ ref('int_ppdb__compound')}} ppdb_c ON ppdb_c._id = ppdb._id", "language": "sql", "refs": [["int_ppdb__observation"], ["int_ppdb__compound"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__compound"]}, "compiled_path": "target/compiled/psc/models/api/observation.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    ppdb.observation_name\n    , ppdb.tags\n    , ppdb.subject\n    , ppdb.observation_dtm\n    , ppdb.result_numeric\n    , ppdb.result_text\n    , ppdb.unit\n    , ppdb.relation\n    , ppdb.data_source\n    , ppdb.confidence\n    , ppdb.extra\n    , NULL::TEXT AS inchi_key\n    , ppdb._uid AS _source_uid\n    , 'PPDB' AS _source_system\nFROM psc_dev.dev.int_ppdb__observation ppdb\n-- JOIN psc_dev.dev.int_ppdb__compound ppdb_c ON ppdb_c._id = ppdb._id", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.compound_property": {"database": "psc_dev", "schema": "dev_api", "name": "compound_property", "resource_type": "model", "package_name": "psc", "path": "api/compound_property.sql", "original_file_path": "models/api/compound_property.sql", "unique_id": "model.psc.compound_property", "fqn": ["psc", "api", "compound_property"], "alias": "compound_property", "checksum": {"name": "sha256", "checksum": "d031a4db30d71ba21b2cc01a95dfc996eb83bc518b930b8f4db56e7f5eaf0349"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Physical and chemical property of a compound\n", "columns": {"property_name": {"name": "property_name", "description": "| name | description |\n|---|---|\n| Complexity | The complexity rating of a compound is a rough estimate of how   complicated a structure is, seen from both the point of view of the elements   contained and the displayed structural features including symmetry. This   complexity rating is computed using the Bertz/Hendrickson/Ihlenfeldt formula. |\n| Covalently-Bonded Unit Count | A covalently-bonded unit is a group of atoms connected by covalent bonds,   ignoring other bond types (or a single atom without covalent bonds). The   \"covalently-bonded unit count\" property is the number of such units   in this compound compound. |\n| Defined Atom Stereocenter Count | An atom stereocenter, also known as a chiral center, is an atom that is   attached to four different types of atoms (or groups of atoms) in the   tetrahedral arrangement. It can have either (R)- or (S)- configurations. Some   compounds, such as racemic mixtures, have an undefined atom stereocenter,   whose (R/S)-configuration is not specifically defined. The \"defined atom   stereocenter count\" is the number of atom stereocenters whose   configurations are specifically defined. |\n| Defined Bond Stereocenter Count | A bond stereocenter is a non-rotatable bond around which two atoms can   have different arrangement (as in cis- and trans-forms of butene around its   double bond). Some compounds have an undefined bond stereocenter, whose   stereochemistry is not specifically defined. The \"defined bond   stereocenter count\" is the number of bond stereocenters whose   configurations are specifically defined. |\n| Exact Mass | The exact mass of an isotopic species is obtained by summing the masses   of the individual isotopes of the molecule. |\n| Formal Charge | Formal charge is the difference between the number of valence electrons   of each atom and the number of electrons the atom is associated with. Formal   charge assumes any shared electrons are equally shared between the two bonded   atoms. |\n| Heavy Atom Count | The number of heavy atoms (i.e., non-hydrogen atoms) in this compound. |\n| Hydrogen Bond Acceptor Count | The number of hydrogen bond acceptors in this compound. |\n| Hydrogen Bond Donor Count | The number of hydrogen bond donors in this compound. |\n| Isotope Atom Count | Isotope atom count is the number of isotopes that are not most abundant   for the corresponding chemical elements. Isotopes are variants of a chemical   element which differ in neutron number. For example, among three isotopes of   carbon (i.e., C-12, C-13, and C-14), the isotope atom count considers the   C-13 and C-14 atoms, because C-12 is the most abundant isotope of carbon. |\n| Molecular Weight | Molecular weight or molecular mass refers to the mass of a molecule. It   is calculated as the sum of the mass of each constituent atom multiplied by   the number of atoms of that element in the molecular formula. The molecular   weight is also called the relative molar mass, because molecular weights are   reported in daltons, which is defined relative to the mass of the isotope 12C   (carbon 12). |\n| Monoisotopic Mass | The monoisotopic mass is the sum of the masses of the atoms in a molecule   using the unbound, ground-state, rest mass of the principal (most abundant)   isotope for each element instead of the isotopic average mass. |\n| Rotatable Bond Count | A rotatable bond is defined as any single-order non-ring bond, where   atoms on either side of the bond are in turn bound to nonterminal heavy   (i.e., non-hydrogen) atoms. That is, where rotation around the bond axis   changes the overall shape of the molecule, and generates conformers which can   be distinguished by standard fast spectroscopic methods. |\n| Topological Polar Surface Area | The topological polar surface area (TPSA) is an estimate of the polar   surface area (in Angstroms^2) of a molecule, computed as the surface sum over   polar atoms in the molecule. The implementation follows the paper by Ertl et   al. [J. Med. Chem. 2000, 43, 3714-3717]: only N and O are considered, 3D   coordinates are not used, and there are various precomputed factors for   different hybridizations, charges and participation in aromatic systems. |\n| Undefined Atom Stereocenter Count | The number of atom stereocenters whose configurations are not   specifically defined. For the definition of atom stereocenters, see the   \"defined atom stereocenter count\" above. |\n| Undefined Bond Stereocenter Count | The number of bond stereocenters whose configurations are not   specifically defined. For the definition of bond stereocenters, see the   \"defined bond stereocenter count\" above. |\n| XLogP3 | XLogP3 is a predicted octanol-water partition coefficient, computed using   the algorithm described in J. Chem. Inf. Model. 2007, 47, 6, 2140-2148. It is   used as a measure of hydrophilicity or hydrophobicity of a molecule. |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_numeric": {"name": "value_numeric", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Source origin of this data\n\n| Name | Description                                                                                                                                                                                                                                                                           |\n|------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| A    | EU Regulatory & Evaluation Data as   published by EC, EFSA (RAR, DAR & Conclusion dossiers), EMA (e.g.) EU   Annex III PIC DGD (For example see   http://ec.europa.eu/sanco_pesticides/public/index.cfm or EFSA Scientific   Publications https://www.efsa.europa.eu/en/publications) |\n| AA   | IOBC Database on classification of side effects to beneficial organisms,   2005                                                                                                                                                                                                       |\n| AB   | SELECTV Database                                                                                                                                                                                                                                                                      |\n| AC   | EC Joint Research Centre ESIS European Chemical Substance Information Systems including EINECS (See https://echa.europa.eu/information-on-chemicals)                                                                                                                                  |\n| AE   | Joint Assessment of Commodity Chemicals ECETOC (See   http://www.ecetoc.org)                                                                                                                                                                                                          |\n| AF   | European Food Safety Authority (EFSA)                                                                                                                                                                                                                                                 |\n| AG   | Chemicals Regulation Division, Health and Safety Executive (HSE), UK                                                                                                                                                                                                                  |\n| B    | UK CRD and ACP Evaluation Documents / and other DEFRA (UK) documents (See http://www.pesticides.gov.uk/publications.asp?id=202)                                                                                                                                                     |\n| C    | AGRITOX (See http://www.agritox.anses.fr/)                                                                                                                                                                                                                                            |\n| CA   | Medical and toxicological databases and information systems e.g. TOXNET (See https://www.nlm.nih.gov/toxnet/index.html)                                                                                                                                                             |\n| D    | Agricultural Research Information System (ARIS) Database                                                                                                                                                                                                                              |\n| DW   | Don Wauchope personal database for Pka data: Wauchope, R. D. and Edwards,   J. Dissociation constants for pesticide active ingredients: a database and   comparison with predicted values. MS in preparation                                                                          |\n| E    | Manufacturers Safety Data Sheets                                                                                                                                                                                                                                                      |\n| F    | U.S. EPA ECOTOX database / U.S. EPA pesticide fate database / Miscellaneous WHO documents (See   https://www.epa.gov/pesticide-science-and-assessing-pesticide-risks/databases-related-pesticide-risk-assessment)                                                                   |\n| FAO  | Miscellaneous FAO publications                                                                                                                                                                                                                                                        |\n| G    | Extension Toxicology network Database EXTOXNET (See http://extoxnet.orst.edu/ghindex.html)                                                                                                                                                                                          |\n| H    | The US ARS Pesticide Properties Database (See http://www.ars.usda.gov/Services/docs.htm?docid=14199)                                                                                                                                                                                |\n| J    | Pesticide Action Network Database (See http://www.pesticideinfo.org/)                                                                                                                                                                                                                 |\n| K    | Research Datasets (e.g. Pandora, Demetra)                                                                                                                                                                                                                                             |\n| L    | Pesticide manuals and hard copy reference books / other sources                                                                                                                                                                                                                       |\n| M    | GLEAMS Model database (Groundwater Loading Effects of Agricultural Management Systems). (See   http://www.cpes.peachnet.edu/sewrl/Gleams/gleams_y2k_update.htm)                                                                                                                     |\n| N    | Various Trusts, NGOs & Charities Data                                                                                                                                                                                                                                                 |\n| P    | Other Governments and Regulators                                                                                                                                                                                                                                                      |\n| Q    | Miscellaneous Data from On-line Sources                                                                                                                                                                                                                                               |\n| R    | Peer Reviewed Scientific Publications                                                                                                                                                                                                                                                 |\n| S    | Expert Judgement                                                                                                                                                                                                                                                                      |\n| T    | UN EPFA Database                                                                                                                                                                                                                                                                      |\n| US   | US Dept of Agriculture National Resources Conservation Service - various   datasheets, databases and online sources                                                                                                                                                                   |\n| V    | ChemID Online Databases (See https://chem.nlm.nih.gov/chemidplus/) / IPCS   INCHEM (See http://www.inchem.org/)                                                                                                                                                                       |\n| W    | French database provided by ARVALIS-Institut du V\u00e9g\u00e9tal                                                                                                                                                                                                                               |\n| X    | WINPST Database (See http://www.ipm.ucdavis.edu/TOX/winpstdoc.html)                                                                                                                                                                                                                   |\n| Y    | Germany's Federal Environment Agency (UBA) (See http://www.umweltbundesamt.de/index-e.htm)                                                                                                                                                                                          |\n| Z    | Kingtai Chemials Website (See http://www.kingtaichem.com/)                                                                                                                                                                                                                            |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inchi_key": {"name": "inchi_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_uid": {"name": "_uid", "description": "Unique identifier for this table only. This is used for row tracking.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_source_id": {"name": "_source_id", "description": "ID in the source system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_source_system": {"name": "_source_system", "description": "Source system provider of this data e.g. PubChem.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": true}, "materialized": "table", "schema": "api"}, "created_at": 1682432490.1986601, "relation_name": "psc_dev.dev_api.compound_property", "raw_code": "SELECT \n    NULL::TEXT AS inchi_key\n    , NULL::TEXT AS property_name\n    , NULL::TEXT[] AS tags\n    , NULL::NUMERIC AS value_numeric\n    , NULL::TEXT AS \"data_source\"\n    , NULL::UUID AS _uid\n    , NULL::TEXT AS _source_id\n    , NULL::TEXT AS _source_system\n\n\n\n{#\n\n{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'hash'},\n        {'columns': ['inchi_key'], 'type': 'hash'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\nselect \n    {{ dbt_utils.star(\n        from=ref('int_ppdb__chemical'), \n        except=['_uid']\n    ) }}\n    , _uid AS _source_uid\n    , 'PPDB' AS _source\nfrom {{ ref('int_ppdb__chemical')}} ppdb\n\n#}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/psc/models/api/compound_property.sql", "compiled": true, "compiled_code": "SELECT \n    NULL::TEXT AS inchi_key\n    , NULL::TEXT AS property_name\n    , NULL::TEXT[] AS tags\n    , NULL::NUMERIC AS value_numeric\n    , NULL::TEXT AS \"data_source\"\n    , NULL::UUID AS _uid\n    , NULL::TEXT AS _source_id\n    , NULL::TEXT AS _source_system\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.int_cmdb__metabolite": {"database": "psc_dev", "schema": "dev", "name": "int_cmdb__metabolite", "resource_type": "model", "package_name": "psc", "path": "cmdb/int_cmdb__metabolite.sql", "original_file_path": "models/cmdb/int_cmdb__metabolite.sql", "unique_id": "model.psc.int_cmdb__metabolite", "fqn": ["psc", "cmdb", "int_cmdb__metabolite"], "alias": "int_cmdb__metabolite", "checksum": {"name": "sha256", "checksum": "a0c2f35b70494e50ba292754744905bcfd7e356d7f499c81454819a509ffef30"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table", "indexes": [{"columns": ["inchi_key"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432489.1412747, "relation_name": "psc_dev.dev.int_cmdb__metabolite", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'btree'}\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\nSELECT\n    *\nFROM {{ ref('stg_cmdb__metabolite') }}", "language": "sql", "refs": [["stg_cmdb__metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.stg_cmdb__metabolite"]}, "compiled_path": "target/compiled/psc/models/cmdb/int_cmdb__metabolite.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    *\nFROM psc_dev.dev.stg_cmdb__metabolite", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.int_cmdb__compound": {"database": "psc_dev", "schema": "dev", "name": "int_cmdb__compound", "resource_type": "model", "package_name": "psc", "path": "cmdb/int_cmdb__compound.sql", "original_file_path": "models/cmdb/int_cmdb__compound.sql", "unique_id": "model.psc.int_cmdb__compound", "fqn": ["psc", "cmdb", "int_cmdb__compound"], "alias": "int_cmdb__compound", "checksum": {"name": "sha256", "checksum": "c5353653ef12dfdc378581e58e81a2842a44ec1fbf5b9d8e1cdd293bbdf1a4df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "indexes": [{"columns": ["inchi_key"], "type": "btree"}, {"columns": ["iupac_name"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table", "indexes": [{"columns": ["inchi_key"], "type": "btree"}, {"columns": ["iupac_name"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432489.1618235, "relation_name": "psc_dev.dev.int_cmdb__compound", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'btree'},\n        {'columns': ['iupac_name'], 'type': 'btree'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\nSELECT DISTINCT\n    iupac_name\n    , inchi_key\n    , isomeric_smiles\n    , _id\nFROM {{ ref('stg_cmdb__metabolite') }}", "language": "sql", "refs": [["stg_cmdb__metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.stg_cmdb__metabolite"]}, "compiled_path": "target/compiled/psc/models/cmdb/int_cmdb__compound.sql", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    iupac_name\n    , inchi_key\n    , isomeric_smiles\n    , _id\nFROM psc_dev.dev.stg_cmdb__metabolite", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_cmdb__metabolite": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_cmdb__metabolite", "resource_type": "model", "package_name": "psc", "path": "cmdb/raw/raw_cmdb__metabolite.sql", "original_file_path": "models/cmdb/raw/raw_cmdb__metabolite.sql", "unique_id": "model.psc.raw_cmdb__metabolite", "fqn": ["psc", "cmdb", "raw", "raw_cmdb__metabolite"], "alias": "raw_cmdb__metabolite", "checksum": {"name": "sha256", "checksum": "7b1881db04cf6ce4e4552620e80ca09dd2161028d17a612224b2f10699bc9ead"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"CM2DB_UID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"CM2DB_UID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.17485, "relation_name": "psc_dev.dev_raw.raw_cmdb__metabolite", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"CM2DB_UID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('cmdb', 'cmdb__in') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["cmdb", "cmdb__in"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.cmdb.cmdb__in"]}, "compiled_path": "target/compiled/psc/models/cmdb/raw/raw_cmdb__metabolite.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"cmdb\".\"cmdb__in\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_cmdb__metabolite)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_cmdb__metabolite": {"database": "psc_dev", "schema": "dev", "name": "stg_cmdb__metabolite", "resource_type": "model", "package_name": "psc", "path": "cmdb/staging/stg_cmdb__metabolite.sql", "original_file_path": "models/cmdb/staging/stg_cmdb__metabolite.sql", "unique_id": "model.psc.stg_cmdb__metabolite", "fqn": ["psc", "cmdb", "staging", "stg_cmdb__metabolite"], "alias": "stg_cmdb__metabolite", "checksum": {"name": "sha256", "checksum": "434004a377eaafb182d9d5596f21a93f466d8716dd03c8e74e34a9f0a3d1d724"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.2308407, "relation_name": "psc_dev.dev.stg_cmdb__metabolite", "raw_code": "SELECT DISTINCT ON (\"CM2DB_UID\")\n    \"Metabolite Isomeric InChIKey\" AS inchi_key\n    , \"Metabolite Isomeric SMILES\" AS isomeric_smiles\n    , \"Metabolite Name (IUPAC)\" AS iupac_name\n    , \"Metabolite ID (or Code)\" AS code\n    , \"Parent Isomeric InChIKey\" AS parent_inchi_key\n    , \"Parent Isomeric SMILES\" parent_isomeric_smiles\n    , \"Parent Name (IUPAC)\" AS parent_name\n    , \"Parent  ID (or Code)\" AS parent_code\n    , \"Pesticide Name\" AS name_pesticide\n    , \"Main Ingredient\" AS ingredient\n    , \"CM2DB_UID\" AS id_cm2db\n    , CAST(string_to_array(\"Entry_0\",' | ') AS NUMERIC[]) AS entry_0_ids\n    , CAST(string_to_array(\"Entry_1\",' | ') AS NUMERIC[]) AS entry_1_ids\n    , CAST(string_to_array(\"Entry_2\",' | ') AS NUMERIC[]) AS entry_2_ids\n    , CAST(string_to_array(\"BioTransformation ID\",' | ') AS NUMERIC[]) AS biotransformation_ids\n    , CAST(string_to_array(\"Biosystems\",' | ') AS text[]) AS biosystems\n    , CAST(string_to_array(lower(\"BiosystemGroups\"),' | ') AS text[]) AS biosystem_groups\n    , string_to_array(\"Reaction Type(s)\",' | ') AS reaction_types\n    , lower(\"Enzymatic/Chemical\") ~ 'enzymatic' AS is_enzymatic\n    , lower(\"Enzymatic/Chemical\") ~ 'enzymatic' AS is_chemical\n    , CAST(string_to_array(\"Metabolite Implied?\",' | ') AS boolean[]) AS metabolite_implied\n    , CAST(\"Metabolite Implied from Multistep Reaction\" AS BOOLEAN) AS is_metabolite_implied_multistep_reaction\n    , lower(\"major/minor\") ~ 'major' AS is_major\n    , lower(\"major/minor\") ~ 'minor' AS is_minor\n    , \"Curator's Comments\" AS comment_curator\n    , \"Reviewer's Comments\" AS comment_reviewer    \n    , \"CM2DB_UID\" AS _id   \nFROM {{ ref('raw_cmdb__metabolite') }}\nORDER BY \"CM2DB_UID\", _version DESC", "language": "sql", "refs": [["raw_cmdb__metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_cmdb__metabolite"]}, "compiled_path": "target/compiled/psc/models/cmdb/staging/stg_cmdb__metabolite.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"CM2DB_UID\")\n    \"Metabolite Isomeric InChIKey\" AS inchi_key\n    , \"Metabolite Isomeric SMILES\" AS isomeric_smiles\n    , \"Metabolite Name (IUPAC)\" AS iupac_name\n    , \"Metabolite ID (or Code)\" AS code\n    , \"Parent Isomeric InChIKey\" AS parent_inchi_key\n    , \"Parent Isomeric SMILES\" parent_isomeric_smiles\n    , \"Parent Name (IUPAC)\" AS parent_name\n    , \"Parent  ID (or Code)\" AS parent_code\n    , \"Pesticide Name\" AS name_pesticide\n    , \"Main Ingredient\" AS ingredient\n    , \"CM2DB_UID\" AS id_cm2db\n    , CAST(string_to_array(\"Entry_0\",' | ') AS NUMERIC[]) AS entry_0_ids\n    , CAST(string_to_array(\"Entry_1\",' | ') AS NUMERIC[]) AS entry_1_ids\n    , CAST(string_to_array(\"Entry_2\",' | ') AS NUMERIC[]) AS entry_2_ids\n    , CAST(string_to_array(\"BioTransformation ID\",' | ') AS NUMERIC[]) AS biotransformation_ids\n    , CAST(string_to_array(\"Biosystems\",' | ') AS text[]) AS biosystems\n    , CAST(string_to_array(lower(\"BiosystemGroups\"),' | ') AS text[]) AS biosystem_groups\n    , string_to_array(\"Reaction Type(s)\",' | ') AS reaction_types\n    , lower(\"Enzymatic/Chemical\") ~ 'enzymatic' AS is_enzymatic\n    , lower(\"Enzymatic/Chemical\") ~ 'enzymatic' AS is_chemical\n    , CAST(string_to_array(\"Metabolite Implied?\",' | ') AS boolean[]) AS metabolite_implied\n    , CAST(\"Metabolite Implied from Multistep Reaction\" AS BOOLEAN) AS is_metabolite_implied_multistep_reaction\n    , lower(\"major/minor\") ~ 'major' AS is_major\n    , lower(\"major/minor\") ~ 'minor' AS is_minor\n    , \"Curator's Comments\" AS comment_curator\n    , \"Reviewer's Comments\" AS comment_reviewer    \n    , \"CM2DB_UID\" AS _id   \nFROM psc_dev.dev_raw.raw_cmdb__metabolite\nORDER BY \"CM2DB_UID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.pharmdb_lims": {"database": "psc_dev", "schema": "dev", "name": "pharmdb_lims", "resource_type": "model", "package_name": "psc", "path": "pharmdb/pharmdb_lims.sql", "original_file_path": "models/pharmdb/pharmdb_lims.sql", "unique_id": "model.psc.pharmdb_lims", "fqn": ["psc", "pharmdb", "pharmdb_lims"], "alias": "pharmdb_lims", "checksum": {"name": "sha256", "checksum": "5c88c0ce940ade6943203fc615d955d15c91e707d5964d631caaa322b10d4370"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table"}, "created_at": 1682432489.2395132, "relation_name": "psc_dev.dev.pharmdb_lims", "raw_code": "SELECT *\nFROM {{ source(\"pharmdb\",\"aged_sorption\")}}", "language": "sql", "refs": [], "sources": [["pharmdb", "aged_sorption"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.psc.pharmdb.aged_sorption"]}, "compiled_path": "target/compiled/psc/models/pharmdb/pharmdb_lims.sql", "compiled": true, "compiled_code": "SELECT *\nFROM \"psc_dev\".\"pharmdb\".\"aged_sorption\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.int_ppdb__observation": {"database": "psc_dev", "schema": "dev", "name": "int_ppdb__observation", "resource_type": "model", "package_name": "psc", "path": "ppdb/int_ppdb__observation.sql", "original_file_path": "models/ppdb/int_ppdb__observation.sql", "unique_id": "model.psc.int_ppdb__observation", "fqn": ["psc", "ppdb", "int_ppdb__observation"], "alias": "int_ppdb__observation", "checksum": {"name": "sha256", "checksum": "fe0bef9001a95075031ed7bc7ba5d17c990d9b9207b14cc74b8fdf8b3c7efe89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "indexes": [{"columns": ["observation_name"], "type": "btree"}, {"columns": ["test_method"], "type": "gin"}, {"columns": ["extra"], "type": "gin"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}, {"sql": "UPDATE {{ this }} SET extra = nullif(jsonb_strip_nulls(extra),'{}')", "transaction": true, "index": null}, {"sql": "UPDATE {{ this }} SET \"subject\" = trim(\"subject\")", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table", "indexes": [{"columns": ["observation_name"], "type": "btree"}, {"columns": ["test_method"], "type": "gin"}, {"columns": ["extra"], "type": "gin"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "UPDATE {{ this }} SET extra = nullif(jsonb_strip_nulls(extra),'{}')", "UPDATE {{ this }} SET \"subject\" = trim(\"subject\")"]}, "created_at": 1682432489.2505226, "relation_name": "psc_dev.dev.int_ppdb__observation", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['observation_name'], 'type': 'btree'},\n        {'columns': ['test_method'], 'type': 'gin'},\n        {'columns': ['extra'], 'type': 'gin'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n        \"UPDATE {{ this }} SET extra = nullif(jsonb_strip_nulls(extra),'{}')\",\n        'UPDATE {{ this }} SET \"subject\" = trim(\"subject\")',\n    ]\n)}}\n\n{% set union_all = joiner(' UNION ALL ') %}\n{% set items = [\n    (\n        'stg_ppdb__human'\n        , 'LD50', ['acute','dermal','mammal']\n        , 'Mammals - Dermal LD50 (mg/kg)'\n        , 'QB - Mammals - Dermal LD50'\n        , '<> - Mammals - Dermal LD50'\n    )\n    , (        \n        'stg_ppdb__human'\n        , 'LC50', ['inhalation','mammal']\n        , 'Mammals - Inhalation LC50 (mg/l)'\n        , 'QB - Mammals - Inhalation LC50'\n        , '<> - Mammals - Inhalation LC50'\n    )\n    , (\n        'stg_ppdb__human'\n        , 'ADI', NULL\n        , 'Acceptable Daily Intake (ADI) (mg/kg bw)'\n        , 'QB - ADI'\n        , NULL\n    )\n    , (\n        'stg_ppdb__human'\n        , 'ARfD', NULL\n        , 'Acute Reference Dose (ARfD) (mg/kg BW/day)'\n        , 'QB - Acute Reference Dose (ARfD)'\n        , NULL\n    )\n    , (\n        'stg_ppdb__human'\n        , 'AOEL', ['systemic']\n        , 'Acceptable Operator Exposure Level (AOEL) systemic'\n        , 'QB - AOEL'\n        , NULL\n    )\n    , (\n        'stg_ppdb__human'\n        , 'Percutaneous penetration studies (%)', NULL\n        , 'Percutaneous penetration studies (%)'\n        , 'QB - Percutaneous penetration studies'\n        , NULL\n    )\n    , (\n        'stg_ppdb__human'\n        , 'Drinking water MAC', NULL\n        , 'Drinking water MAC (ug/l)'\n        , 'Reference - Drinking water MAC'\n        , NULL\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','oral','mammal']\n        , 'Mammals - Acute oral LD50 (mg/kg BW/day)'\n        , 'QB - Mammals - Acute oral LD50'\n        , '<> - Mammals - Acute oral LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'NOEL', ['short term','dietary','mammal']\n        , 'Mammals - Short term dietary NOEL (mg/kg)'\n        , 'QB - Mammals - Short term dietary NOEL'\n        , '<> - Mammals - Short term dietary NOEL'\n        , [('ppm_diet','\"Mammals - Short term dietary NOEL (ppm diet)\"')]\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'NOAEL', ['chronic','21d','mammal']\n        , 'Mammals - Chronic 21d NOAEL (mg/kg bw/d)'\n        , 'QB - Mammals - Chronic 21d NOAEL'\n        , '<> - Mammals - Chronic 21d NOAEL'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','bird']\n        , 'Birds - Acute LD50 (mg/kg)'\n        , 'QB - Birds - Acute LD50'\n        , '<> - Birds - Acute LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'NOEL', ['chronic','21d','bird']\n        , 'Birds - Chronic 21d NOEL (mg/kg bw/d)'\n        , 'QB - Birds - Chronic 21d NOEL'\n        , '<> - Birds - Chronic 21d NOEL'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','48hr','contact','honeybee']\n        , 'Honeybees - Contact acute 48hr LD50 (ug per bee)'\n        , 'QB - Honeybees - Contact acute 48hr LD50'\n        , '<> - Honeybees - Contact acute 48hr LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','48hr','oral','honeybee']\n        , 'Honeybees - Oral acute 48hr LD50 (ug per bee)'\n        , 'QB - Honeybees - Oral acute 48hr LD50'\n        , '<> - Honeybees - Oral acute 48hr LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox',\n        'LD50', ['acute','48hr','mode unknown','honeybee'],\n        'Honeybees - Unknown mode acute 48hr LD50 (ug per bee)',\n        'QB - Honeybees - Unknown mode acute 48hr LD50',\n        '<> - Honeybees - Unknown mode acute 48hr LD50',\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','oral','bumblebee']\n        , 'Bumblebees - Oral acute LD50 (ug per bee)'\n        , 'QB - Bumblebees - Oral acute LD50'\n        , '<> - Bumblebees - Oral acute LD50'\n        , [('note2','\"Notes - Bumblebees - Oral acute LD50\"')]\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','contact','bumblebee']\n        , 'Bumblebees - Contact acute LD50 (ug per bee)'\n        , 'QB- Bumblebees - Contact acute LD50'\n        , '<> - Bumblebees - Contact acute LD50'\n        , [('note2','\"Notes - Bumblebees - Contact acute LD50\"')]\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','contact','mason bee']\n        , 'Mason bees - Contact acute LD50 (ug per bee)'\n        , 'QB - Mason bees - Contact acute LD50'\n        , '<> - Mason bees - Contact acute LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','oral','mason bee']\n        , 'Mason bees - Oral acute LD50 (ug per bee)'\n        , 'QB - Mason bees - Oral acute LD50'\n        , '<> - Mason bees - Oral acute LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','bee','\"Mode of exposure - Other bee species 1 - LD50\"']\n        , 'Other bee species 1 - LD50 (ug/bee)'\n        , 'QB - Other bee species 1 - LD50'\n        , '<> - Other bee species 1 - LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LD50', ['acute','bee','\"Mode of exposure - Other bee species 2 - LD50\"']\n        , 'Other bee species 2 - LD50 (ug/bee)'\n        , 'QB - Other bee species 2 - LD50'\n        , '<> - Other bee species 2 - LD50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LC50', ['acute','14d','earthworm']\n        , 'Earthworms - Acute 14d LC50 (mg/kg)'\n        , 'QB - Earthworms - Acute'\n        , '<> - Earthworms - Acute'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'NOEC', ['chronic','14d','earthworm','reproduction']\n        , 'Earthworms - Chronic NOEC, reproduction (mg/kg)'\n        , 'QB - Earthworms - Chronic'\n        , '<> - Earthworms - Chronic'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'LC50', ['acute','collembola']\n        , 'Collembola - Acute LC50 (mg/kg)'\n        , 'QB - Collembola - Acute LC50'\n        , '<> - Collembola - Acute LC50'\n    )\n    , (\n        'stg_ppdb__terrestrial_ecotox'\n        , 'NOEC', ['chronic','28d','collembola','reproduction']\n        , 'Collembola - Chronic reproduction 28d NOEC (mg/kg)'\n        , 'QB - Collembola - Chronic reproduction 28d NOEC'\n        , '<> - Collembola - Chronic reproduction 28d NOEC'\n    )\n\n    \n    , (\n        'stg_ppdb__fate'\n        , 'Solubility', ['water','20 degC']\n        , 'Solubility - In water at 20 degC (mg/l)'\n        , 'QB - Solubility - In water'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Solubility', ['organic solvent','20 degC']\n        , 'Solubility - In organic solvent 1 at 20 degC (mg/l)'\n        , 'QB - Solubility - In organic solvent 1'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Solubility', ['organic solvent','20 degC']\n        , 'Solubility - In organic solvent 2 at 20 degC (mg/l)'\n        , 'QB - Solubility - In organic solvent 2'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Solubility', ['organic solvent','20 degC']\n        , 'Solubility - In organic solvent 3 at 20 degC (mg/l)'\n        , 'QB - Solubility - In organic solvent 3'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Solubility', ['organic solvent','20 degC']\n        , 'Solubility - In organic solvent 4 at 20 degC (mg/l)'\n        , 'QB - Solubility - In organic solvent 4'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Melting Point', NULL\n        , 'Melting point (degC)'\n        , 'QB - Melting point'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Boiling Point', NULL\n        , 'Boiling point (deg C, 1atm)'\n        , 'QB - Boiling point'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Degradation Point', NULL\n        , 'Degradation point (degC, 1atm)'\n        , 'QB - Degradation point'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Flashpoint', NULL\n        , 'Flashpoint (degC)'\n        , 'QB - Flashpoint'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'LogP', NULL\n        , 'LogP'\n        , 'QB - LogP'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Bulk density (g/ml)', NULL\n        , 'Bulk density (g/ml) / Specific gravity'\n        , 'QB - Bulk density / Specific gravity'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Dissociation Constant', ['25 degC']\n        , 'Dissociation constant (pKa) at 25 degC'\n        , 'QB - pKa'\n        , NULL\n        , [('note','\"Notes - pKa\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Vapour Pressure', ['20 degC']\n        , 'Vapour pressure at 20 degC (mPa)'\n        , 'QB - Vapour pressure at 20 degC'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Henry Law Constant', ['25 degC']\n        , \"Henry's law constant at 25 degC (Pa/m3/mol)\"\n        , \"QB - Henry's law constant\"\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Maximum UV Absorption', NULL\n        , 'Maximum UV-vis absorption (L/mol/cm)'\n        , 'QB - Maximum UV-vis absorption'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Surface Tension', NULL\n        , 'Surface tension (mN/m)'\n        , 'QB - Surface tension'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Refractive Index', NULL\n        , 'Refractive index'\n        , 'QB - Refractive index'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Bioconcentration Factor', NULL\n        , 'Bioconcentration factor'\n        , 'QB - Bioconcentration factor'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Clearance Half-Life', NULL\n        , 'Clearance half-life (days)'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['soil']\n        , 'Soil DT50 - Typical (days)'\n        , 'QB - Soil DT50 - Typical'\n        , NULL\n        , [('note','\"Notes - Soil DT50\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['soil','lab']\n        , 'Soil DT50 - Lab (days)'\n        , 'QB - Soil DT50 - Lab'\n        , NULL\n        , [('note','\"Notes - Soil DT50\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['soil','field']\n        , 'Soil DT50 - Field (days)'\n        , 'QB - Soil DT50 - Field'\n        , NULL\n        , [('note','\"Notes - Soil DT50\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT90', ['soil','lab']\n        , 'Soil DT90 - Lab (days)'\n        , 'QB - Soil DT90 - Lab'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT90', ['soil','field']\n        , 'Soil DT90 - Field (days)'\n        , 'QB - Soil DT90 - Field'\n        , NULL\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['soil','modeling point']\n        , 'Soil DT90 - Field (days)'\n        , 'QB - Soil DT90 - Field'\n        , NULL\n        , [('note','\"Notes - Soil DT50\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'RL50', ['on']\n        , 'Dissipation rate RL50 on plant matrix'\n        , 'QB - RL50 on plant matrix'\n        , NULL\n        , [('note','\"Notes - RL50 on plant matrix\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'RL50', ['on and in']\n        , 'Dissipation rate RL50 on and in plant matrix'\n        , 'QB - RL50 on and in plant matrix'\n        , NULL\n        , [('note','\"Notes - RL50 on and in plant matrix\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['pH 7','aqueous photolysis']\n        , 'Aqueous photolysis DT50 at pH 7 (days)'\n        , 'QB - Aqueous photolysis'\n        , NULL\n        , [('note','\"Notes - Aqueous photolysis\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['pH 7','aqueous hydrolysis']\n        , 'Aqueous hydrolysis DT50 at pH7 (days)'\n        , 'QB - Aqueous hydrolysis'\n        , NULL\n        , [('note','\"Notes - Aqueous hydrolysis\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['sediment']\n        , 'Water-sediment DT50 (days)'\n        , 'QB - Water-sediment DT50'\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'DT50', ['water']\n        , 'Water phase only DT50 (days)'\n        , 'QB - Water phase only DT50'\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Kd', NULL\n        , 'Kd (ml/g)'\n        , 'QB - Kd & Koc'\n        , NULL\n        , [('note','\"Notes & range - Kd & Koc\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Koc', NULL\n        , 'Koc (ml/g)'\n        , 'QB - Kd & Koc'\n        , NULL\n        , [('note','\"Notes & range - Kd & Koc\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Kf', NULL\n        , 'Kf (ml/g)'\n        , 'QB - Freundlich isotherm'\n        , NULL\n        , [('note','\"Notes & range - Kf & Kfoc\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Kfoc', NULL\n        , 'Kfoc (ml/g)'\n        , 'QB - Freundlich isotherm'\n        , NULL\n        , [('note','\"Notes & range - Kf & Kfoc\"')]\n    )\n    , (\n        'stg_ppdb__fate'\n        , 'Freundlich Exponent', NULL\n        , 'Freundlich exponent (1/n)'\n        , 'QB - Freundlich isotherm'\n        , NULL\n        , [('note','\"Notes & range - Kf & Kfoc\"')]\n    )\n\n\n\n\n\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'LC50', ['acute','fish','96hr']\n        , 'Fish - Acute 96hr LC50 (mg/l)'\n        , 'QB - Fish - Acute 96hr LC50'\n        , '<> - Fish - Acute 96hr LC50'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEC', ['chronic','fish','21d']\n        , 'Fish - Chronic 21d NOEC (mg/l)'\n        , 'QB - Fish - Chronic 21d NOEC'\n        , '<> - Fish - Chronic 21d NOEC'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'EC50', ['acute','aquatic invertebrates','48h']\n        , 'Aquatic invertebrates - Acute 48hr EC50 (mg/l)'\n        , 'QB - Aquatic invertebrates - Acute 48hr EC50'\n        , '<> - Aquatic invertebrates - Acute 48hr EC50'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEC', ['chronic','aquatic invertebrates','21d']\n        , 'Aquatic invertebrates - Chronic 21d NOEC (mg/l)'\n        , 'QB - Aquatic invertebrates - Chronic 21d NOEC'\n        , '<> - Aquatic invertebrates - Chronic 21d NOEC'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'LC50', ['acute','aquatic crustaceans','96hr']\n        , 'Aquatic crustaceans - Acute 96hr LC50 (mg/l)'\n        , 'QB - Aquatic crustaceans - Acute 96hr LC50'\n        , '<> - Aquatic crustaceans - Acute 96hr LC50'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'EC50', ['acute','aquatic plants','7d']\n        , 'Aquatic plants - Acute 7d EC50 (mg/l)'\n        , 'QB - Aquatic plants - Acute 7d EC50'\n        , '<> - Aquatic plants - Acute 7d EC50'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'EC50', ['acute','algae','72hr','growth']\n        , 'Algae - Acute 72hr EC50 growth (mg/l)'\n        , 'QB - Algae - Acute 72hr EC50 growth'\n        , '<> - Algae - Acute 72hr EC50 growth'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEC', ['chronic','algae','96hr']\n        , 'Algae - Chronic 96hr NOEC (mg/l)'\n        , 'QB - Algae - Chronic 96hr NOEC'\n        , '<> - Algae - Chronic 96hr NOEC'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'LC50', ['acute','sediment dwelling organisms','96hr']\n        , 'Sediment dwelling organimss - Acute 96hr LC50'\n        , 'QB - Sediment dwelling organisms'\n        , '<> - Sediment dwelling organisms'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEC', ['chronic','sediment dwelling organism','28d','water']\n        , 'Sediment dwelling organisms - Chronic 28d NOEC static water'\n        , 'QB - Sediment dwelling organisms - Chronic water'\n        , '<> - Sediment dwelling organisms - Chronic static water'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEC', ['chronic','sediment dwelling organism','28d','sediment']\n        , 'Sediment dwelling organisms - Chronic 28d NOEC sediment'\n        , 'QB - Sediment dwelling organisms - Chronic sediment'\n        , '<> - Sediment dwelling organisms - Chronic sediment'\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEAEC', ['aquatic mesocosm']\n        , 'Aquatic mesocosm 1 - NOEAEC (mg/l)'\n        , 'QB - Aquatic mesocosm 1'\n        , NULL\n    )\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'NOEAEC', ['aquatic mesocosm']\n        , 'Aquatic mesocosm 2 NOEAEC (mg/l)'\n        , 'QB - Aquatic mesocosm 2'\n        , NULL\n    )\n\n] %}\n\n{#  -- template\n    , (\n        'stg_ppdb__aquatic_ecotox'\n        , 'ARfD_TEMPLATE', NULL\n        , 'AcceptableDailyIntake_TEMPLATE'\n        , 'QB__AcceptableDailyIntake_TEMPLATE'\n        , 'RELATIVE_AcceptableDailyIntake_TEMPLATE'\n    )\n#}\n\n{% for item in items %}\n{% set table_name = item[0] %}\n{% set observation = item[1] %}\n{% set tags = item[2] %}\n{% set result_column = item[3] %}\n{% set quality_column = item[4] %}\n{% set relative_column = item[5] %}\n{% set extras = item[6] %}\n\n{{- union_all() }}\n\nSELECT\n    '{{ observation }}' AS observation_name\n    , {{ \"CAST(ARRAY['\" ~ tags|join(\"','\") ~\"'] AS TEXT[])\" if tags else 'NULL' }} AS test_method\n    , NULL AS \"target\"\n    , {{ ppdb_observation_parse_subject(quality_column) }} AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , {{ ppdb_observation_parse_result_numeric(result_column) }} AS target_value\n    , {{ ppdb_observation_parse_result_text(result_column) }} AS target_text\n    , {{ ppdb_observation_parse_unit(result_column) }} AS unit\n    , {{ ppdb_observation_parse_relative(relative_column) }} AS relation\n    , {{ ppdb_observation_parse_source(quality_column) }} AS \"data_source\"\n    , {{ ppdb_observation_parse_confidence(quality_column) }} AS confidence\n    , {{ ppdb_observation_parse_extra(quality_column, extras) }} AS extra\n    {{ ppdb_observation_meta() }}\nFROM {{ ref(table_name) }}\nWHERE \"{{ result_column }}\" IS NOT NULL\n{% endfor %}\n\n\n-- SOIL DEGRADATION\n{% set soil_items = [\n    ('stg_ppdb__soil_degradation', 'DT50', ['soil','lab'], 'DT50 lab', 'QBdegdrad')\n    , ('stg_ppdb__soil_degradation', 'DT50', ['soil','field'], 'DT50 Field', 'QBdegdrad')\n    , ('stg_ppdb__soil_degradation', 'DT90', ['soil','lab'], 'DT90 Lab', 'QBdegdrad')\n    , ('stg_ppdb__soil_degradation', 'DT90', ['soil','field'], 'DT90 Field', 'QBdegdrad')\n] %}\n\n{% for item in soil_items %}\n{% set table_name = item[0] %}\n{% set observation = item[1] %}\n{% set tags = item[2] %}\n{% set result_column = item[3] %}\n{% set quality_column = item[4] %}\n{% set relative_column = item[5] %}\n\nUNION ALL\n\nSELECT\n    '{{ observation }}'\n    , {{ \"CAST(ARRAY['\" ~ tags|join(\"','\") ~\"'] AS TEXT[])\" if tags else 'NULL' }}\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , {{ ppdb_observation_parse_result_numeric(result_column) }}\n    , {{ ppdb_observation_parse_result_text(result_column) }}\n    , {{ ppdb_observation_parse_unit(result_column) }}\n    , NULL\n    , {{ ppdb_observation_parse_source(quality_column) }}\n    , {{ ppdb_observation_parse_confidence(quality_column) }}\n    , {{ ppdb_observation_parse_extra(quality_column) }} \n        || jsonb_build_object(\n        'pH', \"pH\",\n        'temperature', \"Temp\",\n        'reference',\"Reference\"\n    )\n    {{ ppdb_observation_meta() }}\nFROM {{ ref(table_name) }}\nWHERE \"{{ result_column }}\" IS NOT NULL\n{% endfor %}\n\n-- SOIL ADSORPTION\n\n{% for col in ['Kd','Koc','Kf','Kfoc','1/n'] %}\n{% set result_column = col %}\n{% set quality_column = 'QB' %}\n{% set relative_column = NULL %}\n\nUNION ALL\n\nSELECT\n    '{{ col }}'\n    , NULL\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , {{ ppdb_observation_parse_result_numeric(result_column) }} AS result_numeric\n    , {{ ppdb_observation_parse_result_text(result_column) }} AS result_text\n    , {{ ppdb_observation_parse_unit(result_column) }} AS unit\n    , NULL\n    , {{ ppdb_observation_parse_source(quality_column) }} AS source\n    , {{ ppdb_observation_parse_confidence(quality_column) }} AS confidence\n    , {{ ppdb_observation_parse_extra(quality_column) }}\n        || jsonb_build_object(\n        'ph', \"Soil pH\",\n        '%_clay', \"% Clay\",\n        '%_sand', \"% Sand\",\n        '%_silt', \"% Silt\",\n        '%_other_material', \"% OM\",\n        '%_other_compound', \"% OC\",\n        'ph_depencence', \"pH Dependence\",\n        'reference',\"Reference\",\n        'notes', \"Notes\"\n    )\n    {{ ppdb_observation_meta() }}    \nFROM {{ ref('stg_ppdb__soil_adsorption') }}\nWHERE \"{{ result_column }}\" IS NOT NULL\n{% endfor %}\n\n\n-- PLANT MATRIX\n{% for obs in ['RL50 min','RL50 max','RL50 mean'] %} \n\n{% set result_column = obs %}\n{% set quality_column = NULL %}\n{% set relative_column = NULL %}\n\nUNION ALL\n\nSELECT\n    'RL50'\n    , ARRAY[\n        '{{ obs.split(\" \")[1] }}'\n        ,\"Study type\"\n        ,\"Plant Matrix\"\n    ] \n    , 'plant'\n    , \"Plant\"\n    , NULL\n    , {{ ppdb_observation_parse_result_numeric(result_column) }} AS result_numeric\n    , {{ ppdb_observation_parse_result_text(result_column) }} AS result_text\n    , {{ ppdb_observation_parse_unit(result_column) }} AS unit\n    , NULL  -- relative\n    , NULL, NULL  -- source and confidence\n    , jsonb_build_object(\n        'study_location', NULLIF(\"Study Location\",'*'),\n        'scientific_name', NULLIF(\"Plant Scientific Name\",'*'),\n        'reference', \"Reference\",\n        'study_reference', \"Study Reference\",\n        'residue_position', string_to_array(\"Residue position\",' and ')\n    )\n    {{ ppdb_observation_meta() }}    \nFROM {{ ref('stg_ppdb__plant') }}\nWHERE \"{{ obs }}\" IS NOT NULL\n{% endfor %}", "language": "sql", "refs": [["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__plant"], ["stg_ppdb__plant"], ["stg_ppdb__plant"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.psc.ppdb_observation_parse_subject", "macro.psc.ppdb_observation_parse_result_numeric", "macro.psc.ppdb_observation_parse_result_text", "macro.psc.ppdb_observation_parse_unit", "macro.psc.ppdb_observation_parse_relative", "macro.psc.ppdb_observation_parse_source", "macro.psc.ppdb_observation_parse_confidence", "macro.psc.ppdb_observation_parse_extra", "macro.psc.ppdb_observation_meta"], "nodes": ["model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant"]}, "compiled_path": "target/compiled/psc/models/ppdb/int_ppdb__observation.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','dermal','mammal'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mammals - Dermal LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mammals - Dermal LD50 (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mammals - Dermal LD50 (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mammals - Dermal LD50 (mg/kg)\" AS TEXT) AS target_text\n    , substring('Mammals - Dermal LD50 (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mammals - Dermal LD50\" AS relation\n    , substring(\"QB - Mammals - Dermal LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mammals - Dermal LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mammals - Dermal LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Mammals - Dermal LD50 (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LC50' AS observation_name\n    , CAST(ARRAY['inhalation','mammal'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mammals - Inhalation LC50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mammals - Inhalation LC50 (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mammals - Inhalation LC50 (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mammals - Inhalation LC50 (mg/l)\" AS TEXT) AS target_text\n    , substring('Mammals - Inhalation LC50 (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mammals - Inhalation LC50\" AS relation\n    , substring(\"QB - Mammals - Inhalation LC50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mammals - Inhalation LC50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mammals - Inhalation LC50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Mammals - Inhalation LC50 (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'ADI' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - ADI\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Acceptable Daily Intake (ADI) (mg/kg bw)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Acceptable Daily Intake (ADI) (mg/kg bw)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Acceptable Daily Intake (ADI) (mg/kg bw)\" AS TEXT) AS target_text\n    , substring('Acceptable Daily Intake (ADI) (mg/kg bw)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - ADI\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - ADI\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - ADI\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Acceptable Daily Intake (ADI) (mg/kg bw)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'ARfD' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Acute Reference Dose (ARfD)\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Acute Reference Dose (ARfD) (mg/kg BW/day)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Acute Reference Dose (ARfD) (mg/kg BW/day)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Acute Reference Dose (ARfD) (mg/kg BW/day)\" AS TEXT) AS target_text\n    , substring('Acute Reference Dose (ARfD) (mg/kg BW/day)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Acute Reference Dose (ARfD)\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Acute Reference Dose (ARfD)\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Acute Reference Dose (ARfD)\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Acute Reference Dose (ARfD) (mg/kg BW/day)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'AOEL' AS observation_name\n    , CAST(ARRAY['systemic'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - AOEL\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Acceptable Operator Exposure Level (AOEL) systemic\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Acceptable Operator Exposure Level (AOEL) systemic\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Acceptable Operator Exposure Level (AOEL) systemic\" AS TEXT) AS target_text\n    , substring('Acceptable Operator Exposure Level (AOEL) systemic' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - AOEL\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - AOEL\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - AOEL\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Acceptable Operator Exposure Level (AOEL) systemic\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Percutaneous penetration studies (%)' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Percutaneous penetration studies\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Percutaneous penetration studies (%)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Percutaneous penetration studies (%)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Percutaneous penetration studies (%)\" AS TEXT) AS target_text\n    , substring('Percutaneous penetration studies (%)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Percutaneous penetration studies\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Percutaneous penetration studies\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Percutaneous penetration studies\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Percutaneous penetration studies (%)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Drinking water MAC' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"Reference - Drinking water MAC\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Drinking water MAC (ug/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Drinking water MAC (ug/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Drinking water MAC (ug/l)\" AS TEXT) AS target_text\n    , substring('Drinking water MAC (ug/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"Reference - Drinking water MAC\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"Reference - Drinking water MAC\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"Reference - Drinking water MAC\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Drinking water MAC (ug/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','oral','mammal'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mammals - Acute oral LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mammals - Acute oral LD50 (mg/kg BW/day)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mammals - Acute oral LD50 (mg/kg BW/day)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mammals - Acute oral LD50 (mg/kg BW/day)\" AS TEXT) AS target_text\n    , substring('Mammals - Acute oral LD50 (mg/kg BW/day)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mammals - Acute oral LD50\" AS relation\n    , substring(\"QB - Mammals - Acute oral LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mammals - Acute oral LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mammals - Acute oral LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mammals - Acute oral LD50 (mg/kg BW/day)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEL' AS observation_name\n    , CAST(ARRAY['short term','dietary','mammal'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mammals - Short term dietary NOEL\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mammals - Short term dietary NOEL (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mammals - Short term dietary NOEL (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mammals - Short term dietary NOEL (mg/kg)\" AS TEXT) AS target_text\n    , substring('Mammals - Short term dietary NOEL (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mammals - Short term dietary NOEL\" AS relation\n    , substring(\"QB - Mammals - Short term dietary NOEL\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mammals - Short term dietary NOEL\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mammals - Short term dietary NOEL\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'ppm_diet', \"Mammals - Short term dietary NOEL (ppm diet)\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mammals - Short term dietary NOEL (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOAEL' AS observation_name\n    , CAST(ARRAY['chronic','21d','mammal'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mammals - Chronic 21d NOAEL\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" AS TEXT) AS target_text\n    , substring('Mammals - Chronic 21d NOAEL (mg/kg bw/d)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mammals - Chronic 21d NOAEL\" AS relation\n    , substring(\"QB - Mammals - Chronic 21d NOAEL\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mammals - Chronic 21d NOAEL\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mammals - Chronic 21d NOAEL\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','bird'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Birds - Acute LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Birds - Acute LD50 (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Birds - Acute LD50 (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Birds - Acute LD50 (mg/kg)\" AS TEXT) AS target_text\n    , substring('Birds - Acute LD50 (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Birds - Acute LD50\" AS relation\n    , substring(\"QB - Birds - Acute LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Birds - Acute LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Birds - Acute LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Birds - Acute LD50 (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEL' AS observation_name\n    , CAST(ARRAY['chronic','21d','bird'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Birds - Chronic 21d NOEL\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Birds - Chronic 21d NOEL (mg/kg bw/d)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Birds - Chronic 21d NOEL (mg/kg bw/d)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Birds - Chronic 21d NOEL (mg/kg bw/d)\" AS TEXT) AS target_text\n    , substring('Birds - Chronic 21d NOEL (mg/kg bw/d)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Birds - Chronic 21d NOEL\" AS relation\n    , substring(\"QB - Birds - Chronic 21d NOEL\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Birds - Chronic 21d NOEL\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Birds - Chronic 21d NOEL\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Birds - Chronic 21d NOEL (mg/kg bw/d)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','48hr','contact','honeybee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Honeybees - Contact acute 48hr LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Honeybees - Contact acute 48hr LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Honeybees - Contact acute 48hr LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Honeybees - Contact acute 48hr LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Honeybees - Contact acute 48hr LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Honeybees - Contact acute 48hr LD50\" AS relation\n    , substring(\"QB - Honeybees - Contact acute 48hr LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Honeybees - Contact acute 48hr LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Honeybees - Contact acute 48hr LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Honeybees - Contact acute 48hr LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','48hr','oral','honeybee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Honeybees - Oral acute 48hr LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Honeybees - Oral acute 48hr LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Honeybees - Oral acute 48hr LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Honeybees - Oral acute 48hr LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Honeybees - Oral acute 48hr LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Honeybees - Oral acute 48hr LD50\" AS relation\n    , substring(\"QB - Honeybees - Oral acute 48hr LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Honeybees - Oral acute 48hr LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Honeybees - Oral acute 48hr LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Honeybees - Oral acute 48hr LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','48hr','mode unknown','honeybee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Honeybees - Unknown mode acute 48hr LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Honeybees - Unknown mode acute 48hr LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Honeybees - Unknown mode acute 48hr LD50\" AS relation\n    , substring(\"QB - Honeybees - Unknown mode acute 48hr LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Honeybees - Unknown mode acute 48hr LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Honeybees - Unknown mode acute 48hr LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','oral','bumblebee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Bumblebees - Oral acute LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Bumblebees - Oral acute LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Bumblebees - Oral acute LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Bumblebees - Oral acute LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Bumblebees - Oral acute LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Bumblebees - Oral acute LD50\" AS relation\n    , substring(\"QB - Bumblebees - Oral acute LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Bumblebees - Oral acute LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Bumblebees - Oral acute LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note2', \"Notes - Bumblebees - Oral acute LD50\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Bumblebees - Oral acute LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','contact','bumblebee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB- Bumblebees - Contact acute LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Bumblebees - Contact acute LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Bumblebees - Contact acute LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Bumblebees - Contact acute LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Bumblebees - Contact acute LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Bumblebees - Contact acute LD50\" AS relation\n    , substring(\"QB- Bumblebees - Contact acute LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB- Bumblebees - Contact acute LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB- Bumblebees - Contact acute LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note2', \"Notes - Bumblebees - Contact acute LD50\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Bumblebees - Contact acute LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','contact','mason bee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mason bees - Contact acute LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mason bees - Contact acute LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mason bees - Contact acute LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mason bees - Contact acute LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Mason bees - Contact acute LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mason bees - Contact acute LD50\" AS relation\n    , substring(\"QB - Mason bees - Contact acute LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mason bees - Contact acute LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mason bees - Contact acute LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mason bees - Contact acute LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','oral','mason bee'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Mason bees - Oral acute LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Mason bees - Oral acute LD50 (ug per bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mason bees - Oral acute LD50 (ug per bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Mason bees - Oral acute LD50 (ug per bee)\" AS TEXT) AS target_text\n    , substring('Mason bees - Oral acute LD50 (ug per bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Mason bees - Oral acute LD50\" AS relation\n    , substring(\"QB - Mason bees - Oral acute LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Mason bees - Oral acute LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Mason bees - Oral acute LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mason bees - Oral acute LD50 (ug per bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','bee','\"Mode of exposure - Other bee species 1 - LD50\"'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Other bee species 1 - LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Other bee species 1 - LD50 (ug/bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Other bee species 1 - LD50 (ug/bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Other bee species 1 - LD50 (ug/bee)\" AS TEXT) AS target_text\n    , substring('Other bee species 1 - LD50 (ug/bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Other bee species 1 - LD50\" AS relation\n    , substring(\"QB - Other bee species 1 - LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Other bee species 1 - LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Other bee species 1 - LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Other bee species 1 - LD50 (ug/bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LD50' AS observation_name\n    , CAST(ARRAY['acute','bee','\"Mode of exposure - Other bee species 2 - LD50\"'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Other bee species 2 - LD50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Other bee species 2 - LD50 (ug/bee)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Other bee species 2 - LD50 (ug/bee)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Other bee species 2 - LD50 (ug/bee)\" AS TEXT) AS target_text\n    , substring('Other bee species 2 - LD50 (ug/bee)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Other bee species 2 - LD50\" AS relation\n    , substring(\"QB - Other bee species 2 - LD50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Other bee species 2 - LD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Other bee species 2 - LD50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Other bee species 2 - LD50 (ug/bee)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LC50' AS observation_name\n    , CAST(ARRAY['acute','14d','earthworm'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Earthworms - Acute\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Earthworms - Acute 14d LC50 (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Earthworms - Acute 14d LC50 (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Earthworms - Acute 14d LC50 (mg/kg)\" AS TEXT) AS target_text\n    , substring('Earthworms - Acute 14d LC50 (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Earthworms - Acute\" AS relation\n    , substring(\"QB - Earthworms - Acute\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Earthworms - Acute\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Earthworms - Acute\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Earthworms - Acute 14d LC50 (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','14d','earthworm','reproduction'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Earthworms - Chronic\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Earthworms - Chronic NOEC, reproduction (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Earthworms - Chronic NOEC, reproduction (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Earthworms - Chronic NOEC, reproduction (mg/kg)\" AS TEXT) AS target_text\n    , substring('Earthworms - Chronic NOEC, reproduction (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Earthworms - Chronic\" AS relation\n    , substring(\"QB - Earthworms - Chronic\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Earthworms - Chronic\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Earthworms - Chronic\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Earthworms - Chronic NOEC, reproduction (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LC50' AS observation_name\n    , CAST(ARRAY['acute','collembola'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Collembola - Acute LC50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Collembola - Acute LC50 (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Collembola - Acute LC50 (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Collembola - Acute LC50 (mg/kg)\" AS TEXT) AS target_text\n    , substring('Collembola - Acute LC50 (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Collembola - Acute LC50\" AS relation\n    , substring(\"QB - Collembola - Acute LC50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Collembola - Acute LC50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Collembola - Acute LC50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Collembola - Acute LC50 (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','28d','collembola','reproduction'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Collembola - Chronic reproduction 28d NOEC\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" AS TEXT) AS target_text\n    , substring('Collembola - Chronic reproduction 28d NOEC (mg/kg)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Collembola - Chronic reproduction 28d NOEC\" AS relation\n    , substring(\"QB - Collembola - Chronic reproduction 28d NOEC\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Collembola - Chronic reproduction 28d NOEC\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Collembola - Chronic reproduction 28d NOEC\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Solubility' AS observation_name\n    , CAST(ARRAY['water','20 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Solubility - In water\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Solubility - In water at 20 degC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Solubility - In water at 20 degC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Solubility - In water at 20 degC (mg/l)\" AS TEXT) AS target_text\n    , substring('Solubility - In water at 20 degC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Solubility - In water\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Solubility - In water\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Solubility - In water\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In water at 20 degC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Solubility' AS observation_name\n    , CAST(ARRAY['organic solvent','20 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Solubility - In organic solvent 1\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Solubility - In organic solvent 1 at 20 degC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Solubility - In organic solvent 1 at 20 degC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Solubility - In organic solvent 1 at 20 degC (mg/l)\" AS TEXT) AS target_text\n    , substring('Solubility - In organic solvent 1 at 20 degC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Solubility - In organic solvent 1\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Solubility - In organic solvent 1\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Solubility - In organic solvent 1\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 1 at 20 degC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Solubility' AS observation_name\n    , CAST(ARRAY['organic solvent','20 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Solubility - In organic solvent 2\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Solubility - In organic solvent 2 at 20 degC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Solubility - In organic solvent 2 at 20 degC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Solubility - In organic solvent 2 at 20 degC (mg/l)\" AS TEXT) AS target_text\n    , substring('Solubility - In organic solvent 2 at 20 degC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Solubility - In organic solvent 2\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Solubility - In organic solvent 2\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Solubility - In organic solvent 2\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 2 at 20 degC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Solubility' AS observation_name\n    , CAST(ARRAY['organic solvent','20 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Solubility - In organic solvent 3\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Solubility - In organic solvent 3 at 20 degC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Solubility - In organic solvent 3 at 20 degC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Solubility - In organic solvent 3 at 20 degC (mg/l)\" AS TEXT) AS target_text\n    , substring('Solubility - In organic solvent 3 at 20 degC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Solubility - In organic solvent 3\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Solubility - In organic solvent 3\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Solubility - In organic solvent 3\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 3 at 20 degC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Solubility' AS observation_name\n    , CAST(ARRAY['organic solvent','20 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Solubility - In organic solvent 4\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Solubility - In organic solvent 4 at 20 degC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Solubility - In organic solvent 4 at 20 degC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Solubility - In organic solvent 4 at 20 degC (mg/l)\" AS TEXT) AS target_text\n    , substring('Solubility - In organic solvent 4 at 20 degC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Solubility - In organic solvent 4\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Solubility - In organic solvent 4\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Solubility - In organic solvent 4\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 4 at 20 degC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Melting Point' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Melting point\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Melting point (degC)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Melting point (degC)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Melting point (degC)\" AS TEXT) AS target_text\n    , substring('Melting point (degC)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Melting point\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Melting point\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Melting point\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Melting point (degC)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Boiling Point' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Boiling point\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Boiling point (deg C, 1atm)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Boiling point (deg C, 1atm)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Boiling point (deg C, 1atm)\" AS TEXT) AS target_text\n    , substring('Boiling point (deg C, 1atm)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Boiling point\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Boiling point\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Boiling point\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Boiling point (deg C, 1atm)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Degradation Point' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Degradation point\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Degradation point (degC, 1atm)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Degradation point (degC, 1atm)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Degradation point (degC, 1atm)\" AS TEXT) AS target_text\n    , substring('Degradation point (degC, 1atm)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Degradation point\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Degradation point\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Degradation point\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Degradation point (degC, 1atm)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Flashpoint' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Flashpoint\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Flashpoint (degC)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Flashpoint (degC)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Flashpoint (degC)\" AS TEXT) AS target_text\n    , substring('Flashpoint (degC)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Flashpoint\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Flashpoint\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Flashpoint\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Flashpoint (degC)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LogP' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - LogP\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"LogP\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"LogP\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"LogP\" AS TEXT) AS target_text\n    , substring('LogP' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - LogP\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - LogP\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - LogP\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"LogP\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Bulk density (g/ml)' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Bulk density / Specific gravity\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Bulk density (g/ml) / Specific gravity\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Bulk density (g/ml) / Specific gravity\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Bulk density (g/ml) / Specific gravity\" AS TEXT) AS target_text\n    , substring('Bulk density (g/ml) / Specific gravity' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Bulk density / Specific gravity\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Bulk density / Specific gravity\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Bulk density / Specific gravity\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Bulk density (g/ml) / Specific gravity\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Dissociation Constant' AS observation_name\n    , CAST(ARRAY['25 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - pKa\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Dissociation constant (pKa) at 25 degC\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Dissociation constant (pKa) at 25 degC\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Dissociation constant (pKa) at 25 degC\" AS TEXT) AS target_text\n    , substring('Dissociation constant (pKa) at 25 degC' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - pKa\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - pKa\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - pKa\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - pKa\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Dissociation constant (pKa) at 25 degC\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Vapour Pressure' AS observation_name\n    , CAST(ARRAY['20 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Vapour pressure at 20 degC\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Vapour pressure at 20 degC (mPa)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Vapour pressure at 20 degC (mPa)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Vapour pressure at 20 degC (mPa)\" AS TEXT) AS target_text\n    , substring('Vapour pressure at 20 degC (mPa)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Vapour pressure at 20 degC\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Vapour pressure at 20 degC\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Vapour pressure at 20 degC\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Vapour pressure at 20 degC (mPa)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Henry Law Constant' AS observation_name\n    , CAST(ARRAY['25 degC'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Henry's law constant\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Henry's law constant at 25 degC (Pa/m3/mol)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Henry's law constant at 25 degC (Pa/m3/mol)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Henry's law constant at 25 degC (Pa/m3/mol)\" AS TEXT) AS target_text\n    , substring('Henry''s law constant at 25 degC (Pa/m3/mol)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Henry's law constant\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Henry's law constant\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Henry's law constant\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Henry's law constant at 25 degC (Pa/m3/mol)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Maximum UV Absorption' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Maximum UV-vis absorption\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Maximum UV-vis absorption (L/mol/cm)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Maximum UV-vis absorption (L/mol/cm)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Maximum UV-vis absorption (L/mol/cm)\" AS TEXT) AS target_text\n    , substring('Maximum UV-vis absorption (L/mol/cm)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Maximum UV-vis absorption\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Maximum UV-vis absorption\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Maximum UV-vis absorption\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Maximum UV-vis absorption (L/mol/cm)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Surface Tension' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Surface tension\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Surface tension (mN/m)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Surface tension (mN/m)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Surface tension (mN/m)\" AS TEXT) AS target_text\n    , substring('Surface tension (mN/m)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Surface tension\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Surface tension\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Surface tension\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Surface tension (mN/m)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Refractive Index' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Refractive index\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Refractive index\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Refractive index\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Refractive index\" AS TEXT) AS target_text\n    , substring('Refractive index' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Refractive index\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Refractive index\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Refractive index\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Refractive index\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Bioconcentration Factor' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Bioconcentration factor\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Bioconcentration factor\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Bioconcentration factor\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Bioconcentration factor\" AS TEXT) AS target_text\n    , substring('Bioconcentration factor' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Bioconcentration factor\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Bioconcentration factor\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Bioconcentration factor\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Bioconcentration factor\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Clearance Half-Life' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(NULL FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Clearance half-life (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Clearance half-life (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Clearance half-life (days)\" AS TEXT) AS target_text\n    , substring('Clearance half-life (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(NULL FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(NULL FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(NULL FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Clearance half-life (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['soil'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Soil DT50 - Typical\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Soil DT50 - Typical (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Soil DT50 - Typical (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Soil DT50 - Typical (days)\" AS TEXT) AS target_text\n    , substring('Soil DT50 - Typical (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Soil DT50 - Typical\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Soil DT50 - Typical\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Soil DT50 - Typical\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - Soil DT50\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT50 - Typical (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['soil','lab'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Soil DT50 - Lab\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Soil DT50 - Lab (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Soil DT50 - Lab (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Soil DT50 - Lab (days)\" AS TEXT) AS target_text\n    , substring('Soil DT50 - Lab (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Soil DT50 - Lab\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Soil DT50 - Lab\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Soil DT50 - Lab\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - Soil DT50\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT50 - Lab (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['soil','field'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Soil DT50 - Field\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Soil DT50 - Field (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Soil DT50 - Field (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Soil DT50 - Field (days)\" AS TEXT) AS target_text\n    , substring('Soil DT50 - Field (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Soil DT50 - Field\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Soil DT50 - Field\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Soil DT50 - Field\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - Soil DT50\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT50 - Field (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT90' AS observation_name\n    , CAST(ARRAY['soil','lab'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Soil DT90 - Lab\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Soil DT90 - Lab (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Soil DT90 - Lab (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Soil DT90 - Lab (days)\" AS TEXT) AS target_text\n    , substring('Soil DT90 - Lab (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Soil DT90 - Lab\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Soil DT90 - Lab\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Soil DT90 - Lab\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT90 - Lab (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT90' AS observation_name\n    , CAST(ARRAY['soil','field'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Soil DT90 - Field\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Soil DT90 - Field (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Soil DT90 - Field (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Soil DT90 - Field (days)\" AS TEXT) AS target_text\n    , substring('Soil DT90 - Field (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Soil DT90 - Field\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Soil DT90 - Field\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Soil DT90 - Field\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT90 - Field (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['soil','modeling point'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Soil DT90 - Field\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Soil DT90 - Field (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Soil DT90 - Field (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Soil DT90 - Field (days)\" AS TEXT) AS target_text\n    , substring('Soil DT90 - Field (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Soil DT90 - Field\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Soil DT90 - Field\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Soil DT90 - Field\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - Soil DT50\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT90 - Field (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'RL50' AS observation_name\n    , CAST(ARRAY['on'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - RL50 on plant matrix\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Dissipation rate RL50 on plant matrix\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Dissipation rate RL50 on plant matrix\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Dissipation rate RL50 on plant matrix\" AS TEXT) AS target_text\n    , substring('Dissipation rate RL50 on plant matrix' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - RL50 on plant matrix\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - RL50 on plant matrix\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - RL50 on plant matrix\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - RL50 on plant matrix\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Dissipation rate RL50 on plant matrix\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'RL50' AS observation_name\n    , CAST(ARRAY['on and in'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - RL50 on and in plant matrix\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Dissipation rate RL50 on and in plant matrix\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Dissipation rate RL50 on and in plant matrix\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Dissipation rate RL50 on and in plant matrix\" AS TEXT) AS target_text\n    , substring('Dissipation rate RL50 on and in plant matrix' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - RL50 on and in plant matrix\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - RL50 on and in plant matrix\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - RL50 on and in plant matrix\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - RL50 on and in plant matrix\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Dissipation rate RL50 on and in plant matrix\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['pH 7','aqueous photolysis'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aqueous photolysis\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aqueous photolysis DT50 at pH 7 (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aqueous photolysis DT50 at pH 7 (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aqueous photolysis DT50 at pH 7 (days)\" AS TEXT) AS target_text\n    , substring('Aqueous photolysis DT50 at pH 7 (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Aqueous photolysis\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aqueous photolysis\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aqueous photolysis\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - Aqueous photolysis\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Aqueous photolysis DT50 at pH 7 (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['pH 7','aqueous hydrolysis'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aqueous hydrolysis\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aqueous hydrolysis DT50 at pH7 (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aqueous hydrolysis DT50 at pH7 (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aqueous hydrolysis DT50 at pH7 (days)\" AS TEXT) AS target_text\n    , substring('Aqueous hydrolysis DT50 at pH7 (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Aqueous hydrolysis\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aqueous hydrolysis\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aqueous hydrolysis\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes - Aqueous hydrolysis\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Aqueous hydrolysis DT50 at pH7 (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['sediment'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Water-sediment DT50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Water-sediment DT50 (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Water-sediment DT50 (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Water-sediment DT50 (days)\" AS TEXT) AS target_text\n    , substring('Water-sediment DT50 (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Water-sediment DT50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Water-sediment DT50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Water-sediment DT50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Water-sediment DT50 (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'DT50' AS observation_name\n    , CAST(ARRAY['water'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Water phase only DT50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Water phase only DT50 (days)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Water phase only DT50 (days)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Water phase only DT50 (days)\" AS TEXT) AS target_text\n    , substring('Water phase only DT50 (days)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Water phase only DT50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Water phase only DT50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Water phase only DT50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Water phase only DT50 (days)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Kd' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Kd & Koc\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Kd (ml/g)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Kd (ml/g)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Kd (ml/g)\" AS TEXT) AS target_text\n    , substring('Kd (ml/g)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Kd & Koc\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Kd & Koc\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Kd & Koc\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes & range - Kd & Koc\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Kd (ml/g)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Koc' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Kd & Koc\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Koc (ml/g)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Koc (ml/g)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Koc (ml/g)\" AS TEXT) AS target_text\n    , substring('Koc (ml/g)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Kd & Koc\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Kd & Koc\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Kd & Koc\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes & range - Kd & Koc\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Koc (ml/g)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Kf' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Kf (ml/g)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Kf (ml/g)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Kf (ml/g)\" AS TEXT) AS target_text\n    , substring('Kf (ml/g)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Freundlich isotherm\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes & range - Kf & Kfoc\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Kf (ml/g)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Kfoc' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Kfoc (ml/g)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Kfoc (ml/g)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Kfoc (ml/g)\" AS TEXT) AS target_text\n    , substring('Kfoc (ml/g)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Freundlich isotherm\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes & range - Kf & Kfoc\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Kfoc (ml/g)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'Freundlich Exponent' AS observation_name\n    , NULL AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Freundlich exponent (1/n)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Freundlich exponent (1/n)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Freundlich exponent (1/n)\" AS TEXT) AS target_text\n    , substring('Freundlich exponent (1/n)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Freundlich isotherm\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Freundlich isotherm\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n    , 'note', \"Notes & range - Kf & Kfoc\"\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Freundlich exponent (1/n)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LC50' AS observation_name\n    , CAST(ARRAY['acute','fish','96hr'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Fish - Acute 96hr LC50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Fish - Acute 96hr LC50 (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Fish - Acute 96hr LC50 (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Fish - Acute 96hr LC50 (mg/l)\" AS TEXT) AS target_text\n    , substring('Fish - Acute 96hr LC50 (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Fish - Acute 96hr LC50\" AS relation\n    , substring(\"QB - Fish - Acute 96hr LC50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Fish - Acute 96hr LC50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Fish - Acute 96hr LC50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Fish - Acute 96hr LC50 (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','fish','21d'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Fish - Chronic 21d NOEC\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Fish - Chronic 21d NOEC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Fish - Chronic 21d NOEC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Fish - Chronic 21d NOEC (mg/l)\" AS TEXT) AS target_text\n    , substring('Fish - Chronic 21d NOEC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Fish - Chronic 21d NOEC\" AS relation\n    , substring(\"QB - Fish - Chronic 21d NOEC\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Fish - Chronic 21d NOEC\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Fish - Chronic 21d NOEC\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Fish - Chronic 21d NOEC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'EC50' AS observation_name\n    , CAST(ARRAY['acute','aquatic invertebrates','48h'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aquatic invertebrates - Acute 48hr EC50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" AS TEXT) AS target_text\n    , substring('Aquatic invertebrates - Acute 48hr EC50 (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Aquatic invertebrates - Acute 48hr EC50\" AS relation\n    , substring(\"QB - Aquatic invertebrates - Acute 48hr EC50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aquatic invertebrates - Acute 48hr EC50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aquatic invertebrates - Acute 48hr EC50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','aquatic invertebrates','21d'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aquatic invertebrates - Chronic 21d NOEC\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" AS TEXT) AS target_text\n    , substring('Aquatic invertebrates - Chronic 21d NOEC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Aquatic invertebrates - Chronic 21d NOEC\" AS relation\n    , substring(\"QB - Aquatic invertebrates - Chronic 21d NOEC\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aquatic invertebrates - Chronic 21d NOEC\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aquatic invertebrates - Chronic 21d NOEC\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LC50' AS observation_name\n    , CAST(ARRAY['acute','aquatic crustaceans','96hr'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aquatic crustaceans - Acute 96hr LC50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" AS TEXT) AS target_text\n    , substring('Aquatic crustaceans - Acute 96hr LC50 (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Aquatic crustaceans - Acute 96hr LC50\" AS relation\n    , substring(\"QB - Aquatic crustaceans - Acute 96hr LC50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aquatic crustaceans - Acute 96hr LC50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aquatic crustaceans - Acute 96hr LC50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'EC50' AS observation_name\n    , CAST(ARRAY['acute','aquatic plants','7d'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aquatic plants - Acute 7d EC50\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aquatic plants - Acute 7d EC50 (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aquatic plants - Acute 7d EC50 (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aquatic plants - Acute 7d EC50 (mg/l)\" AS TEXT) AS target_text\n    , substring('Aquatic plants - Acute 7d EC50 (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Aquatic plants - Acute 7d EC50\" AS relation\n    , substring(\"QB - Aquatic plants - Acute 7d EC50\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aquatic plants - Acute 7d EC50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aquatic plants - Acute 7d EC50\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic plants - Acute 7d EC50 (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'EC50' AS observation_name\n    , CAST(ARRAY['acute','algae','72hr','growth'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Algae - Acute 72hr EC50 growth\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Algae - Acute 72hr EC50 growth (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Algae - Acute 72hr EC50 growth (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Algae - Acute 72hr EC50 growth (mg/l)\" AS TEXT) AS target_text\n    , substring('Algae - Acute 72hr EC50 growth (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Algae - Acute 72hr EC50 growth\" AS relation\n    , substring(\"QB - Algae - Acute 72hr EC50 growth\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Algae - Acute 72hr EC50 growth\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Algae - Acute 72hr EC50 growth\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Algae - Acute 72hr EC50 growth (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','algae','96hr'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Algae - Chronic 96hr NOEC\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Algae - Chronic 96hr NOEC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Algae - Chronic 96hr NOEC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Algae - Chronic 96hr NOEC (mg/l)\" AS TEXT) AS target_text\n    , substring('Algae - Chronic 96hr NOEC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Algae - Chronic 96hr NOEC\" AS relation\n    , substring(\"QB - Algae - Chronic 96hr NOEC\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Algae - Chronic 96hr NOEC\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Algae - Chronic 96hr NOEC\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Algae - Chronic 96hr NOEC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'LC50' AS observation_name\n    , CAST(ARRAY['acute','sediment dwelling organisms','96hr'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Sediment dwelling organisms\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Sediment dwelling organimss - Acute 96hr LC50\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Sediment dwelling organimss - Acute 96hr LC50\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Sediment dwelling organimss - Acute 96hr LC50\" AS TEXT) AS target_text\n    , substring('Sediment dwelling organimss - Acute 96hr LC50' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Sediment dwelling organisms\" AS relation\n    , substring(\"QB - Sediment dwelling organisms\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Sediment dwelling organisms\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Sediment dwelling organisms\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Sediment dwelling organimss - Acute 96hr LC50\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','sediment dwelling organism','28d','water'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Sediment dwelling organisms - Chronic water\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Sediment dwelling organisms - Chronic 28d NOEC static water\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Sediment dwelling organisms - Chronic 28d NOEC static water\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Sediment dwelling organisms - Chronic 28d NOEC static water\" AS TEXT) AS target_text\n    , substring('Sediment dwelling organisms - Chronic 28d NOEC static water' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Sediment dwelling organisms - Chronic static water\" AS relation\n    , substring(\"QB - Sediment dwelling organisms - Chronic water\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Sediment dwelling organisms - Chronic water\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Sediment dwelling organisms - Chronic water\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Sediment dwelling organisms - Chronic 28d NOEC static water\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEC' AS observation_name\n    , CAST(ARRAY['chronic','sediment dwelling organism','28d','sediment'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Sediment dwelling organisms - Chronic sediment\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Sediment dwelling organisms - Chronic 28d NOEC sediment\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Sediment dwelling organisms - Chronic 28d NOEC sediment\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Sediment dwelling organisms - Chronic 28d NOEC sediment\" AS TEXT) AS target_text\n    , substring('Sediment dwelling organisms - Chronic 28d NOEC sediment' FROM '\\((.*)\\)$') AS unit\n    , \"<> - Sediment dwelling organisms - Chronic sediment\" AS relation\n    , substring(\"QB - Sediment dwelling organisms - Chronic sediment\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Sediment dwelling organisms - Chronic sediment\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Sediment dwelling organisms - Chronic sediment\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Sediment dwelling organisms - Chronic 28d NOEC sediment\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEAEC' AS observation_name\n    , CAST(ARRAY['aquatic mesocosm'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aquatic mesocosm 1\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aquatic mesocosm 1 - NOEAEC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aquatic mesocosm 1 - NOEAEC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aquatic mesocosm 1 - NOEAEC (mg/l)\" AS TEXT) AS target_text\n    , substring('Aquatic mesocosm 1 - NOEAEC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Aquatic mesocosm 1\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aquatic mesocosm 1\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aquatic mesocosm 1\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic mesocosm 1 - NOEAEC (mg/l)\" IS NOT NULL\n\n\n\n\n\n\n\n UNION ALL \n\nSELECT\n    'NOEAEC' AS observation_name\n    , CAST(ARRAY['aquatic mesocosm'] AS TEXT[]) AS test_method\n    , NULL AS \"target\"\n    , substring(\"QB - Aquatic mesocosm 2\" FROM '^[[:alpha:]]+\\d\\s([^,]+)') AS \"subject\"\n    , CAST(NULL AS TIMESTAMP) AS observation_dtm\n    , CASE\n    WHEN CAST(\"Aquatic mesocosm 2 NOEAEC (mg/l)\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Aquatic mesocosm 2 NOEAEC (mg/l)\" AS NUMERIC) \n    ELSE NULL \nEND AS target_value\n    , CAST(\"Aquatic mesocosm 2 NOEAEC (mg/l)\" AS TEXT) AS target_text\n    , substring('Aquatic mesocosm 2 NOEAEC (mg/l)' FROM '\\((.*)\\)$') AS unit\n    , NULL AS relation\n    , substring(\"QB - Aquatic mesocosm 2\" FROM '^([[:alpha:]]+)\\d') AS \"data_source\"\n    , CAST(substring(\"QB - Aquatic mesocosm 2\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB - Aquatic mesocosm 2\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) AS extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic mesocosm 2 NOEAEC (mg/l)\" IS NOT NULL\n\n\n\n-- SOIL DEGRADATION\n\n\n\n\n\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'DT50'\n    , CAST(ARRAY['soil','lab'] AS TEXT[])\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"DT50 lab\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"DT50 lab\" AS NUMERIC) \n    ELSE NULL \nEND\n    , CAST(\"DT50 lab\" AS TEXT)\n    , substring('DT50 lab' FROM '\\((.*)\\)$')\n    , NULL\n    , substring(\"QBdegdrad\" FROM '^([[:alpha:]]+)\\d')\n    , CAST(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT)\n    , jsonb_build_object(\n    'note', nullif(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) \n        || jsonb_build_object(\n        'pH', \"pH\",\n        'temperature', \"Temp\",\n        'reference',\"Reference\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT50 lab\" IS NOT NULL\n\n\n\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'DT50'\n    , CAST(ARRAY['soil','field'] AS TEXT[])\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"DT50 Field\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"DT50 Field\" AS NUMERIC) \n    ELSE NULL \nEND\n    , CAST(\"DT50 Field\" AS TEXT)\n    , substring('DT50 Field' FROM '\\((.*)\\)$')\n    , NULL\n    , substring(\"QBdegdrad\" FROM '^([[:alpha:]]+)\\d')\n    , CAST(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT)\n    , jsonb_build_object(\n    'note', nullif(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) \n        || jsonb_build_object(\n        'pH', \"pH\",\n        'temperature', \"Temp\",\n        'reference',\"Reference\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT50 Field\" IS NOT NULL\n\n\n\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'DT90'\n    , CAST(ARRAY['soil','lab'] AS TEXT[])\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"DT90 Lab\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"DT90 Lab\" AS NUMERIC) \n    ELSE NULL \nEND\n    , CAST(\"DT90 Lab\" AS TEXT)\n    , substring('DT90 Lab' FROM '\\((.*)\\)$')\n    , NULL\n    , substring(\"QBdegdrad\" FROM '^([[:alpha:]]+)\\d')\n    , CAST(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT)\n    , jsonb_build_object(\n    'note', nullif(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) \n        || jsonb_build_object(\n        'pH', \"pH\",\n        'temperature', \"Temp\",\n        'reference',\"Reference\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT90 Lab\" IS NOT NULL\n\n\n\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'DT90'\n    , CAST(ARRAY['soil','field'] AS TEXT[])\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"DT90 Field\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"DT90 Field\" AS NUMERIC) \n    ELSE NULL \nEND\n    , CAST(\"DT90 Field\" AS TEXT)\n    , substring('DT90 Field' FROM '\\((.*)\\)$')\n    , NULL\n    , substring(\"QBdegdrad\" FROM '^([[:alpha:]]+)\\d')\n    , CAST(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT)\n    , jsonb_build_object(\n    'note', nullif(substring(\"QBdegdrad\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n) \n        || jsonb_build_object(\n        'pH', \"pH\",\n        'temperature', \"Temp\",\n        'reference',\"Reference\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT90 Field\" IS NOT NULL\n\n\n-- SOIL ADSORPTION\n\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'Kd'\n    , NULL\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"Kd\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Kd\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"Kd\" AS TEXT) AS result_text\n    , substring('Kd' FROM '\\((.*)\\)$') AS unit\n    , NULL\n    , substring(\"QB\" FROM '^([[:alpha:]]+)\\d') AS source\n    , CAST(substring(\"QB\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n)\n        || jsonb_build_object(\n        'ph', \"Soil pH\",\n        '%_clay', \"% Clay\",\n        '%_sand', \"% Sand\",\n        '%_silt', \"% Silt\",\n        '%_other_material', \"% OM\",\n        '%_other_compound', \"% OC\",\n        'ph_depencence', \"pH Dependence\",\n        'reference',\"Reference\",\n        'notes', \"Notes\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Kd\" IS NOT NULL\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'Koc'\n    , NULL\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"Koc\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Koc\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"Koc\" AS TEXT) AS result_text\n    , substring('Koc' FROM '\\((.*)\\)$') AS unit\n    , NULL\n    , substring(\"QB\" FROM '^([[:alpha:]]+)\\d') AS source\n    , CAST(substring(\"QB\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n)\n        || jsonb_build_object(\n        'ph', \"Soil pH\",\n        '%_clay', \"% Clay\",\n        '%_sand', \"% Sand\",\n        '%_silt', \"% Silt\",\n        '%_other_material', \"% OM\",\n        '%_other_compound', \"% OC\",\n        'ph_depencence', \"pH Dependence\",\n        'reference',\"Reference\",\n        'notes', \"Notes\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Koc\" IS NOT NULL\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'Kf'\n    , NULL\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"Kf\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Kf\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"Kf\" AS TEXT) AS result_text\n    , substring('Kf' FROM '\\((.*)\\)$') AS unit\n    , NULL\n    , substring(\"QB\" FROM '^([[:alpha:]]+)\\d') AS source\n    , CAST(substring(\"QB\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n)\n        || jsonb_build_object(\n        'ph', \"Soil pH\",\n        '%_clay', \"% Clay\",\n        '%_sand', \"% Sand\",\n        '%_silt', \"% Silt\",\n        '%_other_material', \"% OM\",\n        '%_other_compound', \"% OC\",\n        'ph_depencence', \"pH Dependence\",\n        'reference',\"Reference\",\n        'notes', \"Notes\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Kf\" IS NOT NULL\n\n\n\n\n\nUNION ALL\n\nSELECT\n    'Kfoc'\n    , NULL\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"Kfoc\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Kfoc\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"Kfoc\" AS TEXT) AS result_text\n    , substring('Kfoc' FROM '\\((.*)\\)$') AS unit\n    , NULL\n    , substring(\"QB\" FROM '^([[:alpha:]]+)\\d') AS source\n    , CAST(substring(\"QB\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n)\n        || jsonb_build_object(\n        'ph', \"Soil pH\",\n        '%_clay', \"% Clay\",\n        '%_sand', \"% Sand\",\n        '%_silt', \"% Silt\",\n        '%_other_material', \"% OM\",\n        '%_other_compound', \"% OC\",\n        'ph_depencence', \"pH Dependence\",\n        'reference',\"Reference\",\n        'notes', \"Notes\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Kfoc\" IS NOT NULL\n\n\n\n\n\nUNION ALL\n\nSELECT\n    '1/n'\n    , NULL\n    , 'soil'\n    , \"Soil type\"\n    , NULL\n    , CASE\n    WHEN CAST(\"1/n\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"1/n\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"1/n\" AS TEXT) AS result_text\n    , substring('1/n' FROM '\\((.*)\\)$') AS unit\n    , NULL\n    , substring(\"QB\" FROM '^([[:alpha:]]+)\\d') AS source\n    , CAST(substring(\"QB\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT) AS confidence\n    , jsonb_build_object(\n    'note', nullif(substring(\"QB\" FROM '^[[:alpha:]]+\\d(.*)'),'')\n    \n)\n        || jsonb_build_object(\n        'ph', \"Soil pH\",\n        '%_clay', \"% Clay\",\n        '%_sand', \"% Sand\",\n        '%_silt', \"% Silt\",\n        '%_other_material', \"% OM\",\n        '%_other_compound', \"% OC\",\n        'ph_depencence', \"pH Dependence\",\n        'reference',\"Reference\",\n        'notes', \"Notes\"\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"1/n\" IS NOT NULL\n\n\n\n-- PLANT MATRIX\n \n\n\n\n\n\nUNION ALL\n\nSELECT\n    'RL50'\n    , ARRAY[\n        'min'\n        ,\"Study type\"\n        ,\"Plant Matrix\"\n    ] \n    , 'plant'\n    , \"Plant\"\n    , NULL\n    , CASE\n    WHEN CAST(\"RL50 min\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"RL50 min\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"RL50 min\" AS TEXT) AS result_text\n    , substring('RL50 min' FROM '\\((.*)\\)$') AS unit\n    , NULL  -- relative\n    , NULL, NULL  -- source and confidence\n    , jsonb_build_object(\n        'study_location', NULLIF(\"Study Location\",'*'),\n        'scientific_name', NULLIF(\"Plant Scientific Name\",'*'),\n        'reference', \"Reference\",\n        'study_reference', \"Study Reference\",\n        'residue_position', string_to_array(\"Residue position\",' and ')\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__plant\nWHERE \"RL50 min\" IS NOT NULL\n \n\n\n\n\n\nUNION ALL\n\nSELECT\n    'RL50'\n    , ARRAY[\n        'max'\n        ,\"Study type\"\n        ,\"Plant Matrix\"\n    ] \n    , 'plant'\n    , \"Plant\"\n    , NULL\n    , CASE\n    WHEN CAST(\"RL50 max\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"RL50 max\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"RL50 max\" AS TEXT) AS result_text\n    , substring('RL50 max' FROM '\\((.*)\\)$') AS unit\n    , NULL  -- relative\n    , NULL, NULL  -- source and confidence\n    , jsonb_build_object(\n        'study_location', NULLIF(\"Study Location\",'*'),\n        'scientific_name', NULLIF(\"Plant Scientific Name\",'*'),\n        'reference', \"Reference\",\n        'study_reference', \"Study Reference\",\n        'residue_position', string_to_array(\"Residue position\",' and ')\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__plant\nWHERE \"RL50 max\" IS NOT NULL\n \n\n\n\n\n\nUNION ALL\n\nSELECT\n    'RL50'\n    , ARRAY[\n        'mean'\n        ,\"Study type\"\n        ,\"Plant Matrix\"\n    ] \n    , 'plant'\n    , \"Plant\"\n    , NULL\n    , CASE\n    WHEN CAST(\"RL50 mean\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"RL50 mean\" AS NUMERIC) \n    ELSE NULL \nEND AS result_numeric\n    , CAST(\"RL50 mean\" AS TEXT) AS result_text\n    , substring('RL50 mean' FROM '\\((.*)\\)$') AS unit\n    , NULL  -- relative\n    , NULL, NULL  -- source and confidence\n    , jsonb_build_object(\n        'study_location', NULLIF(\"Study Location\",'*'),\n        'scientific_name', NULLIF(\"Plant Scientific Name\",'*'),\n        'reference', \"Reference\",\n        'study_reference', \"Study Reference\",\n        'residue_position', string_to_array(\"Residue position\",' and ')\n    )\n    , \"ID\" AS _id\n    , _uid AS _source_uid    \nFROM psc_dev.dev.stg_ppdb__plant\nWHERE \"RL50 mean\" IS NOT NULL\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.int_ppdb__compound": {"database": "psc_dev", "schema": "dev", "name": "int_ppdb__compound", "resource_type": "model", "package_name": "psc", "path": "ppdb/int_ppdb__compound.sql", "original_file_path": "models/ppdb/int_ppdb__compound.sql", "unique_id": "model.psc.int_ppdb__compound", "fqn": ["psc", "ppdb", "int_ppdb__compound"], "alias": "int_ppdb__compound", "checksum": {"name": "sha256", "checksum": "62224e2c421a29b33f25d91035b5dc2856a5a04ccc8c8b34ca9a12edcc585a01"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "indexes": [{"columns": ["inchi_key"], "type": "btree"}, {"columns": ["iupac_name"], "type": "btree"}], "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table", "indexes": [{"columns": ["inchi_key"], "type": "btree"}, {"columns": ["iupac_name"], "type": "btree"}], "post-hook": ["ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()"]}, "created_at": 1682432489.454308, "relation_name": "psc_dev.dev.int_ppdb__compound", "raw_code": "{{ config(\n    indexes=[\n        {'columns': ['inchi_key'], 'type': 'btree'},\n        {'columns': ['iupac_name'], 'type': 'btree'},\n    ],\n    post_hook=[\n        \"ALTER TABLE {{ this }} ADD COLUMN _uid UUID PRIMARY KEY DEFAULT gen_random_uuid()\",\n    ]\n)}}\n\n{% set comma = joiner(',') %}\n{% set comma2 = joiner(',') %}\n{%set languages = [\n    'English'\n    ,'Italian'\n    ,'French'\n    ,'German'\n    ,'Danish'\n    ,'Spanish'\n    ,'Greek'\n    ,'Slovene'\n    ,'Polish'\n    ,'Swedish'\n    ,'Hungarian'\n    ,'Dutch'\n] %}\n\nSELECT \n    g.*\n    , array_remove(ARRAY[\n    {% for i in range(1,9) %}\n        {{ comma2() }}\"Alias {{ i }}\"\n    {% endfor %}\n    ], null) AS aliases\n    , jsonb_build_object(\n    {% for lang in languages %}\n        {{ comma() }} {{ dbt.string_literal(lang) }}, l.\"{{ lang }}\"\n    {% endfor %}\n    ) AS languages\n    , h.\"WHO classification\" AS classification_who\n    , h.\"Threshold of toxicological concern (Cramer Class)\" AS classification_cramer\n    , h.\"Carcinogen?\" AS carcinogen\n    , CAST(string_to_array(h.\"Genotoxic?\",'; ') AS VARCHAR[]) AS genotoxic\n    , h.\"Endocrine distrupter?\" AS endocrine_distrupter    \nFROM {{ ref('stg_ppdb__general')}} g\nLEFT JOIN {{ ref('stg_ppdb__language')}} l ON l.\"ID\" = g.\"ID\"\nLEFT JOIN {{ ref('stg_ppdb__alias')}} a ON a.\"ID\" = g.\"ID\"\nLEFT JOIN {{ ref('stg_ppdb__human')}} h ON h.\"ID\" = g.\"ID\"", "language": "sql", "refs": [["stg_ppdb__general"], ["stg_ppdb__language"], ["stg_ppdb__alias"], ["stg_ppdb__human"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.string_literal"], "nodes": ["model.psc.stg_ppdb__general", "model.psc.stg_ppdb__language", "model.psc.stg_ppdb__alias", "model.psc.stg_ppdb__human"]}, "compiled_path": "target/compiled/psc/models/ppdb/int_ppdb__compound.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nSELECT \n    g.*\n    , array_remove(ARRAY[\n    \n        \"Alias 1\"\n    \n        ,\"Alias 2\"\n    \n        ,\"Alias 3\"\n    \n        ,\"Alias 4\"\n    \n        ,\"Alias 5\"\n    \n        ,\"Alias 6\"\n    \n        ,\"Alias 7\"\n    \n        ,\"Alias 8\"\n    \n    ], null) AS aliases\n    , jsonb_build_object(\n    \n         'English', l.\"English\"\n    \n        , 'Italian', l.\"Italian\"\n    \n        , 'French', l.\"French\"\n    \n        , 'German', l.\"German\"\n    \n        , 'Danish', l.\"Danish\"\n    \n        , 'Spanish', l.\"Spanish\"\n    \n        , 'Greek', l.\"Greek\"\n    \n        , 'Slovene', l.\"Slovene\"\n    \n        , 'Polish', l.\"Polish\"\n    \n        , 'Swedish', l.\"Swedish\"\n    \n        , 'Hungarian', l.\"Hungarian\"\n    \n        , 'Dutch', l.\"Dutch\"\n    \n    ) AS languages\n    , h.\"WHO classification\" AS classification_who\n    , h.\"Threshold of toxicological concern (Cramer Class)\" AS classification_cramer\n    , h.\"Carcinogen?\" AS carcinogen\n    , CAST(string_to_array(h.\"Genotoxic?\",'; ') AS VARCHAR[]) AS genotoxic\n    , h.\"Endocrine distrupter?\" AS endocrine_distrupter    \nFROM psc_dev.dev.stg_ppdb__general g\nLEFT JOIN psc_dev.dev.stg_ppdb__language l ON l.\"ID\" = g.\"ID\"\nLEFT JOIN psc_dev.dev.stg_ppdb__alias a ON a.\"ID\" = g.\"ID\"\nLEFT JOIN psc_dev.dev.stg_ppdb__human h ON h.\"ID\" = g.\"ID\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__language": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__language", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__language.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__language.sql", "unique_id": "model.psc.raw_ppdb__language", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__language"], "alias": "raw_ppdb__language", "checksum": {"name": "sha256", "checksum": "732558af12f0a9d731c4a9c326f38c0bb07cb5abede96e82074ccb66cc1c460b"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.4810941, "relation_name": "psc_dev.dev_raw.raw_ppdb__language", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__languages') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__languages"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__languages"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__language.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__languages\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__language)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__aliases": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__aliases", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__aliases.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__aliases.sql", "unique_id": "model.psc.raw_ppdb__aliases", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__aliases"], "alias": "raw_ppdb__aliases", "checksum": {"name": "sha256", "checksum": "525b2cb3d8de562391aa9cc115a4071238549c8be0b8de5c9f219b95f17fd50f"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.4987247, "relation_name": "psc_dev.dev_raw.raw_ppdb__aliases", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__aliases') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__aliases"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__aliases"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__aliases.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__aliases\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__aliases)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__metabolite": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__metabolite", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__metabolite.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__metabolite.sql", "unique_id": "model.psc.raw_ppdb__metabolite", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__metabolite"], "alias": "raw_ppdb__metabolite", "checksum": {"name": "sha256", "checksum": "f186e70a3b8ee98297abf8bb4f1d8cc89eb7ac752fac9032d046b72a2f584168"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table", "schema": "raw"}, "created_at": 1682432489.5145333, "relation_name": "psc_dev.dev_raw.raw_ppdb__metabolite", "raw_code": "{#\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key([\n            '\"ID\"'\n            , '\"Metabolite name\"'\n            , '\"Formation medium\"'\n        ])\n    )\n#}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__metabolites') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__metabolites"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__metabolites"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__metabolite.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__metabolites\"\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__human": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__human", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__human.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__human.sql", "unique_id": "model.psc.raw_ppdb__human", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__human"], "alias": "raw_ppdb__human", "checksum": {"name": "sha256", "checksum": "21ed7f1860afe82d9a2b8ca19d8b7731e509464f0f3bd742c4309c26081617c3"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.5812457, "relation_name": "psc_dev.dev_raw.raw_ppdb__human", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__human') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__human"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__human"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__human.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__human\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__human)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__terrestrial_ecotox": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__terrestrial_ecotox", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__terrestrial_ecotox.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__terrestrial_ecotox.sql", "unique_id": "model.psc.raw_ppdb__terrestrial_ecotox", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__terrestrial_ecotox"], "alias": "raw_ppdb__terrestrial_ecotox", "checksum": {"name": "sha256", "checksum": "cfde91e7c08d9d01b8d507a1c4283863f41d9848592d8fade7abe30a2fa5d0c0"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.5945177, "relation_name": "psc_dev.dev_raw.raw_ppdb__terrestrial_ecotox", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__terrestrial_ecotox') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__terrestrial_ecotox"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__terrestrial_ecotox"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__terrestrial_ecotox.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__terrestrial_ecotox\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__terrestrial_ecotox)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__general": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__general", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__general.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__general.sql", "unique_id": "model.psc.raw_ppdb__general", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__general"], "alias": "raw_ppdb__general", "checksum": {"name": "sha256", "checksum": "06bedcbf91cfc505da0bdd99945d35b7eb3f29bbb40656598cc6b6c5b5378d69"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.6120045, "relation_name": "psc_dev.dev_raw.raw_ppdb__general", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__general') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__general"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__general"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__general.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__general\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__general)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__soil_adsorption": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__soil_adsorption", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__soil_adsorption.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__soil_adsorption.sql", "unique_id": "model.psc.raw_ppdb__soil_adsorption", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__soil_adsorption"], "alias": "raw_ppdb__soil_adsorption", "checksum": {"name": "sha256", "checksum": "376ad1606a4efb4696ab07c2759e3508aeb501486a7a6686bf315c502e202e99"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Soil type\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Soil pH\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Soil type\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Soil pH\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.6290689, "relation_name": "psc_dev.dev_raw.raw_ppdb__soil_adsorption", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key([\n            '\"ID\"'\n            , '\"Soil type\"'\n            , '\"Soil pH\"'\n        ])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__soil_adsorption') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__soil_adsorption"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__soil_adsorption"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__soil_adsorption.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__soil_adsorption\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__soil_adsorption)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__plant": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__plant", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__plant.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__plant.sql", "unique_id": "model.psc.raw_ppdb__plant", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__plant"], "alias": "raw_ppdb__plant", "checksum": {"name": "sha256", "checksum": "99134434e35b95412752280233a74b7f03bfc38f581744e5d9554784cf31a857"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table", "schema": "raw"}, "created_at": 1682432489.6497674, "relation_name": "psc_dev.dev_raw.raw_ppdb__plant", "raw_code": "{#\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key([\n            '\"ID\"'\n            , '\"Plant\"'\n            , '\"Plant Matrix\"'\n            , '\"Residue position\"'\n            , '\"Study type\"'\n        ])\n    )\n#}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__plant_matrix_rl50') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__plant_matrix_rl50"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__plant_matrix_rl50"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__plant.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__plant_matrix_rl50\"\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__aquatic_ecotox": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__aquatic_ecotox", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__aquatic_ecotox.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__aquatic_ecotox.sql", "unique_id": "model.psc.raw_ppdb__aquatic_ecotox", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__aquatic_ecotox"], "alias": "raw_ppdb__aquatic_ecotox", "checksum": {"name": "sha256", "checksum": "ef8328cd7f81a48401717e1ae4990e80af6d13a7ab534e10be4b3a63c42a4b33"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.6709428, "relation_name": "psc_dev.dev_raw.raw_ppdb__aquatic_ecotox", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__aquatic_ecotox') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__aquatic_ecotox"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__aquatic_ecotox"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__aquatic_ecotox.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__aquatic_ecotox\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__aquatic_ecotox)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__fate": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__fate", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__fate.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__fate.sql", "unique_id": "model.psc.raw_ppdb__fate", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__fate"], "alias": "raw_ppdb__fate", "checksum": {"name": "sha256", "checksum": "98defba0a112e687eea77d8e314cd91c36acfd3d1a6e3d105a275413d07985db"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.6944852, "relation_name": "psc_dev.dev_raw.raw_ppdb__fate", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key(['\"ID\"'])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__fate') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__fate"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__fate"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__fate.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__fate\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__fate)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.raw_ppdb__soil_degradation": {"database": "psc_dev", "schema": "dev_raw", "name": "raw_ppdb__soil_degradation", "resource_type": "model", "package_name": "psc", "path": "ppdb/raw/raw_ppdb__soil_degradation.sql", "original_file_path": "models/ppdb/raw/raw_ppdb__soil_degradation.sql", "unique_id": "model.psc.raw_ppdb__soil_degradation", "fqn": ["psc", "ppdb", "raw", "raw_ppdb__soil_degradation"], "alias": "raw_ppdb__soil_degradation", "checksum": {"name": "sha256", "checksum": "ed377f98719d0061cb9cdc3b342c77a282e86a4957caf7420844a253470eeb02"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Soil type\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"pH\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Temp\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "incremental", "schema": "raw", "unique_key": "\n    \nmd5(cast(coalesce(cast(\"ID\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Soil type\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"pH\" as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(\"Temp\" as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))"}, "created_at": 1682432489.7090588, "relation_name": "psc_dev.dev_raw.raw_ppdb__soil_degradation", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key=dbt_utils.generate_surrogate_key([\n            '\"ID\"',\n            '\"Soil type\"',\n            '\"pH\"',\n            '\"Temp\"',\n        ])\n    )\n}}\n\nSELECT *\nFROM {{ source('ppdb', 'ppdb__soil_degradation') }}\n\n{% if is_incremental() %}\n\nWHERE _version >= (SELECT max(_version) FROM {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["ppdb", "ppdb__soil_degradation"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["source.psc.ppdb.ppdb__soil_degradation"]}, "compiled_path": "target/compiled/psc/models/ppdb/raw/raw_ppdb__soil_degradation.sql", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"psc_dev\".\"ppdb\".\"ppdb__soil_degradation\"\n\n\n\nWHERE _version >= (SELECT max(_version) FROM psc_dev.dev_raw.raw_ppdb__soil_degradation)\n\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__language": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__language", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__language.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__language.sql", "unique_id": "model.psc.stg_ppdb__language", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__language"], "alias": "stg_ppdb__language", "checksum": {"name": "sha256", "checksum": "ac2314779679fe03951ec68f3aaf7ac6efcdf9182fbf0ce4f1b56cbae8a47022"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.7225869, "relation_name": "psc_dev.dev.stg_ppdb__language", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM {{ ref('raw_ppdb__language') }}\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__language"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__language"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__language.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM psc_dev.dev_raw.raw_ppdb__language\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__aquatic_ecotox": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__aquatic_ecotox", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__aquatic_ecotox.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__aquatic_ecotox.sql", "unique_id": "model.psc.stg_ppdb__aquatic_ecotox", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__aquatic_ecotox"], "alias": "stg_ppdb__aquatic_ecotox", "checksum": {"name": "sha256", "checksum": "32b3723d6231d974f8abfe7dbb5e82bb810a49fd591018fe00b7b920affa71ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.728809, "relation_name": "psc_dev.dev.stg_ppdb__aquatic_ecotox", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    s.*\nFROM {{ ref('raw_ppdb__aquatic_ecotox') }} s\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__aquatic_ecotox"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__aquatic_ecotox"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__aquatic_ecotox.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    s.*\nFROM psc_dev.dev_raw.raw_ppdb__aquatic_ecotox s\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__general": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__general", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__general.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__general.sql", "unique_id": "model.psc.stg_ppdb__general", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__general"], "alias": "stg_ppdb__general", "checksum": {"name": "sha256", "checksum": "513277c700442201d7ea7f066c62c729a031824fec674088084b18d63bc368a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.7340853, "relation_name": "psc_dev.dev.stg_ppdb__general", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    \"International Chemical Identifier key (InChIKey)\" AS inchi_key\n    , \"IUPAC name\" AS iupac_name\n    , \"Active\" as active_name\n    , \"Reference\" AS reference\n    , \"Canonical SMILES\" AS canonical_smiles\n    , nullif(\"Isomeric SMILES\",'No data') AS isomeric_smiles\n    , \"International Chemical Identifier (InChI)\" AS inchi\n    , {{ numeric('Molecular mass') }} AS molecular_mass\n    , \"Summary\" AS summary\n    , \"Description\" AS description\n    , CAST(string_to_array(lower(\"Pesticide type\"),', ') AS VARCHAR[]) AS pesticide_type\n    , \"Efficacy & activity\" AS efficacy_activity\n    , \"Availability status\" AS availability\n    , \"Metabolite type\" AS metabolite_type\n    , CAST(string_to_array(lower(\"Substance group\"),'; ') AS VARCHAR[]) AS substance_group\n    , \"Minimum active substance purity\" AS substance_minimum_active_purity\n    , lower(\"Substance origin\") AS substance_origin\n    , \"Mode of action\" AS mode_of_action\n    , \"CAS RN\" AS cas_code\n    , nullif(\"EC number\", 'None allocated') AS ec_code\n    , nullif(\"US EPA chemical code\", 'Not listed') AS epa_code\n    , \"Chemical formula\" AS chemical_formula\n    , \"PIN (Preferred Identification Name)\" AS name_pin\n    , \"CAS name\" AS name_cas\n    , CASE \n        WHEN \"Herbicide Resistance Classification (HRAC)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Herbicide Resistance Classification (HRAC)\"\n    END AS resistance_classification_herbicide\n    , CASE \n        WHEN \"Herbicide Resistance Classification (WSSA)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Herbicide Resistance Classification (WSSA)\"\n    END AS resistance_classification_herbicide_wssa\n    , CASE \n        WHEN \"Insecticide Resistance Classification (IRAC)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Insecticide Resistance Classification (IRAC)\"\n    END AS resistance_classification_insecticide\n    , CASE \n        WHEN \"Fungicide Resistance Classification (FRAC)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Fungicide Resistance Classification (FRAC)\"\n    END AS resistance_classification_fungicide\n    , \"Physical state\" AS physical_state\n    , \"Generic Name\" AS name_generic\n    , \"ID\"\n    , _id\n    , _uid\nFROM {{ ref('raw_ppdb__general') }}\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__general"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.psc.numeric"], "nodes": ["model.psc.raw_ppdb__general"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__general.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    \"International Chemical Identifier key (InChIKey)\" AS inchi_key\n    , \"IUPAC name\" AS iupac_name\n    , \"Active\" as active_name\n    , \"Reference\" AS reference\n    , \"Canonical SMILES\" AS canonical_smiles\n    , nullif(\"Isomeric SMILES\",'No data') AS isomeric_smiles\n    , \"International Chemical Identifier (InChI)\" AS inchi\n    , \n\n    CASE\n        WHEN CAST(\"Molecular mass\" AS VARCHAR) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Molecular mass\" AS NUMERIC) \n        ELSE NULL \n    END\n AS molecular_mass\n    , \"Summary\" AS summary\n    , \"Description\" AS description\n    , CAST(string_to_array(lower(\"Pesticide type\"),', ') AS VARCHAR[]) AS pesticide_type\n    , \"Efficacy & activity\" AS efficacy_activity\n    , \"Availability status\" AS availability\n    , \"Metabolite type\" AS metabolite_type\n    , CAST(string_to_array(lower(\"Substance group\"),'; ') AS VARCHAR[]) AS substance_group\n    , \"Minimum active substance purity\" AS substance_minimum_active_purity\n    , lower(\"Substance origin\") AS substance_origin\n    , \"Mode of action\" AS mode_of_action\n    , \"CAS RN\" AS cas_code\n    , nullif(\"EC number\", 'None allocated') AS ec_code\n    , nullif(\"US EPA chemical code\", 'Not listed') AS epa_code\n    , \"Chemical formula\" AS chemical_formula\n    , \"PIN (Preferred Identification Name)\" AS name_pin\n    , \"CAS name\" AS name_cas\n    , CASE \n        WHEN \"Herbicide Resistance Classification (HRAC)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Herbicide Resistance Classification (HRAC)\"\n    END AS resistance_classification_herbicide\n    , CASE \n        WHEN \"Herbicide Resistance Classification (WSSA)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Herbicide Resistance Classification (WSSA)\"\n    END AS resistance_classification_herbicide_wssa\n    , CASE \n        WHEN \"Insecticide Resistance Classification (IRAC)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Insecticide Resistance Classification (IRAC)\"\n    END AS resistance_classification_insecticide\n    , CASE \n        WHEN \"Fungicide Resistance Classification (FRAC)\" IN ('Not applicable','None allocated','Not known') THEN NULL\n        ELSE \"Fungicide Resistance Classification (FRAC)\"\n    END AS resistance_classification_fungicide\n    , \"Physical state\" AS physical_state\n    , \"Generic Name\" AS name_generic\n    , \"ID\"\n    , _id\n    , _uid\nFROM psc_dev.dev_raw.raw_ppdb__general\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__plant": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__plant", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__plant.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__plant.sql", "unique_id": "model.psc.stg_ppdb__plant", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__plant"], "alias": "stg_ppdb__plant", "checksum": {"name": "sha256", "checksum": "8448572d49f0eabed5d1010507e0fa25feee03807a9560138200f891dc3f0f34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.746655, "relation_name": "psc_dev.dev.stg_ppdb__plant", "raw_code": "SELECT DISTINCT ON (\n     \"ID\"\n     , \"Plant\"\n     , \"Plant Matrix\"\n     , \"Residue position\"\n     , \"Study type\"\n)\n    *\nFROM {{ ref('raw_ppdb__plant') }}\nORDER BY \"ID\"\n     , \"Plant\"\n     , \"Plant Matrix\"\n     , \"Residue position\"\n     , \"Study type\"\n     , _version DESC", "language": "sql", "refs": [["raw_ppdb__plant"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__plant"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__plant.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\n     \"ID\"\n     , \"Plant\"\n     , \"Plant Matrix\"\n     , \"Residue position\"\n     , \"Study type\"\n)\n    *\nFROM psc_dev.dev_raw.raw_ppdb__plant\nORDER BY \"ID\"\n     , \"Plant\"\n     , \"Plant Matrix\"\n     , \"Residue position\"\n     , \"Study type\"\n     , _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__metabolite": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__metabolite", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__metabolite.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__metabolite.sql", "unique_id": "model.psc.stg_ppdb__metabolite", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__metabolite"], "alias": "stg_ppdb__metabolite", "checksum": {"name": "sha256", "checksum": "2d2657c22b79476c8c6011dd8f5fd833adab0601634d76a2621515f77c8eb967"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.7528403, "relation_name": "psc_dev.dev.stg_ppdb__metabolite", "raw_code": "SELECT DISTINCT ON (\"ID\", \"Metabolite name\", \"Formation medium\")\n  *\nFROM {{ ref('raw_ppdb__metabolite') }}\nORDER BY \"ID\", \"Metabolite name\", \"Formation medium\", _version DESC", "language": "sql", "refs": [["raw_ppdb__metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__metabolite"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__metabolite.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\", \"Metabolite name\", \"Formation medium\")\n  *\nFROM psc_dev.dev_raw.raw_ppdb__metabolite\nORDER BY \"ID\", \"Metabolite name\", \"Formation medium\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__human": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__human", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__human.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__human.sql", "unique_id": "model.psc.stg_ppdb__human", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__human"], "alias": "stg_ppdb__human", "checksum": {"name": "sha256", "checksum": "abdeb48f2197f1cda809bbdbd85ccb0392d95783904bb6563ab76b55be429296"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.758065, "relation_name": "psc_dev.dev.stg_ppdb__human", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM {{ ref('raw_ppdb__human') }}\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__human"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__human"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__human.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM psc_dev.dev_raw.raw_ppdb__human\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__alias": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__alias", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__alias.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__alias.sql", "unique_id": "model.psc.stg_ppdb__alias", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__alias"], "alias": "stg_ppdb__alias", "checksum": {"name": "sha256", "checksum": "9f370fb133b4ab89aaf154e8be76c31573ed9a78423f3fa6b2afd5609afb1add"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.7673066, "relation_name": "psc_dev.dev.stg_ppdb__alias", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    s.*\nFROM {{ ref('raw_ppdb__aliases') }} s\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__aliases"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__aliases"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__alias.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    s.*\nFROM psc_dev.dev_raw.raw_ppdb__aliases s\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__terrestrial_ecotox": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__terrestrial_ecotox", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__terrestrial_ecotox.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__terrestrial_ecotox.sql", "unique_id": "model.psc.stg_ppdb__terrestrial_ecotox", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__terrestrial_ecotox"], "alias": "stg_ppdb__terrestrial_ecotox", "checksum": {"name": "sha256", "checksum": "eff2c8df641e7bab0a9aec4da084145d64c6a21deb8627a499c0f2110f1b4dda"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.7767055, "relation_name": "psc_dev.dev.stg_ppdb__terrestrial_ecotox", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM {{ ref('raw_ppdb__terrestrial_ecotox') }}\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__terrestrial_ecotox"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__terrestrial_ecotox"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__terrestrial_ecotox.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM psc_dev.dev_raw.raw_ppdb__terrestrial_ecotox\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__fate": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__fate", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__fate.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__fate.sql", "unique_id": "model.psc.stg_ppdb__fate", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__fate"], "alias": "stg_ppdb__fate", "checksum": {"name": "sha256", "checksum": "764e97fb9078b2dc7f0ae59bf5cef54fb0ccab060474424637858b65eefe0b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.7852635, "relation_name": "psc_dev.dev.stg_ppdb__fate", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    s.*\nFROM {{ ref('raw_ppdb__fate') }} s\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__fate"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__fate"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__fate.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    s.*\nFROM psc_dev.dev_raw.raw_ppdb__fate s\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__soil_degradation": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__soil_degradation", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__soil_degradation.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__soil_degradation.sql", "unique_id": "model.psc.stg_ppdb__soil_degradation", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__soil_degradation"], "alias": "stg_ppdb__soil_degradation", "checksum": {"name": "sha256", "checksum": "5724f634a0c34f4d3e6af45018af293d33d24f27afbade493c7d4f186d2c0f9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.8003938, "relation_name": "psc_dev.dev.stg_ppdb__soil_degradation", "raw_code": "SELECT DISTINCT ON (\n    \"ID\"\n    , \"Soil type\"\n    , \"pH\"\n    , \"Temp\"\n)\n    *\nFROM {{ ref('raw_ppdb__soil_degradation') }}\nORDER BY \"ID\", \"Soil type\", \"pH\", \"Temp\", _version DESC", "language": "sql", "refs": [["raw_ppdb__soil_degradation"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__soil_degradation"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__soil_degradation.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\n    \"ID\"\n    , \"Soil type\"\n    , \"pH\"\n    , \"Temp\"\n)\n    *\nFROM psc_dev.dev_raw.raw_ppdb__soil_degradation\nORDER BY \"ID\", \"Soil type\", \"pH\", \"Temp\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "model.psc.stg_ppdb__soil_adsorption": {"database": "psc_dev", "schema": "dev", "name": "stg_ppdb__soil_adsorption", "resource_type": "model", "package_name": "psc", "path": "ppdb/staging/stg_ppdb__soil_adsorption.sql", "original_file_path": "models/ppdb/staging/stg_ppdb__soil_adsorption.sql", "unique_id": "model.psc.stg_ppdb__soil_adsorption", "fqn": ["psc", "ppdb", "staging", "stg_ppdb__soil_adsorption"], "alias": "stg_ppdb__soil_adsorption", "checksum": {"name": "sha256", "checksum": "265235935a21fdaa62421486d9a7b02b26427068d552f453c58cf2d92e83d26a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "view"}, "created_at": 1682432489.8128436, "relation_name": "psc_dev.dev.stg_ppdb__soil_adsorption", "raw_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM {{ ref('raw_ppdb__soil_adsorption') }}\nORDER BY \"ID\", _version DESC", "language": "sql", "refs": [["raw_ppdb__soil_adsorption"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.psc.raw_ppdb__soil_adsorption"]}, "compiled_path": "target/compiled/psc/models/ppdb/staging/stg_ppdb__soil_adsorption.sql", "compiled": true, "compiled_code": "SELECT DISTINCT ON (\"ID\")\n    *\nFROM psc_dev.dev_raw.raw_ppdb__soil_adsorption\nORDER BY \"ID\", _version DESC", "extra_ctes_injected": true, "extra_ctes": []}, "analysis.psc.templates": {"database": "psc_dev", "schema": "dev", "name": "templates", "resource_type": "analysis", "package_name": "psc", "path": "analysis/templates.sql", "original_file_path": "analysis/templates.sql", "unique_id": "analysis.psc.templates", "fqn": ["psc", "analysis", "templates"], "alias": "templates", "checksum": {"name": "sha256", "checksum": "ad2037eddf6546555fe9fc28b3b0a38f202943efc0a98763b06dafc43313d28f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table"}, "created_at": 1682432489.8595927, "relation_name": null, "raw_code": "UNION ALL\n\nSELECT \n    'REVIEW_NEEDED' -- observation\n    , ARRAY[] -- variation\n    , substring(\"QB_Mammals_DermalLD50\" from '^\\D+\\d (.+)') -- \"target\"\n    , false -- is_calculated\n    , NULL -- observation_dtm\n    {{ ppdb_observation_parse_result('Mammals_DermalLD50') }}\n    , NULL -- relative\n    {{ ppdb_observation_parse_confidence('QB_Mammals_DermalLD50') }}\n    , NULL  -- extra\n    {{ ppdb_observation_meta() }}    -- meta\nFROM h\nWHERE \"Mammals_DermalLD50\" IS NOT NULL\n\n/*\n\n\nARRAY[]\n\n-- extra field\n\n    jsonb_strip_nulls(jsonb_build_object(\n        'note', trim(substring(\"QB_AcuteReference_Dose\" from '^\\D+\\d(.+)$'))\n    ))\n\n    */", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.psc.ppdb_observation_parse_result", "macro.psc.ppdb_observation_parse_confidence", "macro.psc.ppdb_observation_meta"], "nodes": []}, "compiled_path": "target/compiled/psc/analysis/templates.sql", "compiled": true, "compiled_code": "UNION ALL\n\nSELECT \n    'REVIEW_NEEDED' -- observation\n    , ARRAY[] -- variation\n    , substring(\"QB_Mammals_DermalLD50\" from '^\\D+\\d (.+)') -- \"target\"\n    , false -- is_calculated\n    , NULL -- observation_dtm\n    \n    , CAST(\n\n    CASE\n        WHEN CAST(\"Mammals_DermalLD50\" AS VARCHAR) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"Mammals_DermalLD50\" AS NUMERIC) \n        ELSE NULL \n    END\n AS NUMERIC) AS \"result_value\"\n    , CAST(\"Mammals_DermalLD50\" AS VARCHAR) AS \"result_text\"\n    , substring('Mammals_DermalLD50' FROM '.\\((.*)\\)$') AS unit\n\n    , NULL -- relative\n    CAST(substring(\"QB_Mammals_DermalLD50\" FROM '^[[:alpha:]]+(\\d)') AS SMALLINT)\n    , NULL  -- extra\n    , \"ID\" AS _id\n    , _uid AS _source_uid    -- meta\nFROM h\nWHERE \"Mammals_DermalLD50\" IS NOT NULL\n\n/*\n\n\nARRAY[]\n\n-- extra field\n\n    jsonb_strip_nulls(jsonb_build_object(\n        'note', trim(substring(\"QB_AcuteReference_Dose\" from '^\\D+\\d(.+)$'))\n    ))\n\n    */", "extra_ctes_injected": true, "extra_ctes": []}, "analysis.psc.try_cast": {"database": "psc_dev", "schema": "dev", "name": "try_cast", "resource_type": "analysis", "package_name": "psc", "path": "analysis/try_cast.sql", "original_file_path": "analysis/try_cast.sql", "unique_id": "analysis.psc.try_cast", "fqn": ["psc", "analysis", "try_cast"], "alias": "try_cast", "checksum": {"name": "sha256", "checksum": "6f1a747c2a1b1f7891e5b95799e7ccf990662ead864e9900a9846f3ce846c6c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table"}, "created_at": 1682432489.8745797, "relation_name": null, "raw_code": "CREATE OR REPLACE FUNCTION staging.try_cast(_in text, INOUT _out anyelement)\n RETURNS anyelement\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n   EXECUTE format('SELECT %L::%s', $1, pg_typeof(_out))\n   INTO  _out;\nEXCEPTION WHEN others THEN\n   -- do nothing: _out already carries default\nEND\n$function$\n;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/psc/analysis/try_cast.sql", "compiled": true, "compiled_code": "CREATE OR REPLACE FUNCTION staging.try_cast(_in text, INOUT _out anyelement)\n RETURNS anyelement\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n   EXECUTE format('SELECT %L::%s', $1, pg_typeof(_out))\n   INTO  _out;\nEXCEPTION WHEN others THEN\n   -- do nothing: _out already carries default\nEND\n$function$\n;", "extra_ctes_injected": true, "extra_ctes": []}, "analysis.psc.playground": {"database": "psc_dev", "schema": "dev", "name": "playground", "resource_type": "analysis", "package_name": "psc", "path": "analysis/playground.sql", "original_file_path": "analysis/playground.sql", "unique_id": "analysis.psc.playground", "fqn": ["psc", "analysis", "playground"], "alias": "playground", "checksum": {"name": "sha256", "checksum": "bde8f2051337df3d8093026bbd35dce2804ff8b3d136677dcf6fb1c4f6fe84a4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table"}, "created_at": 1682432489.8805315, "relation_name": null, "raw_code": "{{ dbt.escape_single_quotes(\"Henry's Law Constant\")}}\n{{ dbt.string_literal(\"Henry's Law Constant\")}}\n{{ dbt.string_literal(dbt.escape_single_quotes(\"Henry's Law Constant\"))}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.string_literal"], "nodes": []}, "compiled_path": "target/compiled/psc/analysis/playground.sql", "compiled": true, "compiled_code": "Henry''s Law Constant\n'Henry's Law Constant'\n'Henry''s Law Constant'", "extra_ctes_injected": true, "extra_ctes": []}, "analysis.psc.safe_cast": {"database": "psc_dev", "schema": "dev", "name": "safe_cast", "resource_type": "analysis", "package_name": "psc", "path": "analysis/safe_cast.sql", "original_file_path": "analysis/safe_cast.sql", "unique_id": "analysis.psc.safe_cast", "fqn": ["psc", "analysis", "safe_cast"], "alias": "safe_cast", "checksum": {"name": "sha256", "checksum": "32d959f3db2af84722134047d9bb61aa326d8bc458ab648ed4b5ff7d4323f691"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table"}, "created_at": 1682432489.890458, "relation_name": null, "raw_code": "select {{ dbt.safe_cast('3.2e8', api.Column.translate_type(\"numeric\"))}}\nselect {{ dbt.safe_cast(\"'3.fds'\", api.Column.translate_type(\"numeric\"))}}\n\nselect {{ dbt.safe_cast('')}}\n\nselect  3 as expression_column_name", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.safe_cast"], "nodes": []}, "compiled_path": "target/compiled/psc/analysis/safe_cast.sql", "compiled": true, "compiled_code": "select \n    \n    cast(3.2e8 as numeric)\n\nselect \n    \n    cast('3.fds' as numeric)\n\n\nselect \n    \n    cast( as )\n\n\nselect  3 as expression_column_name", "extra_ctes_injected": true, "extra_ctes": []}, "analysis.psc.create_meta_tables": {"database": "psc_dev", "schema": "dev", "name": "create_meta_tables", "resource_type": "analysis", "package_name": "psc", "path": "analysis/create_meta_tables.sql", "original_file_path": "analysis/create_meta_tables.sql", "unique_id": "analysis.psc.create_meta_tables", "fqn": ["psc", "analysis", "create_meta_tables"], "alias": "create_meta_tables", "checksum": {"name": "sha256", "checksum": "af463b79ff54a2b4507a2df869d4cc71559e3aaca37e37905cfe38b4ef309c89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"docs": {"show": false}, "materialized": "table"}, "created_at": 1682432489.9070656, "relation_name": null, "raw_code": "CREATE TABLE IF NOT EXISTS meta_dict__study (\n    code varchar PRIMARY KEY NOT NULL,\n    name varchar NULL,\n    description text NULL\n);\n\nCLUSTER meta_dict__study USING meta_dict__study_pkey;", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/psc/analysis/create_meta_tables.sql", "compiled": true, "compiled_code": "CREATE TABLE IF NOT EXISTS meta_dict__study (\n    code varchar PRIMARY KEY NOT NULL,\n    name varchar NULL,\n    description text NULL\n);\n\nCLUSTER meta_dict__study USING meta_dict__study_pkey;", "extra_ctes_injected": true, "extra_ctes": []}, "test.psc.assert_unique_identifier": {"database": "psc_dev", "schema": "dev_testing", "name": "assert_unique_identifier", "resource_type": "test", "package_name": "psc", "path": "assert_unique_identifier.sql", "original_file_path": "tests/assert_unique_identifier.sql", "unique_id": "test.psc.assert_unique_identifier", "fqn": ["psc", "assert_unique_identifier"], "alias": "assert_unique_identifier", "checksum": {"name": "sha256", "checksum": "9928b0d34e6f1fc849727e04d423884a0d120109b65a8bcd60ffaa9538a3109c"}, "config": {"enabled": true, "alias": null, "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}}, "created_at": 1682432489.942213, "relation_name": "psc_dev.dev_testing.assert_unique_identifier", "raw_code": "-- SELECT\n--     ci.*\n-- FROM chemical_identifier AS ci \n-- WHERE inchi_key IN (\n--     SELECT inchi_key\n--     FROM chemical_identifier\n--     WHERE inchi_key IS NOT NULL\n--     GROUP BY inchi_key \n--     HAVING COUNT(*) > 1\n-- ) OR \"name\" IN (\n--     SELECT \"name\"\n--     FROM chemical_identifier\n--     WHERE \"name\" IS NOT NULL\n--     GROUP BY \"name\" \n--     HAVING COUNT(*) > 1\n-- )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/psc/tests/assert_unique_identifier.sql", "compiled": true, "compiled_code": "-- SELECT\n--     ci.*\n-- FROM chemical_identifier AS ci \n-- WHERE inchi_key IN (\n--     SELECT inchi_key\n--     FROM chemical_identifier\n--     WHERE inchi_key IS NOT NULL\n--     GROUP BY inchi_key \n--     HAVING COUNT(*) > 1\n-- ) OR \"name\" IN (\n--     SELECT \"name\"\n--     FROM chemical_identifier\n--     WHERE \"name\" IS NOT NULL\n--     GROUP BY \"name\" \n--     HAVING COUNT(*) > 1\n-- )", "extra_ctes_injected": true, "extra_ctes": []}, "test.psc.assert_numeric": {"database": "psc_dev", "schema": "dev_testing", "name": "assert_numeric", "resource_type": "test", "package_name": "psc", "path": "raw/assert_numeric.sql", "original_file_path": "tests/raw/assert_numeric.sql", "unique_id": "test.psc.assert_numeric", "fqn": ["psc", "raw", "assert_numeric"], "alias": "assert_numeric", "checksum": {"name": "sha256", "checksum": "8360e10ca15722a27654abc4d41b64abed017f7d8146d87e2a72f71f3215498e"}, "config": {"enabled": true, "alias": null, "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}}, "created_at": 1682432489.9521816, "relation_name": "psc_dev.dev_testing.assert_numeric", "raw_code": "{% set sources = {\n    \"stg_ppdb__human\": [\n        'Mammals - Dermal LD50 (mg/kg)',\n        'Mammals - Inhalation LC50 (mg/l)',\n        'Other mammal toxicity endpoint 1',\n        'Other mammal toxicity endpoint 2',\n        'Acceptable Daily Intake (ADI) (mg/kg bw)',\n        'Acute Reference Dose (ARfD) (mg/kg BW/day)',\n        'Acceptable Operator Exposure Level (AOEL) systemic',\n        'Percutaneous penetration studies (%)',\n        'Drinking water MAC (ug/l)'\n    ],\n    \"stg_ppdb__terrestrial_ecotox\": [\n        'Mammals - Acute oral LD50 (mg/kg BW/day)',\n        'Mammals - Short term dietary NOEL (mg/kg)',\n        'Mammals - Chronic 21d NOAEL (mg/kg bw/d)',\n        'Birds - Acute LD50 (mg/kg)',\n        'Birds - Chronic 21d NOEL (mg/kg bw/d)',\n        'Honeybees - Contact acute 48hr LD50 (ug per bee)',\n        'Honeybees - Oral acute 48hr LD50 (ug per bee)',\n        'Honeybees - Unknown mode acute 48hr LD50 (ug per bee)',\n        'Bumblebees - Oral acute LD50 (ug per bee)',\n        'Bumblebees - Contact acute LD50 (ug per bee)',\n        'Mason bees - Contact acute LD50 (ug per bee)',\n        'Mason bees - Oral acute LD50 (ug per bee)',\n        'Other bee species 1 - LD50 (ug/bee)',\n        'Other bee species 2 - LD50 (ug/bee)',\n        'Earthworms - Acute 14d LC50 (mg/kg)',\n        'Earthworms - Chronic NOEC, reproduction (mg/kg)',\n        'Collembola - Acute LC50 (mg/kg)',\n        'Collembola - Chronic reproduction 28d NOEC (mg/kg)',\n    ],  \n    \"stg_ppdb__fate\": [\n        'Solubility - In water at 20 degC (mg/l)',\n        'Solubility - In organic solvent 1 at 20 degC (mg/l)',\n        'Solubility - In organic solvent 2 at 20 degC (mg/l)',\n        'Solubility - In organic solvent 3 at 20 degC (mg/l)',\n        'Solubility - In organic solvent 4 at 20 degC (mg/l)',\n        'Melting point (degC)',\n        'Boiling point (deg C, 1atm)',\n        'Degradation point (degC, 1atm)',\n        'Flashpoint (degC)',\n        'LogP',\n        'Bulk density (g/ml) / Specific gravity',\n        'Dissociation constant (pKa) at 25 degC',\n        'Vapour pressure at 20 degC (mPa)',\n        \"Henry's law constant at 25 degC (Pa/m3/mol)\",\n        'Maximum UV-vis absorption (L/mol/cm)',\n        'Surface tension (mN/m)',\n        'Refractive index',\n        'Bioconcentration factor',\n        'Clearance half-life (days)',\n        'Soil DT50 - Typical (days)',\n        'Soil DT50 - Lab (days)',\n        'Soil DT50 - Field (days)',\n        'Soil DT90 - Lab (days)',\n        'Soil DT90 - Field (days)',\n        'Soil DT90 - Field (days)',\n        'Dissipation rate RL50 on plant matrix',\n        'Dissipation rate RL50 on and in plant matrix',\n        'Aqueous photolysis DT50 at pH 7 (days)',\n        'Aqueous hydrolysis DT50 at pH7 (days)',\n        'Water-sediment DT50 (days)',\n        'Water phase only DT50 (days)',\n        'Kd (ml/g)',\n        'Koc (ml/g)',\n        'Kf (ml/g)',\n        'Kfoc (ml/g)',\n        'Freundlich exponent (1/n)',\n    ],\n    \"stg_ppdb__aquatic_ecotox\": [\n        'Fish - Acute 96hr LC50 (mg/l)',\n        'Fish - Chronic 21d NOEC (mg/l)',\n        'Aquatic invertebrates - Acute 48hr EC50 (mg/l)',\n        'Aquatic invertebrates - Chronic 21d NOEC (mg/l)',\n        'Aquatic crustaceans - Acute 96hr LC50 (mg/l)',\n        'Aquatic plants - Acute 7d EC50 (mg/l)',\n        'Algae - Acute 72hr EC50 growth (mg/l)',\n        'Algae - Chronic 96hr NOEC (mg/l)',\n        'Sediment dwelling organimss - Acute 96hr LC50',\n        'Sediment dwelling organisms - Chronic 28d NOEC static water',\n        'Sediment dwelling organisms - Chronic 28d NOEC sediment',\n        'Aquatic mesocosm 1 - NOEAEC (mg/l)',\n        'Aquatic mesocosm 2 NOEAEC (mg/l)',\n    ],\n    \"stg_ppdb__plant\": [\n        'RL50 min',\n        'RL50 max',\n        'RL50 mean',\n    ], \n    \"stg_ppdb__soil_degradation\": [        \n        'DT50 lab',\n        'DT90 Lab',\n        'DT50 Field',\n        'DT90 Field',\n        'pH',\n        'Temp'\n    ],\n    'stg_ppdb__soil_adsorption': [\n        'Kd',\n        'Koc',\n        'Kf',\n        'Kfoc',\n        '1/n',\n        'Soil pH',\n        '% Clay',\n        '% Sand',\n        '% Silt',\n        '% OM',\n        '% OC',\n        'pH Dependence',\n    ]\n} %}\n{% set union = joiner(\" UNION ALL \") %}\n\n{%- for tbl in sources.keys() %}\n    {% for col in sources[tbl] %}\n\n{{ union() }}\n\nSELECT \n    {{ dbt.string_literal(dbt.escape_single_quotes(tbl)) }} AS subject_table\n    , {{ dbt.string_literal(dbt.escape_single_quotes(col)) }} AS subject_name\n    , CAST(\"{{ col }}\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM {{ ref(tbl) }}\nWHERE \"{{ col }}\" IS NOT NULL AND CAST(\"{{ col }}\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    {% endfor -%}\n{% endfor -%}", "language": "sql", "refs": [["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__human"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__terrestrial_ecotox"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__fate"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__aquatic_ecotox"], ["stg_ppdb__plant"], ["stg_ppdb__plant"], ["stg_ppdb__plant"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_degradation"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"], ["stg_ppdb__soil_adsorption"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.string_literal"], "nodes": ["model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption"]}, "compiled_path": "target/compiled/psc/tests/raw/assert_numeric.sql", "compiled": true, "compiled_code": "\n\n    \n\n\n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Mammals - Dermal LD50 (mg/kg)' AS subject_name\n    , CAST(\"Mammals - Dermal LD50 (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Mammals - Dermal LD50 (mg/kg)\" IS NOT NULL AND CAST(\"Mammals - Dermal LD50 (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Mammals - Inhalation LC50 (mg/l)' AS subject_name\n    , CAST(\"Mammals - Inhalation LC50 (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Mammals - Inhalation LC50 (mg/l)\" IS NOT NULL AND CAST(\"Mammals - Inhalation LC50 (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Other mammal toxicity endpoint 1' AS subject_name\n    , CAST(\"Other mammal toxicity endpoint 1\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Other mammal toxicity endpoint 1\" IS NOT NULL AND CAST(\"Other mammal toxicity endpoint 1\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Other mammal toxicity endpoint 2' AS subject_name\n    , CAST(\"Other mammal toxicity endpoint 2\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Other mammal toxicity endpoint 2\" IS NOT NULL AND CAST(\"Other mammal toxicity endpoint 2\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Acceptable Daily Intake (ADI) (mg/kg bw)' AS subject_name\n    , CAST(\"Acceptable Daily Intake (ADI) (mg/kg bw)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Acceptable Daily Intake (ADI) (mg/kg bw)\" IS NOT NULL AND CAST(\"Acceptable Daily Intake (ADI) (mg/kg bw)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Acute Reference Dose (ARfD) (mg/kg BW/day)' AS subject_name\n    , CAST(\"Acute Reference Dose (ARfD) (mg/kg BW/day)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Acute Reference Dose (ARfD) (mg/kg BW/day)\" IS NOT NULL AND CAST(\"Acute Reference Dose (ARfD) (mg/kg BW/day)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Acceptable Operator Exposure Level (AOEL) systemic' AS subject_name\n    , CAST(\"Acceptable Operator Exposure Level (AOEL) systemic\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Acceptable Operator Exposure Level (AOEL) systemic\" IS NOT NULL AND CAST(\"Acceptable Operator Exposure Level (AOEL) systemic\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Percutaneous penetration studies (%)' AS subject_name\n    , CAST(\"Percutaneous penetration studies (%)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Percutaneous penetration studies (%)\" IS NOT NULL AND CAST(\"Percutaneous penetration studies (%)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__human' AS subject_table\n    , 'Drinking water MAC (ug/l)' AS subject_name\n    , CAST(\"Drinking water MAC (ug/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__human\nWHERE \"Drinking water MAC (ug/l)\" IS NOT NULL AND CAST(\"Drinking water MAC (ug/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Mammals - Acute oral LD50 (mg/kg BW/day)' AS subject_name\n    , CAST(\"Mammals - Acute oral LD50 (mg/kg BW/day)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mammals - Acute oral LD50 (mg/kg BW/day)\" IS NOT NULL AND CAST(\"Mammals - Acute oral LD50 (mg/kg BW/day)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Mammals - Short term dietary NOEL (mg/kg)' AS subject_name\n    , CAST(\"Mammals - Short term dietary NOEL (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mammals - Short term dietary NOEL (mg/kg)\" IS NOT NULL AND CAST(\"Mammals - Short term dietary NOEL (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Mammals - Chronic 21d NOAEL (mg/kg bw/d)' AS subject_name\n    , CAST(\"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" IS NOT NULL AND CAST(\"Mammals - Chronic 21d NOAEL (mg/kg bw/d)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Birds - Acute LD50 (mg/kg)' AS subject_name\n    , CAST(\"Birds - Acute LD50 (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Birds - Acute LD50 (mg/kg)\" IS NOT NULL AND CAST(\"Birds - Acute LD50 (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Birds - Chronic 21d NOEL (mg/kg bw/d)' AS subject_name\n    , CAST(\"Birds - Chronic 21d NOEL (mg/kg bw/d)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Birds - Chronic 21d NOEL (mg/kg bw/d)\" IS NOT NULL AND CAST(\"Birds - Chronic 21d NOEL (mg/kg bw/d)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Honeybees - Contact acute 48hr LD50 (ug per bee)' AS subject_name\n    , CAST(\"Honeybees - Contact acute 48hr LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Honeybees - Contact acute 48hr LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Honeybees - Contact acute 48hr LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Honeybees - Oral acute 48hr LD50 (ug per bee)' AS subject_name\n    , CAST(\"Honeybees - Oral acute 48hr LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Honeybees - Oral acute 48hr LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Honeybees - Oral acute 48hr LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Honeybees - Unknown mode acute 48hr LD50 (ug per bee)' AS subject_name\n    , CAST(\"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Honeybees - Unknown mode acute 48hr LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Bumblebees - Oral acute LD50 (ug per bee)' AS subject_name\n    , CAST(\"Bumblebees - Oral acute LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Bumblebees - Oral acute LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Bumblebees - Oral acute LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Bumblebees - Contact acute LD50 (ug per bee)' AS subject_name\n    , CAST(\"Bumblebees - Contact acute LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Bumblebees - Contact acute LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Bumblebees - Contact acute LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Mason bees - Contact acute LD50 (ug per bee)' AS subject_name\n    , CAST(\"Mason bees - Contact acute LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mason bees - Contact acute LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Mason bees - Contact acute LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Mason bees - Oral acute LD50 (ug per bee)' AS subject_name\n    , CAST(\"Mason bees - Oral acute LD50 (ug per bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Mason bees - Oral acute LD50 (ug per bee)\" IS NOT NULL AND CAST(\"Mason bees - Oral acute LD50 (ug per bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Other bee species 1 - LD50 (ug/bee)' AS subject_name\n    , CAST(\"Other bee species 1 - LD50 (ug/bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Other bee species 1 - LD50 (ug/bee)\" IS NOT NULL AND CAST(\"Other bee species 1 - LD50 (ug/bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Other bee species 2 - LD50 (ug/bee)' AS subject_name\n    , CAST(\"Other bee species 2 - LD50 (ug/bee)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Other bee species 2 - LD50 (ug/bee)\" IS NOT NULL AND CAST(\"Other bee species 2 - LD50 (ug/bee)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Earthworms - Acute 14d LC50 (mg/kg)' AS subject_name\n    , CAST(\"Earthworms - Acute 14d LC50 (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Earthworms - Acute 14d LC50 (mg/kg)\" IS NOT NULL AND CAST(\"Earthworms - Acute 14d LC50 (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Earthworms - Chronic NOEC, reproduction (mg/kg)' AS subject_name\n    , CAST(\"Earthworms - Chronic NOEC, reproduction (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Earthworms - Chronic NOEC, reproduction (mg/kg)\" IS NOT NULL AND CAST(\"Earthworms - Chronic NOEC, reproduction (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Collembola - Acute LC50 (mg/kg)' AS subject_name\n    , CAST(\"Collembola - Acute LC50 (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Collembola - Acute LC50 (mg/kg)\" IS NOT NULL AND CAST(\"Collembola - Acute LC50 (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__terrestrial_ecotox' AS subject_table\n    , 'Collembola - Chronic reproduction 28d NOEC (mg/kg)' AS subject_name\n    , CAST(\"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__terrestrial_ecotox\nWHERE \"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" IS NOT NULL AND CAST(\"Collembola - Chronic reproduction 28d NOEC (mg/kg)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Solubility - In water at 20 degC (mg/l)' AS subject_name\n    , CAST(\"Solubility - In water at 20 degC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In water at 20 degC (mg/l)\" IS NOT NULL AND CAST(\"Solubility - In water at 20 degC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Solubility - In organic solvent 1 at 20 degC (mg/l)' AS subject_name\n    , CAST(\"Solubility - In organic solvent 1 at 20 degC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 1 at 20 degC (mg/l)\" IS NOT NULL AND CAST(\"Solubility - In organic solvent 1 at 20 degC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Solubility - In organic solvent 2 at 20 degC (mg/l)' AS subject_name\n    , CAST(\"Solubility - In organic solvent 2 at 20 degC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 2 at 20 degC (mg/l)\" IS NOT NULL AND CAST(\"Solubility - In organic solvent 2 at 20 degC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Solubility - In organic solvent 3 at 20 degC (mg/l)' AS subject_name\n    , CAST(\"Solubility - In organic solvent 3 at 20 degC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 3 at 20 degC (mg/l)\" IS NOT NULL AND CAST(\"Solubility - In organic solvent 3 at 20 degC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Solubility - In organic solvent 4 at 20 degC (mg/l)' AS subject_name\n    , CAST(\"Solubility - In organic solvent 4 at 20 degC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Solubility - In organic solvent 4 at 20 degC (mg/l)\" IS NOT NULL AND CAST(\"Solubility - In organic solvent 4 at 20 degC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Melting point (degC)' AS subject_name\n    , CAST(\"Melting point (degC)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Melting point (degC)\" IS NOT NULL AND CAST(\"Melting point (degC)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Boiling point (deg C, 1atm)' AS subject_name\n    , CAST(\"Boiling point (deg C, 1atm)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Boiling point (deg C, 1atm)\" IS NOT NULL AND CAST(\"Boiling point (deg C, 1atm)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Degradation point (degC, 1atm)' AS subject_name\n    , CAST(\"Degradation point (degC, 1atm)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Degradation point (degC, 1atm)\" IS NOT NULL AND CAST(\"Degradation point (degC, 1atm)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Flashpoint (degC)' AS subject_name\n    , CAST(\"Flashpoint (degC)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Flashpoint (degC)\" IS NOT NULL AND CAST(\"Flashpoint (degC)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'LogP' AS subject_name\n    , CAST(\"LogP\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"LogP\" IS NOT NULL AND CAST(\"LogP\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Bulk density (g/ml) / Specific gravity' AS subject_name\n    , CAST(\"Bulk density (g/ml) / Specific gravity\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Bulk density (g/ml) / Specific gravity\" IS NOT NULL AND CAST(\"Bulk density (g/ml) / Specific gravity\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Dissociation constant (pKa) at 25 degC' AS subject_name\n    , CAST(\"Dissociation constant (pKa) at 25 degC\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Dissociation constant (pKa) at 25 degC\" IS NOT NULL AND CAST(\"Dissociation constant (pKa) at 25 degC\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Vapour pressure at 20 degC (mPa)' AS subject_name\n    , CAST(\"Vapour pressure at 20 degC (mPa)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Vapour pressure at 20 degC (mPa)\" IS NOT NULL AND CAST(\"Vapour pressure at 20 degC (mPa)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Henry''s law constant at 25 degC (Pa/m3/mol)' AS subject_name\n    , CAST(\"Henry's law constant at 25 degC (Pa/m3/mol)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Henry's law constant at 25 degC (Pa/m3/mol)\" IS NOT NULL AND CAST(\"Henry's law constant at 25 degC (Pa/m3/mol)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Maximum UV-vis absorption (L/mol/cm)' AS subject_name\n    , CAST(\"Maximum UV-vis absorption (L/mol/cm)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Maximum UV-vis absorption (L/mol/cm)\" IS NOT NULL AND CAST(\"Maximum UV-vis absorption (L/mol/cm)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Surface tension (mN/m)' AS subject_name\n    , CAST(\"Surface tension (mN/m)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Surface tension (mN/m)\" IS NOT NULL AND CAST(\"Surface tension (mN/m)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Refractive index' AS subject_name\n    , CAST(\"Refractive index\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Refractive index\" IS NOT NULL AND CAST(\"Refractive index\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Bioconcentration factor' AS subject_name\n    , CAST(\"Bioconcentration factor\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Bioconcentration factor\" IS NOT NULL AND CAST(\"Bioconcentration factor\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Clearance half-life (days)' AS subject_name\n    , CAST(\"Clearance half-life (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Clearance half-life (days)\" IS NOT NULL AND CAST(\"Clearance half-life (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Soil DT50 - Typical (days)' AS subject_name\n    , CAST(\"Soil DT50 - Typical (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT50 - Typical (days)\" IS NOT NULL AND CAST(\"Soil DT50 - Typical (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Soil DT50 - Lab (days)' AS subject_name\n    , CAST(\"Soil DT50 - Lab (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT50 - Lab (days)\" IS NOT NULL AND CAST(\"Soil DT50 - Lab (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Soil DT50 - Field (days)' AS subject_name\n    , CAST(\"Soil DT50 - Field (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT50 - Field (days)\" IS NOT NULL AND CAST(\"Soil DT50 - Field (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Soil DT90 - Lab (days)' AS subject_name\n    , CAST(\"Soil DT90 - Lab (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT90 - Lab (days)\" IS NOT NULL AND CAST(\"Soil DT90 - Lab (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Soil DT90 - Field (days)' AS subject_name\n    , CAST(\"Soil DT90 - Field (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT90 - Field (days)\" IS NOT NULL AND CAST(\"Soil DT90 - Field (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Soil DT90 - Field (days)' AS subject_name\n    , CAST(\"Soil DT90 - Field (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Soil DT90 - Field (days)\" IS NOT NULL AND CAST(\"Soil DT90 - Field (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Dissipation rate RL50 on plant matrix' AS subject_name\n    , CAST(\"Dissipation rate RL50 on plant matrix\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Dissipation rate RL50 on plant matrix\" IS NOT NULL AND CAST(\"Dissipation rate RL50 on plant matrix\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Dissipation rate RL50 on and in plant matrix' AS subject_name\n    , CAST(\"Dissipation rate RL50 on and in plant matrix\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Dissipation rate RL50 on and in plant matrix\" IS NOT NULL AND CAST(\"Dissipation rate RL50 on and in plant matrix\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Aqueous photolysis DT50 at pH 7 (days)' AS subject_name\n    , CAST(\"Aqueous photolysis DT50 at pH 7 (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Aqueous photolysis DT50 at pH 7 (days)\" IS NOT NULL AND CAST(\"Aqueous photolysis DT50 at pH 7 (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Aqueous hydrolysis DT50 at pH7 (days)' AS subject_name\n    , CAST(\"Aqueous hydrolysis DT50 at pH7 (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Aqueous hydrolysis DT50 at pH7 (days)\" IS NOT NULL AND CAST(\"Aqueous hydrolysis DT50 at pH7 (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Water-sediment DT50 (days)' AS subject_name\n    , CAST(\"Water-sediment DT50 (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Water-sediment DT50 (days)\" IS NOT NULL AND CAST(\"Water-sediment DT50 (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Water phase only DT50 (days)' AS subject_name\n    , CAST(\"Water phase only DT50 (days)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Water phase only DT50 (days)\" IS NOT NULL AND CAST(\"Water phase only DT50 (days)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Kd (ml/g)' AS subject_name\n    , CAST(\"Kd (ml/g)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Kd (ml/g)\" IS NOT NULL AND CAST(\"Kd (ml/g)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Koc (ml/g)' AS subject_name\n    , CAST(\"Koc (ml/g)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Koc (ml/g)\" IS NOT NULL AND CAST(\"Koc (ml/g)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Kf (ml/g)' AS subject_name\n    , CAST(\"Kf (ml/g)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Kf (ml/g)\" IS NOT NULL AND CAST(\"Kf (ml/g)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Kfoc (ml/g)' AS subject_name\n    , CAST(\"Kfoc (ml/g)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Kfoc (ml/g)\" IS NOT NULL AND CAST(\"Kfoc (ml/g)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__fate' AS subject_table\n    , 'Freundlich exponent (1/n)' AS subject_name\n    , CAST(\"Freundlich exponent (1/n)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__fate\nWHERE \"Freundlich exponent (1/n)\" IS NOT NULL AND CAST(\"Freundlich exponent (1/n)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Fish - Acute 96hr LC50 (mg/l)' AS subject_name\n    , CAST(\"Fish - Acute 96hr LC50 (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Fish - Acute 96hr LC50 (mg/l)\" IS NOT NULL AND CAST(\"Fish - Acute 96hr LC50 (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Fish - Chronic 21d NOEC (mg/l)' AS subject_name\n    , CAST(\"Fish - Chronic 21d NOEC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Fish - Chronic 21d NOEC (mg/l)\" IS NOT NULL AND CAST(\"Fish - Chronic 21d NOEC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Aquatic invertebrates - Acute 48hr EC50 (mg/l)' AS subject_name\n    , CAST(\"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" IS NOT NULL AND CAST(\"Aquatic invertebrates - Acute 48hr EC50 (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Aquatic invertebrates - Chronic 21d NOEC (mg/l)' AS subject_name\n    , CAST(\"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" IS NOT NULL AND CAST(\"Aquatic invertebrates - Chronic 21d NOEC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Aquatic crustaceans - Acute 96hr LC50 (mg/l)' AS subject_name\n    , CAST(\"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" IS NOT NULL AND CAST(\"Aquatic crustaceans - Acute 96hr LC50 (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Aquatic plants - Acute 7d EC50 (mg/l)' AS subject_name\n    , CAST(\"Aquatic plants - Acute 7d EC50 (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic plants - Acute 7d EC50 (mg/l)\" IS NOT NULL AND CAST(\"Aquatic plants - Acute 7d EC50 (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Algae - Acute 72hr EC50 growth (mg/l)' AS subject_name\n    , CAST(\"Algae - Acute 72hr EC50 growth (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Algae - Acute 72hr EC50 growth (mg/l)\" IS NOT NULL AND CAST(\"Algae - Acute 72hr EC50 growth (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Algae - Chronic 96hr NOEC (mg/l)' AS subject_name\n    , CAST(\"Algae - Chronic 96hr NOEC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Algae - Chronic 96hr NOEC (mg/l)\" IS NOT NULL AND CAST(\"Algae - Chronic 96hr NOEC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Sediment dwelling organimss - Acute 96hr LC50' AS subject_name\n    , CAST(\"Sediment dwelling organimss - Acute 96hr LC50\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Sediment dwelling organimss - Acute 96hr LC50\" IS NOT NULL AND CAST(\"Sediment dwelling organimss - Acute 96hr LC50\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Sediment dwelling organisms - Chronic 28d NOEC static water' AS subject_name\n    , CAST(\"Sediment dwelling organisms - Chronic 28d NOEC static water\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Sediment dwelling organisms - Chronic 28d NOEC static water\" IS NOT NULL AND CAST(\"Sediment dwelling organisms - Chronic 28d NOEC static water\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Sediment dwelling organisms - Chronic 28d NOEC sediment' AS subject_name\n    , CAST(\"Sediment dwelling organisms - Chronic 28d NOEC sediment\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Sediment dwelling organisms - Chronic 28d NOEC sediment\" IS NOT NULL AND CAST(\"Sediment dwelling organisms - Chronic 28d NOEC sediment\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Aquatic mesocosm 1 - NOEAEC (mg/l)' AS subject_name\n    , CAST(\"Aquatic mesocosm 1 - NOEAEC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic mesocosm 1 - NOEAEC (mg/l)\" IS NOT NULL AND CAST(\"Aquatic mesocosm 1 - NOEAEC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__aquatic_ecotox' AS subject_table\n    , 'Aquatic mesocosm 2 NOEAEC (mg/l)' AS subject_name\n    , CAST(\"Aquatic mesocosm 2 NOEAEC (mg/l)\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__aquatic_ecotox\nWHERE \"Aquatic mesocosm 2 NOEAEC (mg/l)\" IS NOT NULL AND CAST(\"Aquatic mesocosm 2 NOEAEC (mg/l)\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__plant' AS subject_table\n    , 'RL50 min' AS subject_name\n    , CAST(\"RL50 min\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__plant\nWHERE \"RL50 min\" IS NOT NULL AND CAST(\"RL50 min\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__plant' AS subject_table\n    , 'RL50 max' AS subject_name\n    , CAST(\"RL50 max\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__plant\nWHERE \"RL50 max\" IS NOT NULL AND CAST(\"RL50 max\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__plant' AS subject_table\n    , 'RL50 mean' AS subject_name\n    , CAST(\"RL50 mean\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__plant\nWHERE \"RL50 mean\" IS NOT NULL AND CAST(\"RL50 mean\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_degradation' AS subject_table\n    , 'DT50 lab' AS subject_name\n    , CAST(\"DT50 lab\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT50 lab\" IS NOT NULL AND CAST(\"DT50 lab\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_degradation' AS subject_table\n    , 'DT90 Lab' AS subject_name\n    , CAST(\"DT90 Lab\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT90 Lab\" IS NOT NULL AND CAST(\"DT90 Lab\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_degradation' AS subject_table\n    , 'DT50 Field' AS subject_name\n    , CAST(\"DT50 Field\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT50 Field\" IS NOT NULL AND CAST(\"DT50 Field\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_degradation' AS subject_table\n    , 'DT90 Field' AS subject_name\n    , CAST(\"DT90 Field\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"DT90 Field\" IS NOT NULL AND CAST(\"DT90 Field\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_degradation' AS subject_table\n    , 'pH' AS subject_name\n    , CAST(\"pH\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"pH\" IS NOT NULL AND CAST(\"pH\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_degradation' AS subject_table\n    , 'Temp' AS subject_name\n    , CAST(\"Temp\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_degradation\nWHERE \"Temp\" IS NOT NULL AND CAST(\"Temp\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , 'Kd' AS subject_name\n    , CAST(\"Kd\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Kd\" IS NOT NULL AND CAST(\"Kd\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , 'Koc' AS subject_name\n    , CAST(\"Koc\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Koc\" IS NOT NULL AND CAST(\"Koc\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , 'Kf' AS subject_name\n    , CAST(\"Kf\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Kf\" IS NOT NULL AND CAST(\"Kf\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , 'Kfoc' AS subject_name\n    , CAST(\"Kfoc\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Kfoc\" IS NOT NULL AND CAST(\"Kfoc\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , '1/n' AS subject_name\n    , CAST(\"1/n\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"1/n\" IS NOT NULL AND CAST(\"1/n\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , 'Soil pH' AS subject_name\n    , CAST(\"Soil pH\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"Soil pH\" IS NOT NULL AND CAST(\"Soil pH\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , '% Clay' AS subject_name\n    , CAST(\"% Clay\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"% Clay\" IS NOT NULL AND CAST(\"% Clay\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , '% Sand' AS subject_name\n    , CAST(\"% Sand\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"% Sand\" IS NOT NULL AND CAST(\"% Sand\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , '% Silt' AS subject_name\n    , CAST(\"% Silt\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"% Silt\" IS NOT NULL AND CAST(\"% Silt\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , '% OM' AS subject_name\n    , CAST(\"% OM\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"% OM\" IS NOT NULL AND CAST(\"% OM\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , '% OC' AS subject_name\n    , CAST(\"% OC\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"% OC\" IS NOT NULL AND CAST(\"% OC\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    \n\n UNION ALL \n\nSELECT \n    'stg_ppdb__soil_adsorption' AS subject_table\n    , 'pH Dependence' AS subject_name\n    , CAST(\"pH Dependence\" AS VARCHAR) AS column_value\n    , _uid AS subject_uid\nFROM psc_dev.dev.stg_ppdb__soil_adsorption\nWHERE \"pH Dependence\" IS NOT NULL AND CAST(\"pH Dependence\" AS VARCHAR) !~ '^-?\\d*\\.?\\d+$'\n    ", "extra_ctes_injected": true, "extra_ctes": []}, "seed.psc.observation_name": {"database": "psc_dev", "schema": "dev_api", "name": "observation_name", "resource_type": "seed", "package_name": "psc", "path": "api/observation_name.csv", "original_file_path": "models/api/observation_name.csv", "unique_id": "seed.psc.observation_name", "fqn": ["psc", "api", "observation_name"], "alias": "observation_name", "checksum": {"name": "sha256", "checksum": "ba1e3eb1b35d96b951ff93ff68c3e50b1bddcccb72b0e1cfb51ac97d36b53968"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [{"sql": "ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Reference table for compound observation names.\n\n|name|description|unit|\n|----|-----------|----|\n|1/n|||\n|ADI|Acceptable Daily Intake||\n|AOEL|||\n|ARfD||mg/kg BW/day|\n|Bioconcentration Factor|||\n|Boiling Point|degree Celsius, 1 atomsphere|deg C|\n|Bulk Density||g/ml|\n|Clearance Half-Life||days|\n|Degradation Point|degree Celsius|degC, 1atm|\n|Dissociation Constant|||\n|Drinking water MAC||ug/l|\n|DT50|||\n|DT90|||\n|EC50|The concentration of a chemical that can be expected to cause a defined non-lethal effect in 50% of the tested population. In some cases, other percentages may be displayed (e.g., EC10 or EC15).|mg/l|\n|Flashpoint||degC|\n|Freundlich Exponent||1/n|\n|Henry Law Constant||Pa/m3/mol|\n|Kd||ml/g|\n|Kf||ml/g|\n|Kfoc||ml/g|\n|Koc|||\n|LC50|amount of a substance suspended in the air required to kills 50% of a test animals during a predetermined observation period|mg/l|\n|LD50|Used in toxicology this is the median lethal dose (LD50, abbreviation for 'Lethal Dose, 50%'), of a toxic substance and is the dose required to kill half the tested population. LD50 figures are frequently used as a general indicator of a substance's acute toxicity.|mg/kg|\n|LDLo|LD Low||\n|LogP|description about LogP||\n|Maximum UV Absorption||L/mol/cm|\n|Melting Point|degree Celsius|degC|\n|NOAEL||mg/kg bw/d|\n|NOEAEC|No Observed Ecologically Adverse Effect Concentration. The highest concentration that causes no observed adverse effect on fauna or flora.|mg/l|\n|NOEC|No Observed Effect Concentration (see NOEL)|mg/l|\n|NOEL|No Observed Effect Level. Highest dose or exposure level of a substance or material that produces no noticeable (observable) toxic effect on tested animals|mg/kg|\n|Percutaneous penetration studies (%)||%|\n|Refractive Index|||\n|RL50|The RL50 (Residual Level) is the rate in days for which the pesticide declines by 50% on and/or in the surface of the specified plant matrix (leaves, fruit, roots, seeds, grain etc.).||\n|Solubility||mg/l|\n|Surface Tension||mN/m|\n|Vapour Pressure|Vapour pressure at 20 degC|mPa|", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)"], "schema": "api"}, "created_at": 1682432490.2940087, "relation_name": "psc_dev.dev_api.observation_name", "raw_code": "", "root_path": "/home/le/pscpi/dagster/psc_user_code/dbt", "depends_on": {"macros": []}}, "seed.psc.discipline": {"database": "psc_dev", "schema": "dev_api", "name": "discipline", "resource_type": "seed", "package_name": "psc", "path": "api/discipline.csv", "original_file_path": "models/api/discipline.csv", "unique_id": "seed.psc.discipline", "fqn": ["psc", "api", "discipline"], "alias": "discipline", "checksum": {"name": "sha256", "checksum": "4c94cfe12924fe48adde512eae7486155f2c50abb45a2aeb7349881edc1c18a1"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [{"sql": "ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)"], "schema": "api"}, "created_at": 1682432490.1111221, "relation_name": "psc_dev.dev_api.discipline", "raw_code": "", "root_path": "/home/le/pscpi/dagster/psc_user_code/dbt", "depends_on": {"macros": []}}, "seed.psc.data_source": {"database": "psc_dev", "schema": "dev_api", "name": "data_source", "resource_type": "seed", "package_name": "psc", "path": "api/data_source.csv", "original_file_path": "models/api/data_source.csv", "unique_id": "seed.psc.data_source", "fqn": ["psc", "api", "data_source"], "alias": "data_source", "checksum": {"name": "sha256", "checksum": "6ec97d9121ebd6b3560a7cdbedf0d91d4eb8c2ca79442fad1737920885baf10c"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [{"sql": "ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Reference table for data sources.\n\n| Name | Description                                                                                                                                                                                                                                                                           |\n|------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| A    | EU Regulatory & Evaluation Data as   published by EC, EFSA (RAR, DAR & Conclusion dossiers), EMA (e.g.) EU   Annex III PIC DGD (For example see   http://ec.europa.eu/sanco_pesticides/public/index.cfm or EFSA Scientific   Publications https://www.efsa.europa.eu/en/publications) |\n| AA   | IOBC Database on classification of side effects to beneficial organisms,   2005                                                                                                                                                                                                       |\n| AB   | SELECTV Database                                                                                                                                                                                                                                                                      |\n| AC   | EC Joint Research Centre ESIS European Chemical Substance Information Systems including EINECS (See https://echa.europa.eu/information-on-chemicals)                                                                                                                                  |\n| AE   | Joint Assessment of Commodity Chemicals ECETOC (See   http://www.ecetoc.org)                                                                                                                                                                                                          |\n| AF   | European Food Safety Authority (EFSA)                                                                                                                                                                                                                                                 |\n| AG   | Chemicals Regulation Division, Health and Safety Executive (HSE), UK                                                                                                                                                                                                                  |\n| B    | UK CRD and ACP Evaluation Documents / and other DEFRA (UK) documents (See http://www.pesticides.gov.uk/publications.asp?id=202)                                                                                                                                                     |\n| C    | AGRITOX (See http://www.agritox.anses.fr/)                                                                                                                                                                                                                                            |\n| CA   | Medical and toxicological databases and information systems e.g. TOXNET (See https://www.nlm.nih.gov/toxnet/index.html)                                                                                                                                                             |\n| D    | Agricultural Research Information System (ARIS) Database                                                                                                                                                                                                                              |\n| DW   | Don Wauchope personal database for Pka data: Wauchope, R. D. and Edwards,   J. Dissociation constants for pesticide active ingredients: a database and   comparison with predicted values. MS in preparation                                                                          |\n| E    | Manufacturers Safety Data Sheets                                                                                                                                                                                                                                                      |\n| F    | U.S. EPA ECOTOX database / U.S. EPA pesticide fate database / Miscellaneous WHO documents (See   https://www.epa.gov/pesticide-science-and-assessing-pesticide-risks/databases-related-pesticide-risk-assessment)                                                                   |\n| FAO  | Miscellaneous FAO publications                                                                                                                                                                                                                                                        |\n| G    | Extension Toxicology network Database EXTOXNET (See http://extoxnet.orst.edu/ghindex.html)                                                                                                                                                                                          |\n| H    | The US ARS Pesticide Properties Database (See http://www.ars.usda.gov/Services/docs.htm?docid=14199)                                                                                                                                                                                |\n| J    | Pesticide Action Network Database (See http://www.pesticideinfo.org/)                                                                                                                                                                                                                 |\n| K    | Research Datasets (e.g. Pandora, Demetra)                                                                                                                                                                                                                                             |\n| L    | Pesticide manuals and hard copy reference books / other sources                                                                                                                                                                                                                       |\n| M    | GLEAMS Model database (Groundwater Loading Effects of Agricultural Management Systems). (See   http://www.cpes.peachnet.edu/sewrl/Gleams/gleams_y2k_update.htm)                                                                                                                     |\n| N    | Various Trusts, NGOs & Charities Data                                                                                                                                                                                                                                                 |\n| P    | Other Governments and Regulators                                                                                                                                                                                                                                                      |\n| Q    | Miscellaneous Data from On-line Sources                                                                                                                                                                                                                                               |\n| R    | Peer Reviewed Scientific Publications                                                                                                                                                                                                                                                 |\n| S    | Expert Judgement                                                                                                                                                                                                                                                                      |\n| T    | UN EPFA Database                                                                                                                                                                                                                                                                      |\n| US   | US Dept of Agriculture National Resources Conservation Service - various   datasheets, databases and online sources                                                                                                                                                                   |\n| V    | ChemID Online Databases (See https://chem.nlm.nih.gov/chemidplus/) / IPCS   INCHEM (See http://www.inchem.org/)                                                                                                                                                                       |\n| W    | French database provided by ARVALIS-Institut du V\u00e9g\u00e9tal                                                                                                                                                                                                                               |\n| X    | WINPST Database (See http://www.ipm.ucdavis.edu/TOX/winpstdoc.html)                                                                                                                                                                                                                   |\n| Y    | Germany's Federal Environment Agency (UBA) (See http://www.umweltbundesamt.de/index-e.htm)                                                                                                                                                                                          |\n| Z    | Kingtai Chemials Website (See http://www.kingtaichem.com/)                                                                                                                                                                                                                            |", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)"], "schema": "api"}, "created_at": 1682432490.2933497, "relation_name": "psc_dev.dev_api.data_source", "raw_code": "", "root_path": "/home/le/pscpi/dagster/psc_user_code/dbt", "depends_on": {"macros": []}}, "seed.psc.property_name": {"database": "psc_dev", "schema": "dev_api", "name": "property_name", "resource_type": "seed", "package_name": "psc", "path": "api/property_name.csv", "original_file_path": "models/api/property_name.csv", "unique_id": "seed.psc.property_name", "fqn": ["psc", "api", "property_name"], "alias": "property_name", "checksum": {"name": "sha256", "checksum": "8358a3d96e41c1c8ccd5eb7ded24672a15d0cb246f8c40a4b3e0aa7c596ee807"}, "config": {"enabled": true, "alias": null, "schema": "api", "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [{"sql": "ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Reference table for compound property names.\n\n| name | description |\n|---|---|\n| Complexity | The complexity rating of a compound is a rough estimate of how   complicated a structure is, seen from both the point of view of the elements   contained and the displayed structural features including symmetry. This   complexity rating is computed using the Bertz/Hendrickson/Ihlenfeldt formula. |\n| Covalently-Bonded Unit Count | A covalently-bonded unit is a group of atoms connected by covalent bonds,   ignoring other bond types (or a single atom without covalent bonds). The   \"covalently-bonded unit count\" property is the number of such units   in this compound compound. |\n| Defined Atom Stereocenter Count | An atom stereocenter, also known as a chiral center, is an atom that is   attached to four different types of atoms (or groups of atoms) in the   tetrahedral arrangement. It can have either (R)- or (S)- configurations. Some   compounds, such as racemic mixtures, have an undefined atom stereocenter,   whose (R/S)-configuration is not specifically defined. The \"defined atom   stereocenter count\" is the number of atom stereocenters whose   configurations are specifically defined. |\n| Defined Bond Stereocenter Count | A bond stereocenter is a non-rotatable bond around which two atoms can   have different arrangement (as in cis- and trans-forms of butene around its   double bond). Some compounds have an undefined bond stereocenter, whose   stereochemistry is not specifically defined. The \"defined bond   stereocenter count\" is the number of bond stereocenters whose   configurations are specifically defined. |\n| Exact Mass | The exact mass of an isotopic species is obtained by summing the masses   of the individual isotopes of the molecule. |\n| Formal Charge | Formal charge is the difference between the number of valence electrons   of each atom and the number of electrons the atom is associated with. Formal   charge assumes any shared electrons are equally shared between the two bonded   atoms. |\n| Heavy Atom Count | The number of heavy atoms (i.e., non-hydrogen atoms) in this compound. |\n| Hydrogen Bond Acceptor Count | The number of hydrogen bond acceptors in this compound. |\n| Hydrogen Bond Donor Count | The number of hydrogen bond donors in this compound. |\n| Isotope Atom Count | Isotope atom count is the number of isotopes that are not most abundant   for the corresponding chemical elements. Isotopes are variants of a chemical   element which differ in neutron number. For example, among three isotopes of   carbon (i.e., C-12, C-13, and C-14), the isotope atom count considers the   C-13 and C-14 atoms, because C-12 is the most abundant isotope of carbon. |\n| Molecular Weight | Molecular weight or molecular mass refers to the mass of a molecule. It   is calculated as the sum of the mass of each constituent atom multiplied by   the number of atoms of that element in the molecular formula. The molecular   weight is also called the relative molar mass, because molecular weights are   reported in daltons, which is defined relative to the mass of the isotope 12C   (carbon 12). |\n| Monoisotopic Mass | The monoisotopic mass is the sum of the masses of the atoms in a molecule   using the unbound, ground-state, rest mass of the principal (most abundant)   isotope for each element instead of the isotopic average mass. |\n| Rotatable Bond Count | A rotatable bond is defined as any single-order non-ring bond, where   atoms on either side of the bond are in turn bound to nonterminal heavy   (i.e., non-hydrogen) atoms. That is, where rotation around the bond axis   changes the overall shape of the molecule, and generates conformers which can   be distinguished by standard fast spectroscopic methods. |\n| Topological Polar Surface Area | The topological polar surface area (TPSA) is an estimate of the polar   surface area (in Angstroms^2) of a molecule, computed as the surface sum over   polar atoms in the molecule. The implementation follows the paper by Ertl et   al. [J. Med. Chem. 2000, 43, 3714-3717]: only N and O are considered, 3D   coordinates are not used, and there are various precomputed factors for   different hybridizations, charges and participation in aromatic systems. |\n| Undefined Atom Stereocenter Count | The number of atom stereocenters whose configurations are not   specifically defined. For the definition of atom stereocenters, see the   \"defined atom stereocenter count\" above. |\n| Undefined Bond Stereocenter Count | The number of bond stereocenters whose configurations are not   specifically defined. For the definition of bond stereocenters, see the   \"defined bond stereocenter count\" above. |\n| XLogP3 | XLogP3 is a predicted octanol-water partition coefficient, computed using   the algorithm described in J. Chem. Inf. Model. 2007, 47, 6, 2140-2148. It is   used as a measure of hydrophilicity or hydrophobicity of a molecule. |", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "psc://models/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["ALTER TABLE {{ this }} DROP CONSTRAINT IF EXISTS {{ this.identifier }}_pkey", "ALTER TABLE {{ this }} ADD CONSTRAINT {{ this.identifier }}_pkey PRIMARY KEY (name)"], "schema": "api"}, "created_at": 1682432490.2946043, "relation_name": "psc_dev.dev_api.property_name", "raw_code": "", "root_path": "/home/le/pscpi/dagster/psc_user_code/dbt", "depends_on": {"macros": []}}, "test.psc.relationships_observation_observation_name__name__ref_observation_name_.18c33f9c3f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('observation_name')", "field": "name", "column_name": "observation_name", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_observation_observation_name__name__ref_observation_name_", "resource_type": "test", "package_name": "psc", "path": "relationships_observation_9b15dbaff5f197111f88032c23be9dd6.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_observation_observation_name__name__ref_observation_name_.18c33f9c3f", "fqn": ["psc", "relationships_observation_observation_name__name__ref_observation_name_"], "alias": "relationships_observation_9b15dbaff5f197111f88032c23be9dd6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_9b15dbaff5f197111f88032c23be9dd6", "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}, "alias": "relationships_observation_9b15dbaff5f197111f88032c23be9dd6"}, "created_at": 1682432490.2187417, "relation_name": "psc_dev.dev_testing.relationships_observation_9b15dbaff5f197111f88032c23be9dd6", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_9b15dbaff5f197111f88032c23be9dd6\") }}", "language": "sql", "refs": [["observation_name"], ["observation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.psc.observation_name", "model.psc.observation"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_observation_9b15dbaff5f197111f88032c23be9dd6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select observation_name as from_field\n    from psc_dev.dev_api.observation\n    where observation_name is not null\n),\n\nparent as (\n    select name as to_field\n    from psc_dev.dev_api.observation_name\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "observation_name", "file_key_name": "models.observation"}, "test.psc.relationships_observation_data_source__name__ref_data_source_.60185c98f7": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('data_source')", "field": "name", "column_name": "data_source", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_observation_data_source__name__ref_data_source_", "resource_type": "test", "package_name": "psc", "path": "relationships_observation_data_source__name__ref_data_source_.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_observation_data_source__name__ref_data_source_.60185c98f7", "fqn": ["psc", "relationships_observation_data_source__name__ref_data_source_"], "alias": "relationships_observation_data_source__name__ref_data_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}}, "created_at": 1682432490.2341979, "relation_name": "psc_dev.dev_testing.relationships_observation_data_source__name__ref_data_source_", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["data_source"], ["observation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.psc.data_source", "model.psc.observation"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_observation_data_source__name__ref_data_source_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select data_source as from_field\n    from psc_dev.dev_api.observation\n    where data_source is not null\n),\n\nparent as (\n    select name as to_field\n    from psc_dev.dev_api.data_source\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "data_source", "file_key_name": "models.observation"}, "test.psc.relationships_observation_inchi_key__inchi_key__ref_compound_.1f5471597c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('compound')", "field": "inchi_key", "column_name": "inchi_key", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_observation_inchi_key__inchi_key__ref_compound_", "resource_type": "test", "package_name": "psc", "path": "relationships_observation_inchi_key__inchi_key__ref_compound_.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_observation_inchi_key__inchi_key__ref_compound_.1f5471597c", "fqn": ["psc", "relationships_observation_inchi_key__inchi_key__ref_compound_"], "alias": "relationships_observation_inchi_key__inchi_key__ref_compound_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}}, "created_at": 1682432490.2414575, "relation_name": "psc_dev.dev_testing.relationships_observation_inchi_key__inchi_key__ref_compound_", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["compound"], ["observation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.psc.compound", "model.psc.observation"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_observation_inchi_key__inchi_key__ref_compound_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select inchi_key as from_field\n    from psc_dev.dev_api.observation\n    where inchi_key is not null\n),\n\nparent as (\n    select inchi_key as to_field\n    from psc_dev.dev_api.compound\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "inchi_key", "file_key_name": "models.observation"}, "test.psc.relationships_compound_property_property_name__name__ref_property_name_.a8463711cf": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('property_name')", "field": "name", "column_name": "property_name", "model": "{{ get_where_subquery(ref('compound_property')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_compound_property_property_name__name__ref_property_name_", "resource_type": "test", "package_name": "psc", "path": "relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_compound_property_property_name__name__ref_property_name_.a8463711cf", "fqn": ["psc", "relationships_compound_property_property_name__name__ref_property_name_"], "alias": "relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef", "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}, "alias": "relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef"}, "created_at": 1682432490.2487683, "relation_name": "psc_dev.dev_testing.relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef\") }}", "language": "sql", "refs": [["property_name"], ["compound_property"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.psc.property_name", "model.psc.compound_property"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_compound_propert_0ca54cb78493b40a906b9f0741a241ef.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select property_name as from_field\n    from psc_dev.dev_api.compound_property\n    where property_name is not null\n),\n\nparent as (\n    select name as to_field\n    from psc_dev.dev_api.property_name\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "property_name", "file_key_name": "models.compound_property"}, "test.psc.relationships_compound_property_data_source__name__ref_data_source_.ca2b8964f2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('data_source')", "field": "name", "column_name": "data_source", "model": "{{ get_where_subquery(ref('compound_property')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_compound_property_data_source__name__ref_data_source_", "resource_type": "test", "package_name": "psc", "path": "relationships_compound_propert_3a68d847260cdec64797832e11049636.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_compound_property_data_source__name__ref_data_source_.ca2b8964f2", "fqn": ["psc", "relationships_compound_property_data_source__name__ref_data_source_"], "alias": "relationships_compound_propert_3a68d847260cdec64797832e11049636", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_compound_propert_3a68d847260cdec64797832e11049636", "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}, "alias": "relationships_compound_propert_3a68d847260cdec64797832e11049636"}, "created_at": 1682432490.2575276, "relation_name": "psc_dev.dev_testing.relationships_compound_propert_3a68d847260cdec64797832e11049636", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_compound_propert_3a68d847260cdec64797832e11049636\") }}", "language": "sql", "refs": [["data_source"], ["compound_property"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.psc.data_source", "model.psc.compound_property"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_compound_propert_3a68d847260cdec64797832e11049636.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select data_source as from_field\n    from psc_dev.dev_api.compound_property\n    where data_source is not null\n),\n\nparent as (\n    select name as to_field\n    from psc_dev.dev_api.data_source\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "data_source", "file_key_name": "models.compound_property"}, "test.psc.relationships_compound_property_inchi_key__inchi_key__ref_compound_.c8f0254f68": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('compound')", "field": "inchi_key", "column_name": "inchi_key", "model": "{{ get_where_subquery(ref('compound_property')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_compound_property_inchi_key__inchi_key__ref_compound_", "resource_type": "test", "package_name": "psc", "path": "relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_compound_property_inchi_key__inchi_key__ref_compound_.c8f0254f68", "fqn": ["psc", "relationships_compound_property_inchi_key__inchi_key__ref_compound_"], "alias": "relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e", "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}, "alias": "relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e"}, "created_at": 1682432490.265021, "relation_name": "psc_dev.dev_testing.relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e\") }}", "language": "sql", "refs": [["compound"], ["compound_property"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.psc.compound", "model.psc.compound_property"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_compound_propert_629bbb1e48d252f9cbf9ba1af58b0a5e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select inchi_key as from_field\n    from psc_dev.dev_api.compound_property\n    where inchi_key is not null\n),\n\nparent as (\n    select inchi_key as to_field\n    from psc_dev.dev_api.compound\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "inchi_key", "file_key_name": "models.compound_property"}, "test.psc.relationships_blob_inchi_key__inchi_key__ref_compound_.3199260c6f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('compound')", "field": "inchi_key", "column_name": "inchi_key", "model": "{{ get_where_subquery(ref('blob')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_blob_inchi_key__inchi_key__ref_compound_", "resource_type": "test", "package_name": "psc", "path": "relationships_blob_inchi_key__inchi_key__ref_compound_.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_blob_inchi_key__inchi_key__ref_compound_.3199260c6f", "fqn": ["psc", "relationships_blob_inchi_key__inchi_key__ref_compound_"], "alias": "relationships_blob_inchi_key__inchi_key__ref_compound_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}}, "created_at": 1682432490.272421, "relation_name": "psc_dev.dev_testing.relationships_blob_inchi_key__inchi_key__ref_compound_", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["compound"], ["blob"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.psc.compound", "model.psc.blob"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_blob_inchi_key__inchi_key__ref_compound_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select inchi_key as from_field\n    from psc_dev.dev_api.blob\n    where inchi_key is not null\n),\n\nparent as (\n    select inchi_key as to_field\n    from psc_dev.dev_api.compound\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "inchi_key", "file_key_name": "models.blob"}, "test.psc.relationships_metabolite_inchi_key__inchi_key__ref_compound_.78fc0b552d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('compound')", "field": "inchi_key", "column_name": "inchi_key", "model": "{{ get_where_subquery(ref('metabolite')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_metabolite_inchi_key__inchi_key__ref_compound_", "resource_type": "test", "package_name": "psc", "path": "relationships_metabolite_inchi_key__inchi_key__ref_compound_.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_metabolite_inchi_key__inchi_key__ref_compound_.78fc0b552d", "fqn": ["psc", "relationships_metabolite_inchi_key__inchi_key__ref_compound_"], "alias": "relationships_metabolite_inchi_key__inchi_key__ref_compound_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}}, "created_at": 1682432490.2793303, "relation_name": "psc_dev.dev_testing.relationships_metabolite_inchi_key__inchi_key__ref_compound_", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["compound"], ["metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.psc.compound", "model.psc.metabolite"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_metabolite_inchi_key__inchi_key__ref_compound_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select inchi_key as from_field\n    from psc_dev.dev_api.metabolite\n    where inchi_key is not null\n),\n\nparent as (\n    select inchi_key as to_field\n    from psc_dev.dev_api.compound\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "inchi_key", "file_key_name": "models.metabolite"}, "test.psc.relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_.931c07b137": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('compound')", "field": "inchi_key", "column_name": "parent_inchi_key", "model": "{{ get_where_subquery(ref('metabolite')) }}"}, "namespace": null}, "database": "psc_dev", "schema": "dev_testing", "name": "relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_", "resource_type": "test", "package_name": "psc", "path": "relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b.sql", "original_file_path": "models/schema.yml", "unique_id": "test.psc.relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_.931c07b137", "fqn": ["psc", "relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_"], "alias": "relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b", "schema": "testing", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "docs": {"show": false}}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "testing", "docs": {"show": false}, "alias": "relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b"}, "created_at": 1682432490.2860913, "relation_name": "psc_dev.dev_testing.relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b\") }}", "language": "sql", "refs": [["compound"], ["metabolite"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.psc.compound", "model.psc.metabolite"]}, "compiled_path": "target/compiled/psc/models/schema.yml/relationships_metabolite_bcc062eb5919a0c49d947e7a7ac79e9b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select parent_inchi_key as from_field\n    from psc_dev.dev_api.metabolite\n    where parent_inchi_key is not null\n),\n\nparent as (\n    select inchi_key as to_field\n    from psc_dev.dev_api.compound\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "parent_inchi_key", "file_key_name": "models.metabolite"}}, "sources": {"source.psc.cmdb.cmdb__in": {"database": "psc_dev", "schema": "cmdb", "name": "cmdb__in", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.cmdb.cmdb__in", "fqn": ["psc", "cmdb", "cmdb__in"], "source_name": "cmdb", "source_description": "", "loader": "", "identifier": "cmdb__in", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"cmdb\".\"cmdb__in\"", "created_at": 1682432490.3237317}, "source.psc.ppdb.ppdb__general": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__general", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__general", "fqn": ["psc", "ppdb", "ppdb__general"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__general", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__general\"", "created_at": 1682432490.3240933}, "source.psc.ppdb.ppdb__fate": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__fate", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__fate", "fqn": ["psc", "ppdb", "ppdb__fate"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__fate", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__fate\"", "created_at": 1682432490.324481}, "source.psc.ppdb.ppdb__aquatic_ecotox": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__aquatic_ecotox", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__aquatic_ecotox", "fqn": ["psc", "ppdb", "ppdb__aquatic_ecotox"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__aquatic_ecotox", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__aquatic_ecotox\"", "created_at": 1682432490.3247194}, "source.psc.ppdb.ppdb__terrestrial_ecotox": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__terrestrial_ecotox", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__terrestrial_ecotox", "fqn": ["psc", "ppdb", "ppdb__terrestrial_ecotox"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__terrestrial_ecotox", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__terrestrial_ecotox\"", "created_at": 1682432490.3249662}, "source.psc.ppdb.ppdb__human": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__human", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__human", "fqn": ["psc", "ppdb", "ppdb__human"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__human", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__human\"", "created_at": 1682432490.3251853}, "source.psc.ppdb.ppdb__plant_matrix_rl50": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__plant_matrix_rl50", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__plant_matrix_rl50", "fqn": ["psc", "ppdb", "ppdb__plant_matrix_rl50"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__plant_matrix_rl50", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__plant_matrix_rl50\"", "created_at": 1682432490.3253927}, "source.psc.ppdb.ppdb__soil_adsorption": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__soil_adsorption", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__soil_adsorption", "fqn": ["psc", "ppdb", "ppdb__soil_adsorption"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__soil_adsorption", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__soil_adsorption\"", "created_at": 1682432490.3255923}, "source.psc.ppdb.ppdb__soil_degradation": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__soil_degradation", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__soil_degradation", "fqn": ["psc", "ppdb", "ppdb__soil_degradation"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__soil_degradation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__soil_degradation\"", "created_at": 1682432490.3257926}, "source.psc.ppdb.ppdb__aliases": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__aliases", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__aliases", "fqn": ["psc", "ppdb", "ppdb__aliases"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__aliases", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__aliases\"", "created_at": 1682432490.3260207}, "source.psc.ppdb.ppdb__languages": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__languages", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__languages", "fqn": ["psc", "ppdb", "ppdb__languages"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__languages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__languages\"", "created_at": 1682432490.326235}, "source.psc.ppdb.ppdb__metabolites": {"database": "psc_dev", "schema": "ppdb", "name": "ppdb__metabolites", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.ppdb.ppdb__metabolites", "fqn": ["psc", "ppdb", "ppdb__metabolites"], "source_name": "ppdb", "source_description": "", "loader": "", "identifier": "ppdb__metabolites", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"ppdb\".\"ppdb__metabolites\"", "created_at": 1682432490.326448}, "source.psc.pharmdb.aged_sorption": {"database": "psc_dev", "schema": "pharmdb", "name": "aged_sorption", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.aged_sorption", "fqn": ["psc", "pharmdb", "aged_sorption"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "aged_sorption", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"aged_sorption\"", "created_at": 1682432490.3266568}, "source.psc.pharmdb.algae": {"database": "psc_dev", "schema": "pharmdb", "name": "algae", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.algae", "fqn": ["psc", "pharmdb", "algae"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "algae", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"algae\"", "created_at": 1682432490.326943}, "source.psc.pharmdb.aromatase": {"database": "psc_dev", "schema": "pharmdb", "name": "aromatase", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.aromatase", "fqn": ["psc", "pharmdb", "aromatase"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "aromatase", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"aromatase\"", "created_at": 1682432490.327171}, "source.psc.pharmdb.atp": {"database": "psc_dev", "schema": "pharmdb", "name": "atp", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.atp", "fqn": ["psc", "pharmdb", "atp"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "atp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"atp\"", "created_at": 1682432490.3274395}, "source.psc.pharmdb.bee": {"database": "psc_dev", "schema": "pharmdb", "name": "bee", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.bee", "fqn": ["psc", "pharmdb", "bee"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "bee", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"bee\"", "created_at": 1682432490.3276682}, "source.psc.pharmdb.bee_oral": {"database": "psc_dev", "schema": "pharmdb", "name": "bee_oral", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.bee_oral", "fqn": ["psc", "pharmdb", "bee_oral"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "bee_oral", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"bee_oral\"", "created_at": 1682432490.3278768}, "source.psc.pharmdb.er_ar": {"database": "psc_dev", "schema": "pharmdb", "name": "er_ar", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.er_ar", "fqn": ["psc", "pharmdb", "er_ar"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "er_ar", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"er_ar\"", "created_at": 1682432490.328114}, "source.psc.pharmdb.field_study": {"database": "psc_dev", "schema": "pharmdb", "name": "field_study", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.field_study", "fqn": ["psc", "pharmdb", "field_study"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "field_study", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"field_study\"", "created_at": 1682432490.3283231}, "source.psc.pharmdb.fish": {"database": "psc_dev", "schema": "pharmdb", "name": "fish", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.fish", "fqn": ["psc", "pharmdb", "fish"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "fish", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"fish\"", "created_at": 1682432490.3285282}, "source.psc.pharmdb.fish_acute": {"database": "psc_dev", "schema": "pharmdb", "name": "fish_acute", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.fish_acute", "fqn": ["psc", "pharmdb", "fish_acute"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "fish_acute", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"fish_acute\"", "created_at": 1682432490.32873}, "source.psc.pharmdb.gastroplus": {"database": "psc_dev", "schema": "pharmdb", "name": "gastroplus", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.gastroplus", "fqn": ["psc", "pharmdb", "gastroplus"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "gastroplus", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"gastroplus\"", "created_at": 1682432490.329046}, "source.psc.pharmdb.hppd": {"database": "psc_dev", "schema": "pharmdb", "name": "hppd", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.hppd", "fqn": ["psc", "pharmdb", "hppd"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "hppd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"hppd\"", "created_at": 1682432490.329279}, "source.psc.pharmdb.hydrolysis": {"database": "psc_dev", "schema": "pharmdb", "name": "hydrolysis", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.hydrolysis", "fqn": ["psc", "pharmdb", "hydrolysis"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "hydrolysis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"hydrolysis\"", "created_at": 1682432490.3294876}, "source.psc.pharmdb.mmp": {"database": "psc_dev", "schema": "pharmdb", "name": "mmp", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.mmp", "fqn": ["psc", "pharmdb", "mmp"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "mmp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"mmp\"", "created_at": 1682432490.3296962}, "source.psc.pharmdb.nrr": {"database": "psc_dev", "schema": "pharmdb", "name": "nrr", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.nrr", "fqn": ["psc", "pharmdb", "nrr"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "nrr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"nrr\"", "created_at": 1682432490.3299215}, "source.psc.pharmdb.pit_area": {"database": "psc_dev", "schema": "pharmdb", "name": "pit_area", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.pit_area", "fqn": ["psc", "pharmdb", "pit_area"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "pit_area", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"pit_area\"", "created_at": 1682432490.3301578}, "source.psc.pharmdb.plasma": {"database": "psc_dev", "schema": "pharmdb", "name": "plasma", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.plasma", "fqn": ["psc", "pharmdb", "plasma"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "plasma", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"plasma\"", "created_at": 1682432490.3304238}, "source.psc.pharmdb.ros": {"database": "psc_dev", "schema": "pharmdb", "name": "ros", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.ros", "fqn": ["psc", "pharmdb", "ros"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "ros", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"ros\"", "created_at": 1682432490.33069}, "source.psc.pharmdb.skinkera": {"database": "psc_dev", "schema": "pharmdb", "name": "skinkera", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.skinkera", "fqn": ["psc", "pharmdb", "skinkera"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "skinkera", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"skinkera\"", "created_at": 1682432490.3309777}, "source.psc.pharmdb.solubility": {"database": "psc_dev", "schema": "pharmdb", "name": "solubility", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.solubility", "fqn": ["psc", "pharmdb", "solubility"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "solubility", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"solubility\"", "created_at": 1682432490.3312435}, "source.psc.pharmdb.toxtracker": {"database": "psc_dev", "schema": "pharmdb", "name": "toxtracker", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.toxtracker", "fqn": ["psc", "pharmdb", "toxtracker"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "toxtracker", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"toxtracker\"", "created_at": 1682432490.3314936}, "source.psc.pharmdb.tubulin": {"database": "psc_dev", "schema": "pharmdb", "name": "tubulin", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.tubulin", "fqn": ["psc", "pharmdb", "tubulin"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "tubulin", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"tubulin\"", "created_at": 1682432490.331737}, "source.psc.pharmdb.worker_safety": {"database": "psc_dev", "schema": "pharmdb", "name": "worker_safety", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.worker_safety", "fqn": ["psc", "pharmdb", "worker_safety"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "worker_safety", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"worker_safety\"", "created_at": 1682432490.3320096}, "source.psc.pharmdb.zebrafish": {"database": "psc_dev", "schema": "pharmdb", "name": "zebrafish", "resource_type": "source", "package_name": "psc", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.psc.pharmdb.zebrafish", "fqn": ["psc", "pharmdb", "zebrafish"], "source_name": "pharmdb", "source_description": "", "loader": "", "identifier": "zebrafish", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"psc_dev\".\"pharmdb\".\"zebrafish\"", "created_at": 1682432490.3323622}}, "macros": {"macro.psc.numeric": {"name": "numeric", "resource_type": "macro", "package_name": "psc", "path": "macros/postgres.sql", "original_file_path": "macros/postgres.sql", "unique_id": "macro.psc.numeric", "macro_sql": "{% macro numeric(value, is_column=true) %}\n{% if is_column %}{% set value = '\"' ~ value ~ '\"' %}{% endif %}\n    CASE\n        WHEN CAST({{ value }} AS VARCHAR) ~ '^-?\\d*\\.?\\d+$' THEN CAST({{ value }} AS NUMERIC) \n        ELSE NULL \n    END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5605588, "supported_languages": null}, "macro.psc.ppdb_split_confidence": {"name": "ppdb_split_confidence", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_split_confidence", "macro_sql": "{% macro ppdb_split_confidence(column_name, prefix) %}\n    , substring(\"{{ column_name }}\" from '^(\\D+)\\d ') AS {{ prefix }}_source\n    , substring(\"{{ column_name }}\" from '^\\D+(\\d)') AS {{ prefix }}_confidence\n    , lower(substring(\"{{ column_name }}\" from '^\\D+\\d <i>(.+)</i>')) AS {{ prefix }}_species\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5696967, "supported_languages": null}, "macro.psc.ppdb_confidence": {"name": "ppdb_confidence", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_confidence", "macro_sql": "{% macro ppdb_confidence(column_name, prefix) %}\n    , substring(\"{{ column_name }}\" from '^(\\D+)\\d ') AS {{ prefix }}_source\n    , substring(\"{{ column_name }}\" from '^\\D+(\\d)') AS {{ prefix }}_confidence\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5701582, "supported_languages": null}, "macro.psc.ppdb_confidence_extra": {"name": "ppdb_confidence_extra", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_confidence_extra", "macro_sql": "{% macro ppdb_confidence_extra(column_name, prefix, extra_label='extra') %}\n    {{ ppdb_confidence(column_name, prefix) }}\n    , lower(substring(\"{{ column_name }}\" from '^\\D+\\d <i>(.+)</i>')) AS {{ prefix }}_{{ extra_label }}\n{% endmacro %}", "depends_on": {"macros": ["macro.psc.ppdb_confidence"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5707786, "supported_languages": null}, "macro.psc.ppdb_ecotox": {"name": "ppdb_ecotox", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_ecotox", "macro_sql": "{% macro ppdb_ecotox(column_name, prefix) %}\n    , CAST(replace(\"{{ column_name }}\",',','.') AS NUMERIC) AS {{ prefix }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5711074, "supported_languages": null}, "macro.psc.ppdb_study": {"name": "ppdb_study", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_study", "macro_sql": "{% macro ppdb_study(column_name) %}\n    , \"{{ column_name }}\" AS dose\n    , substring('{{ dbt.escape_single_quotes(column_name) }}' FROM '.\\((.*)\\)$') AS unit\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.571475, "supported_languages": null}, "macro.psc.int_ppdb_study_preamble": {"name": "int_ppdb_study_preamble", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.int_ppdb_study_preamble", "macro_sql": "{% macro int_ppdb_study_preamble(observation, subtype='NULL', subsubtype='NULL', extra='NULL') %}\n    , '{{ observation }}' AS observation\n    , '{{ subtype }}' AS subtype\n    , '{{ subsubtype }}' AS subsubtype \n    , {{ extra }} AS extra\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5720372, "supported_languages": null}, "macro.psc.int_ppdb_study_ppdb_study": {"name": "int_ppdb_study_ppdb_study", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.int_ppdb_study_ppdb_study", "macro_sql": "{% macro int_ppdb_study_ppdb_study(column_name) %}\n    , \"{{ column_name }}\" AS RESULT_VALUE\n    , substring('{{ dbt.escape_single_quotes(column_name) }}' FROM '.\\((.*)\\)$') AS RESULT_UNIT\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5724084, "supported_languages": null}, "macro.psc.int_ppdb_study_confidence": {"name": "int_ppdb_study_confidence", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.int_ppdb_study_confidence", "macro_sql": "{% macro int_ppdb_study_confidence(column_name) %}\n    , substring(\"{{ column_name }}\" from '^(\\D+)\\d') AS source\n    , CAST(substring(\"{{ column_name }}\" from '^\\D+(\\d)') AS SMALLINT) AS confidence\n    , substring(\"{{ column_name }}\" from '^\\D+\\d (.+)') AS extras\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5728626, "supported_languages": null}, "macro.psc.ppdb_observation_parse_result": {"name": "ppdb_observation_parse_result", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_result", "macro_sql": "{% macro ppdb_observation_parse_result(column_name) %}\n    , CAST({{ numeric(column_name) }} AS NUMERIC) AS \"result_value\"\n    , CAST(\"{{ column_name }}\" AS VARCHAR) AS \"result_text\"\n    , substring('{{ dbt.escape_single_quotes(column_name) }}' FROM '.\\((.*)\\)$') AS unit\n{% endmacro %}", "depends_on": {"macros": ["macro.psc.numeric", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.573305, "supported_languages": null}, "macro.psc.ppdb_observation_parse_confidence2": {"name": "ppdb_observation_parse_confidence2", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_confidence2", "macro_sql": "{% macro ppdb_observation_parse_confidence2(column_name) -%}\n    , substring(\"{{ column_name }}\" from '^([[:alpha:]]+)\\d') AS \"source\"\n    , CAST(substring(\"{{ column_name }}\" from '^[[:alpha:]]+(\\d)') AS SMALLINT) AS \"confidence\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5736313, "supported_languages": null}, "macro.psc.ppdb_observation_parse_quality": {"name": "ppdb_observation_parse_quality", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_quality", "macro_sql": "{% macro ppdb_observation_parse_quality(column_name, measure='confidence') -%}\n    {% if measure == 'source' %}\n    substring(\"{{ column_name }}\" from '^([[:alpha:]]+)\\d')\n    {% endif %}\n\n    {% if measure == 'confidence' %}\n    CAST(substring(\"{{ column_name }}\" from '^[[:alpha:]]+(\\d)') AS SMALLINT)\n    {% endif %}\n\n    {# target appears after confidence and before comma #}\n    {% if measure == 'target' %}\n    substring(\"{{ column_name }}\" from '^[[:alpha:]]+\\d\\s([^,]+)')\n    {% endif %}\n\n    {% if measure == 'note' %}\n    substring(\"{{ column_name }}\" from '^[[:alpha:]]+\\d(.*)')\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.574704, "supported_languages": null}, "macro.psc.ppdb_observation_parse_result_numeric": {"name": "ppdb_observation_parse_result_numeric", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_result_numeric", "macro_sql": "{% macro ppdb_observation_parse_result_numeric(column_name) -%}\nCASE\n    WHEN CAST(\"{{ column_name }}\" AS TEXT) ~ '^-?\\d*\\.?\\d+$' THEN CAST(\"{{ column_name }}\" AS NUMERIC) \n    ELSE NULL \nEND\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5750237, "supported_languages": null}, "macro.psc.ppdb_observation_parse_result_text": {"name": "ppdb_observation_parse_result_text", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_result_text", "macro_sql": "{% macro ppdb_observation_parse_result_text(column_name) -%}\nCAST(\"{{ column_name }}\" AS TEXT)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5752635, "supported_languages": null}, "macro.psc.ppdb_observation_parse_unit": {"name": "ppdb_observation_parse_unit", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_unit", "macro_sql": "{% macro ppdb_observation_parse_unit(column_name) -%}\nsubstring('{{ dbt.escape_single_quotes(column_name) }}' FROM '\\((.*)\\)$')\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5755854, "supported_languages": null}, "macro.psc.ppdb_observation_parse_subject": {"name": "ppdb_observation_parse_subject", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_subject", "macro_sql": "{% macro ppdb_observation_parse_subject(column_name) -%}\nsubstring({{ '\"' ~ column_name ~ '\"' if column_name else 'NULL' }} FROM '^[[:alpha:]]+\\d\\s([^,]+)')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.576042, "supported_languages": null}, "macro.psc.ppdb_observation_parse_source": {"name": "ppdb_observation_parse_source", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_source", "macro_sql": "{% macro ppdb_observation_parse_source(column_name) -%}\nsubstring({{ '\"' ~ column_name ~ '\"' if column_name else 'NULL' }} FROM '^([[:alpha:]]+)\\d')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5765147, "supported_languages": null}, "macro.psc.ppdb_observation_parse_relative": {"name": "ppdb_observation_parse_relative", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_relative", "macro_sql": "{% macro ppdb_observation_parse_relative(column_name) -%}\n{{ '\"' ~ column_name ~ '\"' if column_name else 'NULL' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.578018, "supported_languages": null}, "macro.psc.ppdb_observation_parse_extra": {"name": "ppdb_observation_parse_extra", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_extra", "macro_sql": "{% macro ppdb_observation_parse_extra(column_name, extras=NULL) -%}\njsonb_build_object(\n    'note', nullif(substring({{ '\"' ~ column_name ~ '\"' if column_name else 'NULL' }} FROM '^[[:alpha:]]+\\d(.*)'),'')\n    {% for e in extras %}\n    , '{{ e[0] }}', {{ e[1] }}\n    {% endfor %}\n)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.580294, "supported_languages": null}, "macro.psc.ppdb_observation_parse_confidence": {"name": "ppdb_observation_parse_confidence", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_parse_confidence", "macro_sql": "{% macro ppdb_observation_parse_confidence(column_name) -%}\nCAST(substring({{ '\"' ~ column_name ~ '\"' if column_name else 'NULL' }} FROM '^[[:alpha:]]+(\\d)') AS SMALLINT)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.581145, "supported_languages": null}, "macro.psc.ppdb_observation_meta": {"name": "ppdb_observation_meta", "resource_type": "macro", "package_name": "psc", "path": "macros/ppdb.sql", "original_file_path": "macros/ppdb.sql", "unique_id": "macro.psc.ppdb_observation_meta", "macro_sql": "{% macro ppdb_observation_meta() -%}\n    , \"ID\" AS _id\n    , _uid AS _source_uid\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5816336, "supported_languages": null}, "macro.psc.record_source": {"name": "record_source", "resource_type": "macro", "package_name": "psc", "path": "macros/general.sql", "original_file_path": "macros/general.sql", "unique_id": "macro.psc.record_source", "macro_sql": "{% macro record_source(parent_table_name, parent_id_name) %}\n    , '{{ parent_table_name }}' AS _parent_table\n    , {{ parent_id_name }} AS _parent_id\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5829735, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5948982, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5961797, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5969784, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.5977442, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.59886, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.599725, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6001422, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6010222, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6019454, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.604668, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6058943, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6082206, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.609893, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6126733, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6140277, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6155903, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6161528, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6165035, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6172695, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6177914, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6180587, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.618309, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6185772, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6199417, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6221025, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6230707, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6246915, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6260967, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.635069, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6357915, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.637053, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6374428, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6386857, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6393676, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.640121, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6414275, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6442058, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6478517, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.649353, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6501322, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6538913, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6607838, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6679063, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6687412, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6697927, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6708622, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6869166, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.687912, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6890047, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6902354, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6913087, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6924663, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.693708, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6946151, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6952791, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6957886, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6963305, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6970317, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.6976442, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7015529, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7027338, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.703484, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7042189, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.705871, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.706491, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.706974, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7073967, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7079296, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7081997, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7085996, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.708998, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7127032, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7131267, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7135537, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7138214, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7146537, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7151208, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7153738, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.715986, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7165165, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7170486, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7181456, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.719257, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.722025, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7230563, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7240963, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7247312, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.727488, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7286065, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7289515, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7293022, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7302227, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7330317, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.73365, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7340949, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7344525, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7348905, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7354078, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.735941, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7366393, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7370756, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.737414, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7404501, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7410493, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.741803, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7422216, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7430882, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7436132, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.744943, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.745471, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7472196, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7486188, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7490902, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7496076, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7500508, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.750643, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7517233, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.752759, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7531838, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7535517, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7539725, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7562916, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7569563, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7572906, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.757631, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7579403, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7587397, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7594082, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7601006, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7682755, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7703128, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7709029, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7720246, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7724392, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7728095, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.773117, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7733681, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7737641, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7740347, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.775084, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.775476, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7784257, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7852035, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.797494, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.798353, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7988973, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7991967, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.7996721, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.799979, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.800437, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8023682, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8029814, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8035283, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8044813, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.811123, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8117535, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8122704, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8139715, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8143537, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8148, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8183398, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8214486, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8375545, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.838872, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.840318, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8415442, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8430467, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.847303, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.848329, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8491805, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8523257, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8530478, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8534975, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8584526, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8593142, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.859704, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8600788, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8607473, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8679569, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8711545, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.873419, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8741322, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8757565, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8850071, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8876345, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8901978, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8920503, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.893484, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8951242, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8956597, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8960521, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8966367, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8970437, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.8976495, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.898081, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.898619, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.899158, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.899507, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9001045, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.90986, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9135053, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9140995, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9164853, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.91718, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.918821, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.930085, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9319503, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.93277, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9343889, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.935984, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9455125, "supported_languages": ["sql"]}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9472606, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9483426, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9500506, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9511852, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9531212, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9542296, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9554627, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9564867, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9572473, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9585028, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9592197, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9613357, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9633753, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9643855, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9648862, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9660378, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9665918, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.967597, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9680848, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9690974, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.96959, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9707785, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9713466, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9729497, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9739683, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9753053, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9760396, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.977107, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.977619, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9792683, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.98009, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9812703, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9821875, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9836068, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9842143, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9852183, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.985584, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9870749, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.987943, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.988316, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9888842, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.98906, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9908361, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.991181, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.991508, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.991866, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.99219, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9924834, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9928665, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9932096, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9935513, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.994039, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9943686, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9946756, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9949915, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.995273, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9958553, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9960885, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9965706, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.996952, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9975228, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9978323, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.998372, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432487.9986715, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0001023, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0007136, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0028808, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0036383, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0044057, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0075157, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0081573, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0094328, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.010437, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0116508, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0126622, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0128553, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0138195, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0143125, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.014929, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.01549, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0177438, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0185707, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0220125, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0243795, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0252354, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.026364, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0272086, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0287175, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0308013, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.031907, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0331428, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0340142, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0356975, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0366774, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.039465, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.041572, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.044881, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0501044, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0514393, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.053977, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0561438, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0610316, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0651033, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0671632, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0680287, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.069812, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.072543, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0736995, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0746164, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.076244, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0803585, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.08452, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.088789, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0928018, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0937598, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0958266, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.0984788, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.103358, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.107078, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1083562, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1089385, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.110101, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1111484, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.125162, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1398442, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1423833, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1434972, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1444945, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1454244, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1462476, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.147021, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1500874, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1522362, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1531389, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1554065, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1570807, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.158418, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.161509, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1650517, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.167053, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1692312, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1702244, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.170745, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1715608, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1727588, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1750023, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.178612, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.181164, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1847463, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1858888, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1869245, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1879938, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1896064, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1909716, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1933098, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.194126, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.194823, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1956046, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1959195, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.196217, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1970322, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1977746, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.1991296, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2015512, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2029352, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2039955, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2052946, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.206008, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2074473, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2093616, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.211207, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2146955, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.218366, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2235434, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2253585, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2274494, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2290504, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2299376, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.231888, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2366996, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2466357, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2524588, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2545469, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2557852, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.257768, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.25919, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2604284, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2613862, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.262407, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2643905, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.266773, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682432488.2695572, "supported_languages": null}}, "docs": {"doc.psc.property_name_table": {"name": "property_name_table", "resource_type": "doc", "package_name": "psc", "path": "property_name.md", "original_file_path": "docs/property_name.md", "unique_id": "doc.psc.property_name_table", "block_contents": "| name | description |\n|---|---|\n| Complexity | The complexity rating of a compound is a rough estimate of how   complicated a structure is, seen from both the point of view of the elements   contained and the displayed structural features including symmetry. This   complexity rating is computed using the Bertz/Hendrickson/Ihlenfeldt formula. |\n| Covalently-Bonded Unit Count | A covalently-bonded unit is a group of atoms connected by covalent bonds,   ignoring other bond types (or a single atom without covalent bonds). The   \"covalently-bonded unit count\" property is the number of such units   in this compound compound. |\n| Defined Atom Stereocenter Count | An atom stereocenter, also known as a chiral center, is an atom that is   attached to four different types of atoms (or groups of atoms) in the   tetrahedral arrangement. It can have either (R)- or (S)- configurations. Some   compounds, such as racemic mixtures, have an undefined atom stereocenter,   whose (R/S)-configuration is not specifically defined. The \"defined atom   stereocenter count\" is the number of atom stereocenters whose   configurations are specifically defined. |\n| Defined Bond Stereocenter Count | A bond stereocenter is a non-rotatable bond around which two atoms can   have different arrangement (as in cis- and trans-forms of butene around its   double bond). Some compounds have an undefined bond stereocenter, whose   stereochemistry is not specifically defined. The \"defined bond   stereocenter count\" is the number of bond stereocenters whose   configurations are specifically defined. |\n| Exact Mass | The exact mass of an isotopic species is obtained by summing the masses   of the individual isotopes of the molecule. |\n| Formal Charge | Formal charge is the difference between the number of valence electrons   of each atom and the number of electrons the atom is associated with. Formal   charge assumes any shared electrons are equally shared between the two bonded   atoms. |\n| Heavy Atom Count | The number of heavy atoms (i.e., non-hydrogen atoms) in this compound. |\n| Hydrogen Bond Acceptor Count | The number of hydrogen bond acceptors in this compound. |\n| Hydrogen Bond Donor Count | The number of hydrogen bond donors in this compound. |\n| Isotope Atom Count | Isotope atom count is the number of isotopes that are not most abundant   for the corresponding chemical elements. Isotopes are variants of a chemical   element which differ in neutron number. For example, among three isotopes of   carbon (i.e., C-12, C-13, and C-14), the isotope atom count considers the   C-13 and C-14 atoms, because C-12 is the most abundant isotope of carbon. |\n| Molecular Weight | Molecular weight or molecular mass refers to the mass of a molecule. It   is calculated as the sum of the mass of each constituent atom multiplied by   the number of atoms of that element in the molecular formula. The molecular   weight is also called the relative molar mass, because molecular weights are   reported in daltons, which is defined relative to the mass of the isotope 12C   (carbon 12). |\n| Monoisotopic Mass | The monoisotopic mass is the sum of the masses of the atoms in a molecule   using the unbound, ground-state, rest mass of the principal (most abundant)   isotope for each element instead of the isotopic average mass. |\n| Rotatable Bond Count | A rotatable bond is defined as any single-order non-ring bond, where   atoms on either side of the bond are in turn bound to nonterminal heavy   (i.e., non-hydrogen) atoms. That is, where rotation around the bond axis   changes the overall shape of the molecule, and generates conformers which can   be distinguished by standard fast spectroscopic methods. |\n| Topological Polar Surface Area | The topological polar surface area (TPSA) is an estimate of the polar   surface area (in Angstroms^2) of a molecule, computed as the surface sum over   polar atoms in the molecule. The implementation follows the paper by Ertl et   al. [J. Med. Chem. 2000, 43, 3714-3717]: only N and O are considered, 3D   coordinates are not used, and there are various precomputed factors for   different hybridizations, charges and participation in aromatic systems. |\n| Undefined Atom Stereocenter Count | The number of atom stereocenters whose configurations are not   specifically defined. For the definition of atom stereocenters, see the   \"defined atom stereocenter count\" above. |\n| Undefined Bond Stereocenter Count | The number of bond stereocenters whose configurations are not   specifically defined. For the definition of bond stereocenters, see the   \"defined bond stereocenter count\" above. |\n| XLogP3 | XLogP3 is a predicted octanol-water partition coefficient, computed using   the algorithm described in J. Chem. Inf. Model. 2007, 47, 6, 2140-2148. It is   used as a measure of hydrophilicity or hydrophobicity of a molecule. |"}, "doc.psc.source_table": {"name": "source_table", "resource_type": "doc", "package_name": "psc", "path": "observation_source.md", "original_file_path": "docs/observation_source.md", "unique_id": "doc.psc.source_table", "block_contents": "| Name | Description                                                                                                                                                                                                                                                                           |\n|------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| A    | EU Regulatory & Evaluation Data as   published by EC, EFSA (RAR, DAR & Conclusion dossiers), EMA (e.g.) EU   Annex III PIC DGD (For example see   http://ec.europa.eu/sanco_pesticides/public/index.cfm or EFSA Scientific   Publications https://www.efsa.europa.eu/en/publications) |\n| AA   | IOBC Database on classification of side effects to beneficial organisms,   2005                                                                                                                                                                                                       |\n| AB   | SELECTV Database                                                                                                                                                                                                                                                                      |\n| AC   | EC Joint Research Centre ESIS European Chemical Substance Information Systems including EINECS (See https://echa.europa.eu/information-on-chemicals)                                                                                                                                  |\n| AE   | Joint Assessment of Commodity Chemicals ECETOC (See   http://www.ecetoc.org)                                                                                                                                                                                                          |\n| AF   | European Food Safety Authority (EFSA)                                                                                                                                                                                                                                                 |\n| AG   | Chemicals Regulation Division, Health and Safety Executive (HSE), UK                                                                                                                                                                                                                  |\n| B    | UK CRD and ACP Evaluation Documents / and other DEFRA (UK) documents (See http://www.pesticides.gov.uk/publications.asp?id=202)                                                                                                                                                     |\n| C    | AGRITOX (See http://www.agritox.anses.fr/)                                                                                                                                                                                                                                            |\n| CA   | Medical and toxicological databases and information systems e.g. TOXNET (See https://www.nlm.nih.gov/toxnet/index.html)                                                                                                                                                             |\n| D    | Agricultural Research Information System (ARIS) Database                                                                                                                                                                                                                              |\n| DW   | Don Wauchope personal database for Pka data: Wauchope, R. D. and Edwards,   J. Dissociation constants for pesticide active ingredients: a database and   comparison with predicted values. MS in preparation                                                                          |\n| E    | Manufacturers Safety Data Sheets                                                                                                                                                                                                                                                      |\n| F    | U.S. EPA ECOTOX database / U.S. EPA pesticide fate database / Miscellaneous WHO documents (See   https://www.epa.gov/pesticide-science-and-assessing-pesticide-risks/databases-related-pesticide-risk-assessment)                                                                   |\n| FAO  | Miscellaneous FAO publications                                                                                                                                                                                                                                                        |\n| G    | Extension Toxicology network Database EXTOXNET (See http://extoxnet.orst.edu/ghindex.html)                                                                                                                                                                                          |\n| H    | The US ARS Pesticide Properties Database (See http://www.ars.usda.gov/Services/docs.htm?docid=14199)                                                                                                                                                                                |\n| J    | Pesticide Action Network Database (See http://www.pesticideinfo.org/)                                                                                                                                                                                                                 |\n| K    | Research Datasets (e.g. Pandora, Demetra)                                                                                                                                                                                                                                             |\n| L    | Pesticide manuals and hard copy reference books / other sources                                                                                                                                                                                                                       |\n| M    | GLEAMS Model database (Groundwater Loading Effects of Agricultural Management Systems). (See   http://www.cpes.peachnet.edu/sewrl/Gleams/gleams_y2k_update.htm)                                                                                                                     |\n| N    | Various Trusts, NGOs & Charities Data                                                                                                                                                                                                                                                 |\n| P    | Other Governments and Regulators                                                                                                                                                                                                                                                      |\n| Q    | Miscellaneous Data from On-line Sources                                                                                                                                                                                                                                               |\n| R    | Peer Reviewed Scientific Publications                                                                                                                                                                                                                                                 |\n| S    | Expert Judgement                                                                                                                                                                                                                                                                      |\n| T    | UN EPFA Database                                                                                                                                                                                                                                                                      |\n| US   | US Dept of Agriculture National Resources Conservation Service - various   datasheets, databases and online sources                                                                                                                                                                   |\n| V    | ChemID Online Databases (See https://chem.nlm.nih.gov/chemidplus/) / IPCS   INCHEM (See http://www.inchem.org/)                                                                                                                                                                       |\n| W    | French database provided by ARVALIS-Institut du V\u00e9g\u00e9tal                                                                                                                                                                                                                               |\n| X    | WINPST Database (See http://www.ipm.ucdavis.edu/TOX/winpstdoc.html)                                                                                                                                                                                                                   |\n| Y    | Germany's Federal Environment Agency (UBA) (See http://www.umweltbundesamt.de/index-e.htm)                                                                                                                                                                                          |\n| Z    | Kingtai Chemials Website (See http://www.kingtaichem.com/)                                                                                                                                                                                                                            |"}, "doc.psc._uid": {"name": "_uid", "resource_type": "doc", "package_name": "psc", "path": "blocks.md", "original_file_path": "docs/blocks.md", "unique_id": "doc.psc._uid", "block_contents": "Unique identifier for this table only. This is used for row tracking."}, "doc.psc.inchi_key": {"name": "inchi_key", "resource_type": "doc", "package_name": "psc", "path": "blocks.md", "original_file_path": "docs/blocks.md", "unique_id": "doc.psc.inchi_key", "block_contents": "Standard InChI key of a compound. This is the primary identifier to link a compound with its associated data."}, "doc.psc.confidence_scale": {"name": "confidence_scale", "resource_type": "doc", "package_name": "psc", "path": "blocks.md", "original_file_path": "docs/blocks.md", "unique_id": "doc.psc.confidence_scale", "block_contents": "Confidence can be one of the following scales:\n\n|   | Description                                   |\n|---|-----------------------------------------------|\n| 1 | Estimated data with little or no verification |\n| 2 | Unverified data of unknown source             |\n| 3 | Unverified data of known source               |\n| 4 | Verified data                                 |\n| 5 | Verified data used for regulatory purposes.   |"}, "doc.psc.observation_name": {"name": "observation_name", "resource_type": "doc", "package_name": "psc", "path": "blocks.md", "original_file_path": "docs/blocks.md", "unique_id": "doc.psc.observation_name", "block_contents": "|name|description|unit|\n|----|-----------|----|\n|1/n|||\n|ADI|Acceptable Daily Intake||\n|AOEL|||\n|ARfD||mg/kg BW/day|\n|Bioconcentration Factor|||\n|Boiling Point|degree Celsius, 1 atomsphere|deg C|\n|Bulk Density||g/ml|\n|Clearance Half-Life||days|\n|Degradation Point|degree Celsius|degC, 1atm|\n|Dissociation Constant|||\n|Drinking water MAC||ug/l|\n|DT50|||\n|DT90|||\n|EC50|The concentration of a chemical that can be expected to cause a defined non-lethal effect in 50% of the tested population. In some cases, other percentages may be displayed (e.g., EC10 or EC15).|mg/l|\n|Flashpoint||degC|\n|Freundlich Exponent||1/n|\n|Henry Law Constant||Pa/m3/mol|\n|Kd||ml/g|\n|Kf||ml/g|\n|Kfoc||ml/g|\n|Koc|||\n|LC50|amount of a substance suspended in the air required to kills 50% of a test animals during a predetermined observation period|mg/l|\n|LD50|Used in toxicology this is the median lethal dose (LD50, abbreviation for 'Lethal Dose, 50%'), of a toxic substance and is the dose required to kill half the tested population. LD50 figures are frequently used as a general indicator of a substance's acute toxicity.|mg/kg|\n|LDLo|LD Low||\n|LogP|description about LogP||\n|Maximum UV Absorption||L/mol/cm|\n|Melting Point|degree Celsius|degC|\n|NOAEL||mg/kg bw/d|\n|NOEAEC|No Observed Ecologically Adverse Effect Concentration. The highest concentration that causes no observed adverse effect on fauna or flora.|mg/l|\n|NOEC|No Observed Effect Concentration (see NOEL)|mg/l|\n|NOEL|No Observed Effect Level. Highest dose or exposure level of a substance or material that produces no noticeable (observable) toxic effect on tested animals|mg/kg|\n|Percutaneous penetration studies (%)||%|\n|Refractive Index|||\n|RL50|The RL50 (Residual Level) is the rate in days for which the pesticide declines by 50% on and/or in the surface of the specified plant matrix (leaves, fruit, roots, seeds, grain etc.).||\n|Solubility||mg/l|\n|Surface Tension||mN/m|\n|Vapour Pressure|Vapour pressure at 20 degC|mPa|"}, "doc.psc.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "psc", "path": "meta.md", "original_file_path": "docs/meta.md", "unique_id": "doc.psc.__overview__", "block_contents": "# TODO\n- Decide on column names with variants, options:\n  1. variants appear after type: `name_iupac`, `name_cas`, `id_material`, `id_ppdb`, etc. \n  **PRO**: easy to group related properties together; **CONS**: order can be seen as unnatural\n  2. variants appear before type, in more natural order: `iupac_name`,`cas_name`,`ppdb_id`\n- InChI Key is used to identify a compound. It is the only internationally recognized key unique enough to avoid duplicate compound entries when processing data across multiple data sets. \n\n# General\n\nThis documentation is produced using dbt's documentation generation feature. Columns are annotated with type and description, along with relation diagrams where applicable. \n\nWhile not intentional, the ELT pattern is adapted. Currently dbt is responsible for producing the final, public data model after ingesting raw data first into Postgres. \n\nDuring raw and staging phase of the pipeline, asset names generally follow the `{system}__{snake_case}` pattern to allow quick identification of any given asset during review.\n\n\n# Extract and Load\n\nRaw data from each source is first loaded to its own schema. Column names are loaded as is, and values are loaded as texts without any casting. This allows documentation on source data as needed. Each time a data set is loaded, the landing tables are re-created.\n\nDuring the ingestion a few internal columns are created:\n- `_id`: This is the internal id within the dataset. Not guaranteed to be unique.\n- `_uid`: This is an UUID and is used for row tracking\n- `_run_id`: Identify the specific Dagster run responsible for the ingestion.\n- `_step_key`: Identify the step within Dagster's execution graph that is reponsible for the ingestion.\n- `_created_dtm`: Timestamp when the row record is first created.\n\n`_id` and `_uid` are most important, they are often copied through the transformation process so the origin of the record can be tracked.\n\n# Transformation\n\nData from each data source are loaded to raw tables prefixed with `raw_`, with custom `raw` schema. These tables are historical tables meaning data are *not* purged with each load. This allows \n\nThe `stg_` prefix is used to scrub/clean the data. Columns can (and should) be renamed here if possible.\n\n# Entity Relation Diagram\n\n![erd](assets/pscpi.png)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.psc.blob": [], "model.psc.metabolite": ["model.psc.int_cmdb__metabolite"], "model.psc.compound": ["model.psc.int_ppdb__compound"], "model.psc.observation": ["model.psc.int_ppdb__compound", "model.psc.int_ppdb__observation"], "model.psc.compound_property": [], "model.psc.int_cmdb__metabolite": ["model.psc.stg_cmdb__metabolite"], "model.psc.int_cmdb__compound": ["model.psc.stg_cmdb__metabolite"], "model.psc.raw_cmdb__metabolite": ["source.psc.cmdb.cmdb__in"], "model.psc.stg_cmdb__metabolite": ["model.psc.raw_cmdb__metabolite"], "model.psc.pharmdb_lims": ["source.psc.pharmdb.aged_sorption"], "model.psc.int_ppdb__observation": ["model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox"], "model.psc.int_ppdb__compound": ["model.psc.stg_ppdb__alias", "model.psc.stg_ppdb__general", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__language"], "model.psc.raw_ppdb__language": ["source.psc.ppdb.ppdb__languages"], "model.psc.raw_ppdb__aliases": ["source.psc.ppdb.ppdb__aliases"], "model.psc.raw_ppdb__metabolite": ["source.psc.ppdb.ppdb__metabolites"], "model.psc.raw_ppdb__human": ["source.psc.ppdb.ppdb__human"], "model.psc.raw_ppdb__terrestrial_ecotox": ["source.psc.ppdb.ppdb__terrestrial_ecotox"], "model.psc.raw_ppdb__general": ["source.psc.ppdb.ppdb__general"], "model.psc.raw_ppdb__soil_adsorption": ["source.psc.ppdb.ppdb__soil_adsorption"], "model.psc.raw_ppdb__plant": ["source.psc.ppdb.ppdb__plant_matrix_rl50"], "model.psc.raw_ppdb__aquatic_ecotox": ["source.psc.ppdb.ppdb__aquatic_ecotox"], "model.psc.raw_ppdb__fate": ["source.psc.ppdb.ppdb__fate"], "model.psc.raw_ppdb__soil_degradation": ["source.psc.ppdb.ppdb__soil_degradation"], "model.psc.stg_ppdb__language": ["model.psc.raw_ppdb__language"], "model.psc.stg_ppdb__aquatic_ecotox": ["model.psc.raw_ppdb__aquatic_ecotox"], "model.psc.stg_ppdb__general": ["model.psc.raw_ppdb__general"], "model.psc.stg_ppdb__plant": ["model.psc.raw_ppdb__plant"], "model.psc.stg_ppdb__metabolite": ["model.psc.raw_ppdb__metabolite"], "model.psc.stg_ppdb__human": ["model.psc.raw_ppdb__human"], "model.psc.stg_ppdb__alias": ["model.psc.raw_ppdb__aliases"], "model.psc.stg_ppdb__terrestrial_ecotox": ["model.psc.raw_ppdb__terrestrial_ecotox"], "model.psc.stg_ppdb__fate": ["model.psc.raw_ppdb__fate"], "model.psc.stg_ppdb__soil_degradation": ["model.psc.raw_ppdb__soil_degradation"], "model.psc.stg_ppdb__soil_adsorption": ["model.psc.raw_ppdb__soil_adsorption"], "analysis.psc.templates": [], "analysis.psc.try_cast": [], "analysis.psc.playground": [], "analysis.psc.safe_cast": [], "analysis.psc.create_meta_tables": [], "test.psc.assert_unique_identifier": [], "test.psc.assert_numeric": ["model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__aquatic_ecotox", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__fate", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__human", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__plant", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_adsorption", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__soil_degradation", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox", "model.psc.stg_ppdb__terrestrial_ecotox"], "seed.psc.observation_name": [], "seed.psc.discipline": [], "seed.psc.data_source": [], "seed.psc.property_name": [], "test.psc.relationships_observation_observation_name__name__ref_observation_name_.18c33f9c3f": ["model.psc.observation", "seed.psc.observation_name"], "test.psc.relationships_observation_data_source__name__ref_data_source_.60185c98f7": ["model.psc.observation", "seed.psc.data_source"], "test.psc.relationships_observation_inchi_key__inchi_key__ref_compound_.1f5471597c": ["model.psc.compound", "model.psc.observation"], "test.psc.relationships_compound_property_property_name__name__ref_property_name_.a8463711cf": ["model.psc.compound_property", "seed.psc.property_name"], "test.psc.relationships_compound_property_data_source__name__ref_data_source_.ca2b8964f2": ["model.psc.compound_property", "seed.psc.data_source"], "test.psc.relationships_compound_property_inchi_key__inchi_key__ref_compound_.c8f0254f68": ["model.psc.compound", "model.psc.compound_property"], "test.psc.relationships_blob_inchi_key__inchi_key__ref_compound_.3199260c6f": ["model.psc.blob", "model.psc.compound"], "test.psc.relationships_metabolite_inchi_key__inchi_key__ref_compound_.78fc0b552d": ["model.psc.compound", "model.psc.metabolite"], "test.psc.relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_.931c07b137": ["model.psc.compound", "model.psc.metabolite"], "source.psc.cmdb.cmdb__in": [], "source.psc.ppdb.ppdb__general": [], "source.psc.ppdb.ppdb__fate": [], "source.psc.ppdb.ppdb__aquatic_ecotox": [], "source.psc.ppdb.ppdb__terrestrial_ecotox": [], "source.psc.ppdb.ppdb__human": [], "source.psc.ppdb.ppdb__plant_matrix_rl50": [], "source.psc.ppdb.ppdb__soil_adsorption": [], "source.psc.ppdb.ppdb__soil_degradation": [], "source.psc.ppdb.ppdb__aliases": [], "source.psc.ppdb.ppdb__languages": [], "source.psc.ppdb.ppdb__metabolites": [], "source.psc.pharmdb.aged_sorption": [], "source.psc.pharmdb.algae": [], "source.psc.pharmdb.aromatase": [], "source.psc.pharmdb.atp": [], "source.psc.pharmdb.bee": [], "source.psc.pharmdb.bee_oral": [], "source.psc.pharmdb.er_ar": [], "source.psc.pharmdb.field_study": [], "source.psc.pharmdb.fish": [], "source.psc.pharmdb.fish_acute": [], "source.psc.pharmdb.gastroplus": [], "source.psc.pharmdb.hppd": [], "source.psc.pharmdb.hydrolysis": [], "source.psc.pharmdb.mmp": [], "source.psc.pharmdb.nrr": [], "source.psc.pharmdb.pit_area": [], "source.psc.pharmdb.plasma": [], "source.psc.pharmdb.ros": [], "source.psc.pharmdb.skinkera": [], "source.psc.pharmdb.solubility": [], "source.psc.pharmdb.toxtracker": [], "source.psc.pharmdb.tubulin": [], "source.psc.pharmdb.worker_safety": [], "source.psc.pharmdb.zebrafish": []}, "child_map": {"model.psc.blob": ["test.psc.relationships_blob_inchi_key__inchi_key__ref_compound_.3199260c6f"], "model.psc.metabolite": ["test.psc.relationships_metabolite_inchi_key__inchi_key__ref_compound_.78fc0b552d", "test.psc.relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_.931c07b137"], "model.psc.compound": ["test.psc.relationships_blob_inchi_key__inchi_key__ref_compound_.3199260c6f", "test.psc.relationships_compound_property_inchi_key__inchi_key__ref_compound_.c8f0254f68", "test.psc.relationships_metabolite_inchi_key__inchi_key__ref_compound_.78fc0b552d", "test.psc.relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_.931c07b137", "test.psc.relationships_observation_inchi_key__inchi_key__ref_compound_.1f5471597c"], "model.psc.observation": ["test.psc.relationships_observation_data_source__name__ref_data_source_.60185c98f7", "test.psc.relationships_observation_inchi_key__inchi_key__ref_compound_.1f5471597c", "test.psc.relationships_observation_observation_name__name__ref_observation_name_.18c33f9c3f"], "model.psc.compound_property": ["test.psc.relationships_compound_property_data_source__name__ref_data_source_.ca2b8964f2", "test.psc.relationships_compound_property_inchi_key__inchi_key__ref_compound_.c8f0254f68", "test.psc.relationships_compound_property_property_name__name__ref_property_name_.a8463711cf"], "model.psc.int_cmdb__metabolite": ["model.psc.metabolite"], "model.psc.int_cmdb__compound": [], "model.psc.raw_cmdb__metabolite": ["model.psc.stg_cmdb__metabolite"], "model.psc.stg_cmdb__metabolite": ["model.psc.int_cmdb__compound", "model.psc.int_cmdb__metabolite"], "model.psc.pharmdb_lims": [], "model.psc.int_ppdb__observation": ["model.psc.observation"], "model.psc.int_ppdb__compound": ["model.psc.compound", "model.psc.observation"], "model.psc.raw_ppdb__language": ["model.psc.stg_ppdb__language"], "model.psc.raw_ppdb__aliases": ["model.psc.stg_ppdb__alias"], "model.psc.raw_ppdb__metabolite": ["model.psc.stg_ppdb__metabolite"], "model.psc.raw_ppdb__human": ["model.psc.stg_ppdb__human"], "model.psc.raw_ppdb__terrestrial_ecotox": ["model.psc.stg_ppdb__terrestrial_ecotox"], "model.psc.raw_ppdb__general": ["model.psc.stg_ppdb__general"], "model.psc.raw_ppdb__soil_adsorption": ["model.psc.stg_ppdb__soil_adsorption"], "model.psc.raw_ppdb__plant": ["model.psc.stg_ppdb__plant"], "model.psc.raw_ppdb__aquatic_ecotox": ["model.psc.stg_ppdb__aquatic_ecotox"], "model.psc.raw_ppdb__fate": ["model.psc.stg_ppdb__fate"], "model.psc.raw_ppdb__soil_degradation": ["model.psc.stg_ppdb__soil_degradation"], "model.psc.stg_ppdb__language": ["model.psc.int_ppdb__compound"], "model.psc.stg_ppdb__aquatic_ecotox": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "model.psc.stg_ppdb__general": ["model.psc.int_ppdb__compound"], "model.psc.stg_ppdb__plant": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "model.psc.stg_ppdb__metabolite": [], "model.psc.stg_ppdb__human": ["model.psc.int_ppdb__compound", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "model.psc.stg_ppdb__alias": ["model.psc.int_ppdb__compound"], "model.psc.stg_ppdb__terrestrial_ecotox": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "model.psc.stg_ppdb__fate": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "model.psc.stg_ppdb__soil_degradation": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "model.psc.stg_ppdb__soil_adsorption": ["model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "model.psc.int_ppdb__observation", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric", "test.psc.assert_numeric"], "analysis.psc.templates": [], "analysis.psc.try_cast": [], "analysis.psc.playground": [], "analysis.psc.safe_cast": [], "analysis.psc.create_meta_tables": [], "test.psc.assert_unique_identifier": [], "test.psc.assert_numeric": [], "seed.psc.observation_name": ["test.psc.relationships_observation_observation_name__name__ref_observation_name_.18c33f9c3f"], "seed.psc.discipline": [], "seed.psc.data_source": ["test.psc.relationships_compound_property_data_source__name__ref_data_source_.ca2b8964f2", "test.psc.relationships_observation_data_source__name__ref_data_source_.60185c98f7"], "seed.psc.property_name": ["test.psc.relationships_compound_property_property_name__name__ref_property_name_.a8463711cf"], "test.psc.relationships_observation_observation_name__name__ref_observation_name_.18c33f9c3f": [], "test.psc.relationships_observation_data_source__name__ref_data_source_.60185c98f7": [], "test.psc.relationships_observation_inchi_key__inchi_key__ref_compound_.1f5471597c": [], "test.psc.relationships_compound_property_property_name__name__ref_property_name_.a8463711cf": [], "test.psc.relationships_compound_property_data_source__name__ref_data_source_.ca2b8964f2": [], "test.psc.relationships_compound_property_inchi_key__inchi_key__ref_compound_.c8f0254f68": [], "test.psc.relationships_blob_inchi_key__inchi_key__ref_compound_.3199260c6f": [], "test.psc.relationships_metabolite_inchi_key__inchi_key__ref_compound_.78fc0b552d": [], "test.psc.relationships_metabolite_parent_inchi_key__inchi_key__ref_compound_.931c07b137": [], "source.psc.cmdb.cmdb__in": ["model.psc.raw_cmdb__metabolite"], "source.psc.ppdb.ppdb__general": ["model.psc.raw_ppdb__general"], "source.psc.ppdb.ppdb__fate": ["model.psc.raw_ppdb__fate"], "source.psc.ppdb.ppdb__aquatic_ecotox": ["model.psc.raw_ppdb__aquatic_ecotox"], "source.psc.ppdb.ppdb__terrestrial_ecotox": ["model.psc.raw_ppdb__terrestrial_ecotox"], "source.psc.ppdb.ppdb__human": ["model.psc.raw_ppdb__human"], "source.psc.ppdb.ppdb__plant_matrix_rl50": ["model.psc.raw_ppdb__plant"], "source.psc.ppdb.ppdb__soil_adsorption": ["model.psc.raw_ppdb__soil_adsorption"], "source.psc.ppdb.ppdb__soil_degradation": ["model.psc.raw_ppdb__soil_degradation"], "source.psc.ppdb.ppdb__aliases": ["model.psc.raw_ppdb__aliases"], "source.psc.ppdb.ppdb__languages": ["model.psc.raw_ppdb__language"], "source.psc.ppdb.ppdb__metabolites": ["model.psc.raw_ppdb__metabolite"], "source.psc.pharmdb.aged_sorption": ["model.psc.pharmdb_lims"], "source.psc.pharmdb.algae": [], "source.psc.pharmdb.aromatase": [], "source.psc.pharmdb.atp": [], "source.psc.pharmdb.bee": [], "source.psc.pharmdb.bee_oral": [], "source.psc.pharmdb.er_ar": [], "source.psc.pharmdb.field_study": [], "source.psc.pharmdb.fish": [], "source.psc.pharmdb.fish_acute": [], "source.psc.pharmdb.gastroplus": [], "source.psc.pharmdb.hppd": [], "source.psc.pharmdb.hydrolysis": [], "source.psc.pharmdb.mmp": [], "source.psc.pharmdb.nrr": [], "source.psc.pharmdb.pit_area": [], "source.psc.pharmdb.plasma": [], "source.psc.pharmdb.ros": [], "source.psc.pharmdb.skinkera": [], "source.psc.pharmdb.solubility": [], "source.psc.pharmdb.toxtracker": [], "source.psc.pharmdb.tubulin": [], "source.psc.pharmdb.worker_safety": [], "source.psc.pharmdb.zebrafish": []}}